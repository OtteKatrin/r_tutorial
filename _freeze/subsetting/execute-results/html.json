{
  "hash": "853195a09845d038107e2057d6e781e0",
  "result": {
    "markdown": "::: {.cell}\n\n:::\n\n\n# Subsetting data\n\n## Overview of the main commands in this section\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract elements from a vector\nvec_athlete[c(2, 3, 4)]\n\n## Extract rows and columns by position and name:\nwinners[c(1, 4), c(\"Year\", \"Nationality\")]\n\n## Conditional subsetting of rows:\nwinners[winners$Nationality == \"Kenya\" & winners$Year < 2000, ]\n```\n:::\n\n\n::: tidy\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n## conditional subsetting of rows\nfilter(winners, Nationality == \"Kenya\", Year < 2000)\n\n## selecting columns\nselect(winners, Year, Athlete)\n\n## pipe operator %>% \nwinners %>%\n  filter(Nationality == \"Kenya\", Year < 2000)\n  select(Year, Athlete)\n```\n:::\n\n:::\n\nLet's take a closer look at these commands and see them in action!\n\n## Data set\n\n![](./pictures/marathon.jpg)[^subsetting-1]\n\n[^subsetting-1]: Image by [Miguel A Amutio](https://unsplash.com/de/@amutiomi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/de/fotos/QDv-uBc-poY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).\n\nLoad the data set, which lies within the folder `raw_data` in my working directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners <- readRDS(file = \"./raw_data/winners.rds\")\n```\n:::\n\n\nLet's take a quick look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(winners)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Category Year              Athlete    Nationality Hours Minutes Seconds\n1      Men 1981 Dick Beardsley (Tie)  United States     2      11      48\n2      Men 1981  Inge Simonsen (Tie)         Norway    NA      11      48\n3      Men 1982           Hugh Jones United Kingdom     2       9      24\n4      Men 1983         Mike Gratton United Kingdom     2       9      43\n5      Men 1984     Charlie Spedding United Kingdom     2       9      57\n6      Men 1985          Steve Jones United Kingdom     2       8      16\n```\n:::\n:::\n\n\nSo, this data frame seems to hold the winners of the london marathon. Now we want to look at how we can extract data from our data structures, so we can work with it.\n\n## Data frames\n\nWe will look at two ways to extract rows and columns from data frames.\n\n### Base R\n\nIn `Base R`, we use square brackets `[,]` to extract specific rows and columns.\n\n### Rows\n\nIn front of the `,` we write the **rows** we want to extract:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\n# Extract the first and the fourth row\nwinners[c(1, 4), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Category Year              Athlete    Nationality Hours Minutes Seconds\n1      Men 1981 Dick Beardsley (Tie)  United States     2      11      48\n4      Men 1983         Mike Gratton United Kingdom     2       9      43\n```\n:::\n:::\n\n\n#### Columns\n\nBehind it the **columns**:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\n# Extract the second and the fourth column:\nwinners[, c(2, 4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n...\n```\n:::\n\n```{.r .cell-code}\n# Extract the columns by name:\nwinners[, c(\"Year\", \"Nationality\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n...\n```\n:::\n\n```{.r .cell-code}\n# Or only the column Year (and turn it into a vector right away):\nwinners$Year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 1981 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994\n [16] 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n [31] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1981\n [46] 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996\n...\n```\n:::\n:::\n\n\nSuggestion: Always use column names instead of position if possible. This way, your code will still work if the column position changes.\n\n#### Rows & Columns\n\nAnd of course we can combine both calls:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners[c(1, 4), c(2, 4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n```\n:::\n\n```{.r .cell-code}\nwinners[c(1, 4), c(\"Year\", \"Nationality\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n```\n:::\n:::\n\n\nWe can also use Boolean values (every row/column must get a value here, so we extract the first 100 rows by repeating `TRUE` 100 times, and than add `FALSE` for the remaining rows):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(winners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t100 obs. of  4 variables:\n $ Category   : chr  \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Nationality: chr  \"United States\" \"Norway\" \"United Kingdom\" \"United Kingdom\" ...\n $ Hours      : num  2 NA 2 2 2 2 2 2 2 2 ...\n $ Minutes    : num  11 11 9 9 9 8 10 9 10 9 ...\n```\n:::\n:::\n\n\n#### Conditional filtering\n\nNow the stuff we looked at in [logical operators](basics.qmd#comparisons-and-logical-operators) comes in handy! We can filter rows which match some condition. For example, we might want to look at all winners from Kenya:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners[winners$Nationality == \"Kenya\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n...\n```\n:::\n:::\n\n\nTake a close look at the comparison before the `,`:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners$Nationality == \"Kenya\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n...\n```\n:::\n:::\n\n\n`winners$Nationality` is a vector, so comparing its values to a specified value yields a logical vector with the respective `TRUE` and `FALSE` values. We can insert this logical vector in front of the `,` to extract all rows corresponding to that condition.\n\nIf we want to extract multiple nationalities at once, we need the `%in%` operator:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n2       Men 1981        Inge Simonsen (Tie)      Norway    NA      11      48\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n...\n```\n:::\n:::\n\n\nBy the way, if we want to save our extracted data frame, we can assign it a new name (otherwise it will only get printed into the console, but we can't go on working with it):\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners_nat <- winners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\nwinners_nat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n2       Men 1981        Inge Simonsen (Tie)      Norway    NA      11      48\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n...\n```\n:::\n:::\n\n\nWe can also combine multiple logical vectors using `&` (\"and\") and `|` (\"or\"). For example, we might want to look at all Kenyan winners before the year 2000:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners[winners$Nationality == \"Kenya\" & winners$Year < 2000, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Category Year           Athlete Nationality Hours Minutes Seconds\n10      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n61    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n```\n:::\n:::\n\n\nOr at all women winners from Australia in the wheelchair category, and the male winners from the United States in the wheelchair category:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners[(winners$Category == \"Wheelchair Women\" & winners$Nationality == \"Australia\") | (winners$Category == \"Wheelchair Men\" & winners$Nationality == \"United States\"), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Category Year            Athlete   Nationality Hours Minutes\n120   Wheelchair Men 2015        Josh George United States     1      31\n124   Wheelchair Men 2019   Daniel Romanchuk United States     1      33\n162 Wheelchair Women 2018 Madison de Rozario     Australia     1      42\n...\n```\n:::\n:::\n\n\nIn the long run, always having to define the data frame multiple time in each row can become a bit annoying and clutters the code. Enter, the `filter()` function:\n\n### Tidyverse\n\nThe `dplyr` package is part of the `tidyverse` and provides a grammar of data manipulation. We can use `filter()` to subset rows from a data frame:\n\n#### Rows\n\n::: tidy\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nfilter(winners, Nationality == \"Kenya\", Year < 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Category Year           Athlete Nationality Hours Minutes Seconds\n1      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n2    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n3    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n```\n:::\n:::\n\n:::\n\nNote how we can just write our conditions without connecting them with `&` (`filter()` does that automatically for us). Also, we don't have to put the column names into `\"\"`, because `filter()` knows that this are column names of the `winners` data frame, which makes coding a bit more pleasant.\n\n#### Columns\n\nFor extracting columns, we need `select()`:\n\n::: tidy\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nselect(winners, Year, Athlete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Year                    Athlete\n1   1981       Dick Beardsley (Tie)\n2   1981        Inge Simonsen (Tie)\n3   1982                 Hugh Jones\n...\n```\n:::\n:::\n\n:::\n\n#### Remark: The pipe operator\n\nHold on! Normally, we wouldn't write `tidyverse` code like that. Instead, we would use the pipe operator `%>%` (*than do*), which makes it easy to connect multiple function calls:\n\n::: tidy\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Nationality == \"Kenya\", Year < 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Category Year           Athlete Nationality Hours Minutes Seconds\n1      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n2    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n3    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n```\n:::\n:::\n\n:::\n\nHere, we first input the data frame we want to manipulate. Than we filter, as specified by the pipe operator. Like this, we can easily connect multiple function calls instead of nesting them within multiple brackets, which increases the readability:\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners[winners$Year > 2000 & winners$Category == \"Women\", c(\"Category\", \"Year\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Category Year\n65    Women 2001\n66    Women 2002\n67    Women 2003\n...\n```\n:::\n:::\n\n\nbecomes:\n\n::: tidy\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Year > 2000, Category == \"Women\") %>%\n  select(Category, Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Category Year\n1     Women 2001\n2     Women 2002\n3     Women 2003\n...\n```\n:::\n:::\n\n:::\n\nMuch nicer to read, right?\n\nSome notes on this syntax: 1. If we don't have any additional arguments we want to put into the function, we can just write the function name without any brackets. 1. The pipe operator will give the result of the last function as input into the next function. 1. If we want to clearly state which of the function arguments should receive the input, we can write a `.`, which can be read as *output of the previous function call*.\n\n## Vectors\n\nFinally, let's take a quick look at how to extract elements from a vector, which shouldn't be a problem after already dealing with data frames. It's pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets. Let's quickly define a vector for illustration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_athlete <- winners$Athlete # remember: `$` returns a vector\n```\n:::\n\n\nAnd look at the second element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_athlete[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Inge Simonsen (Tie)\"\n```\n:::\n:::\n\n\nOf course we can also do that for multiple elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_athlete[c(2, 3, 4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n```\n:::\n\n```{.r .cell-code}\n## Or, less to write:\nvec_athlete[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n```\n:::\n:::\n\n\nAnother way would be to provide a logical vector, which defines for each position if we want to extract the element or not (like we already did for data frames):\n\n\n::: {.cell output.lines='4'}\n\n```{.r .cell-code}\nvec_athlete[c(rep(TRUE, 100), rep(FALSE, 65))]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"Dick Beardsley (Tie)\"       \"Inge Simonsen (Tie)\"       \n  [3] \"Hugh Jones\"                 \"Mike Gratton\"              \n  [5] \"Charlie Spedding\"           \"Steve Jones\"               \n  [7] \"Toshihiko Seko\"             \"Hiromi Taniguchi\"          \n...\n```\n:::\n:::\n\n\n## Exercises\n\n1.  Load the `tutoR` package and start the exercise by typing the following code into your console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearnr::run_tutorial(name = \"subsetting\", package = \"tutoR\")\n```\n:::\n",
    "supporting": [
      "subsetting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}