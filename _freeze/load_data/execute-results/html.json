{
  "hash": "c54ee22e43fe7ac8aa6aa1a42d16657f",
  "result": {
    "markdown": "# Load data\n\n## Data types\n\nThere are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly `readxl` and `haven`.\n\n\n::: {.cell-output-display}\n|Data.type                |Import                       |Export                        |\n|:------------------------|:----------------------------|:-----------------------------|\n|R objects (.Rdata, .rda) |````load()````               |````save()````                |\n|single R object (.Rds)   |````readRDS()````            |````saveRDS()````             |\n|text-files (.txt)        |````read.table()````         |````write.table()````         |\n|.csv-files (.csv)        |````read.csv()````           |````write.csv()````           |\n|Excel-files (.xlsx)      |````readxl::read_excel()```` |````writexl::write_xlsx()```` |\n|SPSS-files (.sav)        |````haven::read_sav()````    |````haven::write_sav()````    |\n|SAS-files (.sas)         |````haven::read_sas()````    |````haven::write_sas()````    |\n|Stata-files (.stata)     |````haven::read_dta()````    |````haven::write_dta()````    |\n:::\n\n\n## Absolute paths vs. relative paths\n\nYou can head to a specific file by using the full path (**absolute path**): `\"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\"`. This approach has some disadvantages: it will only work on **my** notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use **relative paths** if possible: `\".\\raw_data\\winners.rda\"`. This will always work independently of the device i am working on, as long as i am in the correct **working directory**.\n\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/hafiznij/Documents/GitHub/r_tutorial\"\n```\n:::\n:::\n\n\nLuckily, as long as we work with RStudio projects, we don't have to deal with that, as the working directory is set automatically by the project.\n\nNow take a look at the working directory and the relative path i used for loading the `winners.rda`. Notice something? Correct, both paths combined equal the **absolute path** to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is.\n\n# Exercises\n\n1.  For the rest of the workshop, we will use the data frame `winners` from the package [LondonMarathon](https://github.com/nrennie/LondonMarathon). I have already tweaked it a bit to make it easier to work with, so just download it from [here](https://github.com/nickhaf/r_tutorial/tree/main/raw_data) and load it into R.\n2.  Advanced: Load the `continents.csv` file into R. Did that work as expected? If not, why not? ([Solution](#Solution)) *Hint*: Take a look at the .csv by opening it in a text editor. Look at the documentation of `read.csv()` and take a look at the `sep` argument.\n\n\n# Solution\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution for exercise 1\"}\nwinners <- readRDS(file = \"./raw_data/winners.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Solution for exercise 2\"}\ncontinents <- read.csv(file = \"./raw_data/continents.csv\")\n\nhead(continents)\n \n# Hmm that looks weird. If we take a look at the file by opening it in a text editor, we can see that the values are seperated by `;`. \n# So let's call the help for `read.csv()`:\n\n?read.csv\n\n# The `sep` argument specifies that the seperator needs to be a white space (meaning tabs, spaces ... - look at the details).  \n# So, we can do the following:\n\ncontinents <- read.csv(\n  file = \"./raw_data/continents.csv\",\n  sep = \";\"\n)\n\nhead(continents)\n\n# This looks better! Now we can merge both data sets, so we can actually work with them.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}