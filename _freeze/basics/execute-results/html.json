{
  "hash": "7dfc406169961ec7d8767987e92b9076",
  "result": {
    "markdown": "# Basic operations\nLet's take a quick look at the most important basic operations in R. \n\n## Basic mathematical operations\n\n::: {.cell}\n\n```{.r .cell-code}\n# sum\n1 + 2\n\n# substract\n2 - 4\n\n# multiply\n4 * 4\n\n# divide\n3/2\n```\n:::\n\n\n## Comparisons and Logical operators\nThe boolean variables in R are `TRUE` and `FALSE`. \nComparison operators return either `TRUE` or `FALSE`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 < 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# But:\n2 < 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_structs <- data.frame(\"Operator\" = c(\"<\", \">\", \"==\", \"!=\", \"<=\", \">=\"),\n                          \"Description\" = c(\"less than\", \"greater than\", \"equal to\", \"not equal to\", \"less or equal\", \"greater or equal\")\n)\n\nknitr::kable(dat_structs, \"pipe\",\n             col.names = c(\"Operator\", \"Description\")\n             ) \n```\n\n::: {.cell-output-display}\n|Operator |Description      |\n|:--------|:----------------|\n|<        |less than        |\n|>        |greater than     |\n|==       |equal to         |\n|!=       |not equal to     |\n|<=       |less or equal    |\n|>=       |greater or equal |\n:::\n:::\n\n\nMainly we will use these logical operation to check which elements in a [vector]() satisfy some requirements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build a vector of numbers ranging from 1 to 10\nvec_num <- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num < 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n\n## !\nWe can invert boolean values by using `!`:\n\n::: {.cell}\n\n```{.r .cell-code}\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n!(1 > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Assignment operator\nThe operator `<-` assigns a value to an object: \n\n::: {.cell}\n\n```{.r .cell-code}\n## Assign the result of 1 + 1 to the object 'result':\nresult <- 1 + 1\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result <- !(10 > 1)\n```\n:::\n\n\n## Functions\nEverything that does something in R is a function. \nA function call has the form: `functionname(argument1 = value, argument2 = value, ...)`.\nOne basic example for a function is the function that can calculate the square root: \n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don't rely on the order of the function arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(4, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 4 4 4 4 4\n```\n:::\n:::\n\nwill rep `4` `10` times. \nIf we swap the arguments, the `10` will be repeate `4` times:\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(10, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 10 10 10\n```\n:::\n:::\n\nBut if we specify which value belongs to which function argument, the order doesn't matter:\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(times = 10, x = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 4 4 4 4 4\n```\n:::\n:::\n\n\nHow do we know which arguments a function has?:\n\n## HELP!\nOne of the most important functions in R is the help-function `?`:\n\n::: {.cell}\n\n```{.r .cell-code}\n?rep\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarte den http Server f√ºr die Hilfe fertig\n```\n:::\n:::\n\nwill open the documentation for the function with the description of its usage, details about the arguments ...\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}