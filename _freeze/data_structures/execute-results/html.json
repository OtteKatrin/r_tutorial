{
  "hash": "69fe33a48982efd59ee72468509f466f",
  "result": {
    "markdown": "# Data structures\n\nPlease take a look at the different [data types](data_types.qmd) that exist in R, if you are not familiar with them, before continuing with this chapter.\n\nThere are five main data structures in R which differ on their dimensions (one dimension, two dimensions, n dimensions) and the type of the elements they are containing (same type, different types):[^data_structures-1]\n\n[^data_structures-1]: Table from [Advanced R](http://adv-r.had.co.nz/Data-structures.html).\n\n\n::: {.cell-output-display}\n|   |Homogeneous   |Heterogeneous |\n|:--|:-------------|:-------------|\n|1d |atomic vector |list          |\n|2d |matrix        |data.frame    |\n|nd |array         |              |\n:::\n\n\nLet's take a closer look at each one of them:\n\n## Vector\n\nAtomic vectors (from hereon only called vectors) contain elements of only the same type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_vec <- c(2023, 8, 8)\nnum_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023    8    8\n```\n:::\n\n```{.r .cell-code}\nchar_vec <- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n```\n:::\n\n```{.r .cell-code}\nlog_vec <- c(TRUE, FALSE)\nlog_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE\n```\n:::\n:::\n\n\nThe `c()` stands for combine, or concatenate, and is the basic function for building a vector out of single elements.\n\n## Matrix\n\nA matrix can, similar to a vector, only contain elements of the same type. But, unlike a vector, it has two dimensions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_matrix <- matrix(c(1, 2, 3, 3, 4, 1), nrow = 2)\nnum_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    4\n[2,]    2    3    1\n```\n:::\n\n```{.r .cell-code}\nchar_matrix <- matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)\nchar_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,] \"a\"  \"c\" \n[2,] \"b\"  \"d\" \n```\n:::\n:::\n\n\n## Array\n\n\n::: {.cell}\n\n:::\n\n\n## Data frame\n\nA data frame is, like a matrix, two dimensional, but, unlike a matrix, it can store elements of different types. It is the closest to data tables you might know from excel. One important point: In each column, we can only store data of the same type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npersons <- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extra = c(3.5, 2, 4.5, 4.2)\n                      )\n```\n:::\n\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n### Tibbles\n\nA special type of data frames are the so called `tibbles`. Tibbles are a modern version of data frames and the standard data frame type of the `tidyverse`, as they have some advantageous characteristics. So don't be confused if you run into them, in general they behave like data frames.\n\n## List\n\nA list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npersonality_rating <- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n```\n:::\n:::\n\n\nHere, we define the list `personality_rating`, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type.\n\n# Exercises\n\n1.  Load the `tutoR` package and start the exercises about `data structures` by typing the following code into you console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearnr::run_tutorial(name = \"data_structures\", package = \"tutoR\")\n```\n:::\n",
    "supporting": [
      "data_structures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}