{
  "hash": "769bb0181f54ebc909fe2d0a119d7a3c",
  "result": {
    "markdown": "# The big picture\n\nNow that we have completed our set up, let's dive right into programming with `R`. In this chapter, we will go through a \"mini-project\", which follows a typical workflow when working with data in `R`. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters, we will go into a little bit more depth for each topic. If you want to have more in depth information instead of following the whole workflow first, you can also jump to the according chapter and read the theory. But make sure to come back to this chapter for the final exercise.\n\n## Packages\n\n[Packages](https://nickhaf.github.io/r_tutorial/packages.html) are extensions to the `base R` you get by default. We already installed our first packages in [About this workshop](https://nickhaf.github.io/r_tutorial/setup.html#about-this-workshop). Let's keep doing that and install the following package as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nThe `tidyverse` is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the `tidyverse`.\n\nJust by installing the packages, we can't use them. We also have to load them into our R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tutoR)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nThe top of your `R Script` should look something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\ninstall.packages(\"tidyverse\")\n\nlibrary(tutoR)\nlibrary(tidyverse)\n```\n:::\n\n\n## Load Data\n\n[Data is loaded](\\load_data.qmd) into R so you can work with it. Let's do just that. First, you need to download the file \"winners.rds\" from [this link](https://github.com/nickhaf/r_tutorial/tree/getting_started/raw_data) and save it in your project folder (*Tip: Save it in a new subfolder named \"raw_data\" or somewhat similar.*). The data comes from the [LondonMarathon](https://github.com/nrennie/LondonMarathon) package. Next, take a look at the ending. Different data formats need different functions for loading them into R. The `winners.rds` file has the ending `.rds`. So we use `readRDS` to load it into R. Here you can find a more thourough discussion about [loading different data formats](\\load_data.qmd).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners <- readRDS(file = \"./raw_data/winners.rds\")\n```\n:::\n\n\nThis will load the data into R and assigning it the name `winners` by using the `<-`. You can see the data popping up in your `Environment` pane on the upper right. It is important you use the correct path, because otherwise R will not find your data file. Here the RStudio project we have created earlier comes in handy. It automatically knows our file lies within our project folder, which is why we can use a **relative path**, that starts at the project path and looks into the folder `raw_data` to open the file. Otherwise, we would have to use an **absolute path** (like \"C:/Users/hafiznij/Documents/GitHub/r_tutorial/raw_data/london_marathon.rda\" which will only work on my notebook, and only if my project stays in on this path.\n\n## Take a look\n\nNow that we have our data loaded safely into R, we can get an [overview](\\take_a_look.qmd) with a multitude of commands. One of the most important ones might be `View()`, which will open the data set excel-style in a new window:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(winners)\n```\n:::\n\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(winners)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Category   : chr [1:165] \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num [1:165] 1981 1981 1982 1983 1984 ...\n $ Athlete    : chr [1:165] \"Dick Beardsley (Tie)\" \"Inge Simonsen (Tie)\" \"Hugh Jones\" \"Mike Gratton\" ...\n $ Nationality: chr [1:165] \"United States\" \"Norway\" \"United Kingdom\" \"United Kingdom\" ...\n $ ID         : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n```\n:::\n:::\n\n\nOn the left we can see the columns of this data.frame, named `Category`, `Year`, `Athlete`, `Nationality` and `ID`. On the right we see the first values in each column, for example `1981`, `1981`, `1982` etc ... in the `Year`-column.\n\n## Data wrangling\n\nNow, lets do something with this data. We want to answer the question if people have gotten faster at running marathons over that last 40 years. Sadly, the finishing times are not saved in this data set, but in another one named `times.rda`. So we need a way to combine them both, so we can run our analysis on the data.\n\n**Exercise: Download the second data set called \"times.rda\" and load it into R on your own.**\n\n\n::: {.cell}\n\n:::\n\n\n### Deal with missing values\n\nLet's take a quick look at that one as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(times)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Time   : 'times' num [1:165] 0.0915 0.0915 0.0899 0.0901 0.0902 ...\n  ..- attr(*, \"format\")= chr \"h:m:s\"\n $ Hours  : num [1:165] 2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes: num [1:165] 11 11 9 9 9 8 10 9 10 9 ...\n $ Seconds: num [1:165] 48 48 24 43 57 16 2 50 20 3 ...\n $ ID     : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n```\n:::\n:::\n\n\nThe only column both data sets seem to have in commonn is the `ID` one. This means we have to merge our two data sets on that column, so rows which have the same value in that column will be merged together. However, we have a slight problem: the `ID` column contains missing values (called `NA`). We will not be able to match these rows over both data sets, so we have to remove them. But first, let's take a look at how many those are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(times$ID))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nsum(is.na(winners$ID))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nDon't worry to much about what that code is doing right now, we will take a closer look later on. We seem to have five `NA`s in both data sets. This isn't a whole lot, so we will just remove them, but keep in mind dealing with `NA`s is a broad topic for itself with many different possible approaches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimes <- drop_na(data = times, ID)\nwinners <- drop_na(data = winners, ID)\n```\n:::\n\n\nHere, we use a function from the `tidyr` package (which we installed among others when we installed the `tidyverse`) that removes all rows from the data that contain a `NA` in the `ID` column.\n\n### Merging\n\nNow we can merge:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners_merged <- merge(x = winners, \n                        y = times,\n                        by = \"ID\")\n```\n:::\n\n\nWhat happens here? We take our two data sets, called `winers` and `times` and combine them on the column `ID`. Let's take a look at the finished product:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(winners_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t160 obs. of  9 variables:\n $ ID         : int  1 3 4 5 6 7 8 9 10 11 ...\n $ Category   : chr  \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num  1981 1982 1983 1984 1985 ...\n $ Athlete    : chr  \"Dick Beardsley (Tie)\" \"Hugh Jones\" \"Mike Gratton\" \"Charlie Spedding\" ...\n $ Nationality: chr  \"United States\" \"United Kingdom\" \"United Kingdom\" \"United Kingdom\" ...\n $ Time       : num  0.0915 0.0899 0.0901 0.0902 0.0891 ...\n $ Hours      : num  2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes    : num  11 9 9 9 8 10 9 10 9 10 ...\n $ Seconds    : num  48 24 43 57 16 2 50 20 3 10 ...\n```\n:::\n:::\n\n\nWe have merged the columns of the `times` data set onto the right the `winners` data.\n\n### Subsetting data\nOne very important part of working with data in R is the [subsetting](subsettings.qmd) of data. This means we select specific values from a data set.   \n\nDivide by Category (Wheelchar vs. no wheelchair)\n\n### Regression Time vs. year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwomen <- winners[winners$Category == \"Women\", ]\n\n\nlm_rs <- lm(Minutes_total ~ Year, women)\nsummary(lm_rs)\n\n# 614 min bei Year = 0, für jedes Jahr -0.23 Min weniger:\n# 614 + 2020 * -0.236\n\n\nplot(lm_rs)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners$Minutes_total <- winners$Hours * 60 + winners$Minutes\n```\n:::\n\n\n## Plot the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nwinners %>%\n  filter(Category %in% c(\"Men\", \"Women\")) %>%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\nwinners %>%\n  filter(Category %in% c(\"Wheelchair Men\", \"Wheelchair Women\")) %>%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Für die Übung. \n#install.packages(\"tidytuesdayR\")\nlibrary(tidytuesdayR)\ntuesdata <- tidytuesdayR::tt_load('2022-08-16')\n```\n:::\n\n\n## Conclusion\n\nIn this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in.\n",
    "supporting": [
      "the_big_picture_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}