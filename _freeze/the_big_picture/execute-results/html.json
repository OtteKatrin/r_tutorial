{
  "hash": "9358db1dac73647f9266d9d5ec50d6a1",
  "result": {
    "markdown": "# The big picture\n\nNow that we have completed our set up, let's dive right into programming with `R`. In this chapter, we will go through a \"mini-project\" with very basic data, which follows a possible workflow when working with data in `R`. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters, we will go into a little more depth for each topic. If you want to have more in depth information instead of following the whole workflow first, you can also skip this chapter and jump to the chapters and exercises you are interested in. But make sure to do the final exercise, to test you R proficiency in the end.\n\n## Packages\n\n[Packages](packages.qmd) are extensions to the `base R` you get by default. We already installed our first packages in [About this workshop](setup.qmd#about-this-workshop). Let's keep doing that and install the following package as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nThe `tidyverse` is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the `tidyverse`. However, as i personally find them to be easier to understand in many cases, we will use `tdiyverse` functions a lot in the current chapter, so you can quickly get an overview of what is possible with R.\n\nJust by installing the packages, we can't use them. We also have to load them into our R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## Load Data\n\nData is loaded into R so you can work with it. For this chapter, we are going to use the data set `babynames`, which we can find on the `tidytuesday` site. You can find it on [here](https://github.com/nickhaf/r_tutorial/tree/main/raw_data).We want to look at the most common name in every year and make a nice plot out of it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames <- readRDS(\"./raw_data/babynames.rds\")\n```\n:::\n\n\nThe above code will load the data into R and assigning it the name `babynames` by using the `<-`. You can see the data popping up in your `Environment` pane on the upper right.\n\n## Take a look\n\nNow that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be `View()`, which will open the data set excel-style in a new window:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(babynames)\n```\n:::\n\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(babynames)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t1924665 obs. of  5 variables:\n $ year: num  NA 1880 1880 NA 1880 1880 1880 1880 1880 1880 ...\n $ sex : chr  \"F\" \"F\" \"F\" \"F\" ...\n $ name: chr  \"Mary\" \"Anna\" \"Emma\" \"Elizabeth\" ...\n $ prop: num  0.0724 0.0267 0.0205 0.0199 0.0179 ...\n $ ID  : int  1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n:::\n\n\nOn the left we can see the columns of this data.frame, named `year`, `sex`, `names`, `n` and `prop`. On the right we see the first values in each column, for example `NA`, `1980`, `1980` etc ... in the `year`-column.\n\n## Merging\n\nSadly the data is not complete. The n is missing (ok, i split it up for illustrational purposes). So let's load it quickly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_n <- readRDS(\"./raw_data/babynames_n.rds\")\n```\n:::\n\n\nAnd now [merge](manipulation.qmd#Merging) it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_merged <- merge(babynames, babynames_n)\n\nhead(babynames_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID year sex      name       prop    n\n1  1   NA   F      Mary 0.07238359 7065\n2  2 1880   F      Anna 0.02667896 2604\n3  3 1880   F      Emma 0.02052149 2003\n4  4   NA   F Elizabeth 0.01986579 1939\n5  5 1880   F    Minnie 0.01788843 1746\n6  6 1880   F  Margaret 0.01616720 1578\n```\n:::\n:::\n\n\nHold on! The column `years` seems to include missing values (`NA's`, see the cell on the top left). It is always a good idea to deal with them before doing any analyses, so let's do just that:\n\n## Missings\n\nThere are multiple ways to deal with [missing values](http://localhost:5462/manipulation.html#missing-values). For reasons of simplicity, we will just remove any rows that contain `NA's`. We can achieve that very easily using a function from the `tidyverse` (the package collection we installed at the beginning of this chapter):\n\n::: tidy\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_merged <- drop_na(babynames_merged)\n```\n:::\n\n:::\n\n## Subsetting data\n\nOne very important part of working with data in R is the [subsetting](subsetting.qmd) of data. This means we select specific values from a data set. Let's suppose we want to only look at the female names in this data set:\n\n::: tidy\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_F <- babynames_merged %>%\n  filter(sex == \"F\")\n```\n:::\n\n:::\n\n## Adding a new column\n\nNow, we want to plot the percentages of each name, instead of the propability, because it looks a bit more intuitive. So, let's build a new column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_F$percentage <- babynames_F$prop * 100\n```\n:::\n\n\n::: advanced\n## Some additional summary statistics\n\nNow, the specifics of the next part are not really relevant. However, they can show you how easy it can be to deal with data in R: First, let's group our data according to year:\n\n::: tidy\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_F_grouped <- babynames_F %>%\n  group_by(year)\n```\n:::\n\n:::\n\nAny operations we now perform are performed for every group. In our case, we want to find the name with the maximum `prop` in each group:\n\n::: tidy\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames_F_max <- babynames_F_grouped %>%\n  slice(which.max(percentage))\n\nhead(babynames_F_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n# Groups:   year [6]\n     ID  year sex   name    prop     n percentage\n  <int> <dbl> <chr> <chr>  <dbl> <dbl>      <dbl>\n1     2  1880 F     Anna  0.0267  2604       2.67\n2  2001  1881 F     Mary  0.0700  6919       7.00\n3  3936  1882 F     Mary  0.0704  8148       7.04\n4  6063  1883 F     Mary  0.0667  8012       6.67\n5  8147  1884 F     Mary  0.0670  9217       6.70\n6 10444  1885 F     Mary  0.0643  9128       6.43\n```\n:::\n:::\n\n:::\n\nGreat! We now have a data frame containing one row for every year. In it, we find the name most common in that year. As already mentioned, the specifics of these functions are not really relevant for this workshop.\n:::\n\n## Plot the data\n\nThis section is more additional and not really necessary for the other workshops. However, i think it is a great way to show you the beauty of plotting in R, so here it goes (make sure you worked on the other concepts first).\n\nWe will use the package `ggplot2` (which is also part of the `tidyverse`) for plotting our data. It should be mentioned that `Base R` also has some powerful plotting functions, however, `ggplot2` makes it very easy to build complex and beautiful plots.\n\nA ggplot is constructed from multiple layers, that can be laid over each other using the `+` operator.\n\nWe start with the function `ggplot()`, where we define our data and the x and y aestetics.\n\n::: tidy\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(\n  data = babynames_F_max,\n  aes(\n    x = year,\n    y = percentage)\n  )\n```\n:::\n\n\nWe can also define different colours for different groups. For example, if we want the bars to get filled with a colour corresponding to the name they are representing, we can do that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(\n  data = babynames_F_max,\n  aes(\n    x = year,\n    y = percentage,\n    fill = name\n  )\n)\n```\n:::\n\n\nNow that we have defined our aesthetics, we can add a `geom`-layer. This will make use of the data we have defined in `ggplot()` and plot some bars for us:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_col()\np\n```\n\n::: {.cell-output-display}\n![](the_big_picture_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nLet's give the axes some more informative names and a title to the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  ggtitle(\"Most common female name in the United States of America by year\") +\n  xlab(\"Birthyear\") +\n  ylab(\"Percentage of children given that name relative to total births\")\np\n```\n\n::: {.cell-output-display}\n![](the_big_picture_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nFinally, to style the plot a bit, let's add a predefined theme and a color palette:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  theme_bw() +\n  scale_fill_brewer(palette = \"Set3\")\n```\n\n::: {.cell-output-display}\n![](the_big_picture_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n:::\n\n## Conclusion\n\nIn this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in.\n\nTest link to [basics](./basics/basics.qmd)\n\n\n",
    "supporting": [
      "the_big_picture_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}