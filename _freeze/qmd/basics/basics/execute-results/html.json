{
  "hash": "854162e7d0fe438d349d70a5027e7adf",
  "result": {
    "markdown": "# Basic operations\n\nLet's take a quick look at the most important basic operations in R. You can also use a [cheat sheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf) to keep an overview during the course.\n\n## Basic mathematical operations\n\nWe can use R as a calculator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(1 + 2) * 3^2\n2 - 3/log(8)\n```\n:::\n\n\n## Assignment operator\n\nWe can create objects in R by using the assignment operator `<-`, which assigns a value to an object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Assign the result of 1 + 1 to the object 'result':\nresult <- 1 + 1\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n## Assign the result of the comparison to the object 'log_result':\nlog_result <- !(10 > 1)\nlog_result\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Comparisons and Logical operators\n\nThe boolean variables in R are `TRUE` and `FALSE`. Comparison operators return either `TRUE` or `FALSE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 < 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# But:\n2 < 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nThese are the comparison operators you will typically use:\n\n\n::: {.cell}\n::: {.cell-output-display}\n|Operator |Description      |\n|:--------|:----------------|\n|<        |less than        |\n|>        |greater than     |\n|==       |equal to         |\n|!=       |not equal to     |\n|<=       |less or equal    |\n|>=       |greater or equal |\n:::\n:::\n\n\nMainly we will use these logical operation to check which elements in a [vector](data_structures.qmd#vector) satisfy some requirements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build a vector of numbers ranging from 1 to 10\nvec_num <- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num < 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined.\n\n## !\n\nWe can invert boolean values by using `!`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n!(1 > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n!(1:10 != c(1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n## Functions\n\nEverything that **does** something in R is a function. A function call has the form: `functionname(argument1 = value, argument2 = value, ...)`. One basic example for a function is the function that can calculate the square root:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don't rely on the order of the function arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(4, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 4 4 4 4 4\n```\n:::\n:::\n\n\nwill rep `4` `10` times. If we swap the arguments, the `10` will be repeat `4` times:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(10, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 10 10 10\n```\n:::\n:::\n\n\nBut if we specify which value belongs to which function argument, the order doesn't matter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(times = 10, x = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 4 4 4 4 4\n```\n:::\n:::\n\n\nHow do we know which arguments a function has?:\n\n## HELP!\n\nOne of the most important functions in R is the help-function `?`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?rep\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n\nwill open the documentation for the function with the description of its usage, details about the arguments ... In the next chapter we will take a very quick look at R's data types.\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}