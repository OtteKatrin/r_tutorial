{
  "hash": "6cb57a15dd495869b2c9cccf5f69873a",
  "result": {
    "markdown": "---\ntitle: \"Basic operations: Exercises\"\n---\n\n\n## Exercise 1\n\nWhat does the function `seq` do? \",\n\n-   [ ] Repeats a value multiple times.\n-   [ ] Builds a sequence of values.\n-   [ ] Loads a SQL data base.\n-   [ ] It's part of another package and therefore not loaded in R.\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\n\nUse the help function `?`.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n### Solution\n\n-   [ ] Repeats a value multiple times.\n-   [x] Builds a sequence of values.\n-   [ ] Loads a SQL data base.\n-   [ ] It's part of another package and therefore not loaded in R.\n:::\n\n## Exercise 2\n\nWhy does the following code not work? Correct it so it does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3, 4, 5)\nmean(num_vec)\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\n\nDoes the object `num_vec` actually exist?\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Solution\n\nThe object `num_vec` hasn't been assigned yet. So let's do that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_vec <- c(1, 2, 3, 4, 5)\nmean(num_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n:::\n\n## Exercise 3\n\nBuild the following vector with as little code as possible:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_1 <- c(1, 2, 3, 4, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 2, 2, 2, 2, 2, 2, 2, 2)\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\n\nUse `seq()` and `rep()`. You can also build consecutive sequences using `:`.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_1 <- c(1:5, seq(from = 5, to = 5.5, by = 0.1), rep(2, 8))\n```\n:::\n\n:::\n\n## Exercise 4\n\nFind all of the elements in the vector that are either equal to `1000`, or smaller than `sqrt(11)` and larger than `log(1.001)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_num <- c(sqrt(100)^3, exp(-6), 22.02/3 * sqrt(4^2) * 0.25, -120987/(47621 * 1.3 ^ 4 ))\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\n\nYou need to combine three logical statements. Go at it step by step: first find all elements in `vec_num` that are equal to `1000`, and then add a comparison for the rest of the statement behind an `|` (or).\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_num == 1000 | (sqrt(11) & vec_num > log(1.001))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE FALSE\n```\n:::\n:::\n\n:::\n",
    "supporting": [
      "basics_exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}