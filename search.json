[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "In case you don’t use a notebook where you can install R and RStudio, or you don’t want to, you can use the posit Cloud service. It can be run in you browser, and provides the same functions and interface as if you were working with your own RStudio installation. And it’s free as well (at least 25 hours per month, but that should be more than enough for this workshop and probably for the following week).\n\nGo to posit Cloud.\nClick on GET STARTED.\nCreate an account (it’s free) and login.\nOn the upper right, click on New Project. This will create a new RStudio project, which you can use the same way as described in this tutorial.\n\n\n\n\n\n\n\n\n\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n\nTadaa, we just wrote our first line of code."
  },
  {
    "objectID": "setup.html#rstudio",
    "href": "setup.html#rstudio",
    "title": "Setup",
    "section": "",
    "text": "In case you don’t use a notebook where you can install R and RStudio, or you don’t want to, you can use the posit Cloud service. It can be run in you browser, and provides the same functions and interface as if you were working with your own RStudio installation. And it’s free as well (at least 25 hours per month, but that should be more than enough for this workshop and probably for the following week).\n\nGo to posit Cloud.\nClick on GET STARTED.\nCreate an account (it’s free) and login.\nOn the upper right, click on New Project. This will create a new RStudio project, which you can use the same way as described in this tutorial.\n\n\n\n\n\n\n\n\n\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n\nTadaa, we just wrote our first line of code."
  },
  {
    "objectID": "setup.html#workflow",
    "href": "setup.html#workflow",
    "title": "Setup",
    "section": "Workflow",
    "text": "Workflow\n\nScripts\nWhen only coding in our console we quickly run into the question where to save our code for further evaluation. Therefore, we want to write all our code that is worth saving into a script.\n\n\nRStudio Projects\nOver time, it will become increasingly hard to organize all your files, working directories and workspaces in a reasonable manner. For this, RStudio Projects can be used (highly recommended).\n\n\nExercises\n\nCreate a new folder for this tutorial, where all your files will go.\nCreate a new RStudio project and open it. Got to File - New Project - Existing Directory and select the path of the folder you created in step 1.\nCreate a new R Script by clicking on File - New File - R Script. Save it in you folder.\nTipp: Within your project folder create a folder named R, where all your R Scripts will go. You can do the same for data, plots etc. later on. This will help you to structure your working directory."
  },
  {
    "objectID": "setup.html#about-this-workshop",
    "href": "setup.html#about-this-workshop",
    "title": "Setup",
    "section": "About this workshop",
    "text": "About this workshop\nThis workshop will use a tutorial package (you will learn more about packages later) that can be run from within R and will provide interactive exercises. For now, please install that tutorial package by typing (and evaluating) the following code into your newly created R Script:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\n\nFor each chapter, there will be a short theory part. Most of the exercises can be run interactively with the tutoR package, but some will encourage you to use the RStudio environment, to get more familiar with it.\nFeel free to use any resources at you disposal to solve the exercises. That’s how you would also do it in real live. Just make sure you understand why your solution works (or why it doesn’t)."
  },
  {
    "objectID": "the_big_picture.html",
    "href": "the_big_picture.html",
    "title": "The big picture",
    "section": "",
    "text": "Now that we have completed our set up, let’s dive right into programming with R. In this chapter, we will go through a “mini-project”, which follows a typical workflow when working with data in R. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters, we will go into a little bit more depth for each topic. If you want to have more in depth information instead of following the whole workflow first, you can also skip this chapter and jump to the chapters and exercises you are interested in. But make sure to do the final exercise, to test you R proficiency in the end.\n\n\nPackages are extensions to the base R you get by default. We already installed our first packages in About this workshop. Let’s keep doing that and install the following package as well:\n\ninstall.packages(\"tidyverse\")\n\nThe tidyverse is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the tidyverse.\nJust by installing the packages, we can’t use them. We also have to load them into our R session:\n\nlibrary(tutoR)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe top of your R Script should look something like this:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\ninstall.packages(\"tidyverse\")\n\nlibrary(tutoR)\nlibrary(tidyverse)\n\n\n\n\nData is loaded into R so you can work with it. Let’s do just that. First, you need to download the file “winners.rds” from this link and save it in your project folder (Tip: Save it in a new subfolder named “raw_data” or somewhat similar.). The data comes from the LondonMarathon package. Next, take a look at the ending. Different data formats need different functions for loading them into R. The winners.rds file has the ending .rds. So we use readRDS to load it into R. Here you can find a more thourough discussion about loading different data formats."
  },
  {
    "objectID": "the_big_picture.html#packages",
    "href": "the_big_picture.html#packages",
    "title": "The big picture",
    "section": "",
    "text": "Packages are extensions to the base R you get by default. We already installed our first packages in About this workshop. Let’s keep doing that and install the following package as well:\n\ninstall.packages(\"tidyverse\")\n\nThe tidyverse is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the tidyverse.\nJust by installing the packages, we can’t use them. We also have to load them into our R session:\n\nlibrary(tutoR)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe top of your R Script should look something like this:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\ninstall.packages(\"tidyverse\")\n\nlibrary(tutoR)\nlibrary(tidyverse)"
  },
  {
    "objectID": "the_big_picture.html#load-data",
    "href": "the_big_picture.html#load-data",
    "title": "The big picture",
    "section": "",
    "text": "Data is loaded into R so you can work with it. Let’s do just that. First, you need to download the file “winners.rds” from this link and save it in your project folder (Tip: Save it in a new subfolder named “raw_data” or somewhat similar.). The data comes from the LondonMarathon package. Next, take a look at the ending. Different data formats need different functions for loading them into R. The winners.rds file has the ending .rds. So we use readRDS to load it into R. Here you can find a more thourough discussion about loading different data formats."
  },
  {
    "objectID": "the_big_picture.html#take-a-look",
    "href": "the_big_picture.html#take-a-look",
    "title": "The big picture",
    "section": "Take a look",
    "text": "Take a look\nNow that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be View(), which will open the data set excel-style in a new window:\n\nView(winners)\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\nstr(winners)\n\n'data.frame':   165 obs. of  5 variables:\n $ Category   : chr  \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num  1981 1981 1982 1983 1984 ...\n $ Athlete    : chr  \"Dick Beardsley (Tie)\" \"Inge Simonsen (Tie)\" \"Hugh Jones\" \"Mike Gratton\" ...\n $ Nationality: chr  \"United States\" \"Norway\" \"United Kingdom\" \"United Kingdom\" ...\n $ ID         : int  1 NA 3 4 5 6 7 8 9 10 ...\n\n\nOn the left we can see the columns of this data.frame, named Category, Year, Athlete, Nationality and ID. On the right we see the first values in each column, for example 1981, 1981, 1982 etc … in the Year-column."
  },
  {
    "objectID": "the_big_picture.html#data-wrangling",
    "href": "the_big_picture.html#data-wrangling",
    "title": "The big picture",
    "section": "Data wrangling",
    "text": "Data wrangling\nNow, lets do something with this data. We want to answer the question if people have gotten faster at running marathons over that last 40 years. Sadly, the finishing times are not saved in this data set, but in another one named times.rda. So we need a way to combine them both, so we can run our analysis on the data.\nExercise: Download the second data set called “times.rda” and load it into R on your own.\n\nDeal with missing values\nLet’s take a quick look at that one as well:\n\nstr(times)\n\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Time   : 'times' num [1:165] 0.0915 0.0915 0.0899 0.0901 0.0902 ...\n  ..- attr(*, \"format\")= chr \"h:m:s\"\n $ Hours  : num [1:165] 2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes: num [1:165] 11 11 9 9 9 8 10 9 10 9 ...\n $ Seconds: num [1:165] 48 48 24 43 57 16 2 50 20 3 ...\n $ ID     : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n\n\nThe only column both data sets seem to have in commonn is the ID one. This means we have to merge our two data sets on that column, so rows which have the same value in that column will be merged together. However, we have a slight problem: the ID column contains missing values (called NA). We will not be able to match these rows over both data sets, so we have to remove them. But first, let’s take a look at how many those are:\n\nsum(is.na(times$ID))\n\n[1] 5\n\nsum(is.na(winners$ID))\n\n[1] 5\n\n\nDon’t worry to much about what that code is doing right now, we will take a closer look later on. We seem to have five NAs in both data sets. This isn’t a whole lot, so we will just remove them, but keep in mind dealing with NAs is a broad topic for itself with many different possible approaches.\n\ntimes &lt;- drop_na(data = times, ID)\nwinners &lt;- drop_na(data = winners, ID)\n\nHere, we use a function from the tidyr package (which we installed among others when we installed the tidyverse) that removes all rows from the data that contain a NA in the ID column.\n\n\nMerging\nNow we can merge:\n\nwinners_merged &lt;- merge(x = winners, \n                        y = times,\n                        by = \"ID\")\n\nWhat happens here? We take our two data sets, called winers and times and combine them on the column ID. Let’s take a look at the finished product:\n\nstr(winners_merged)\n\n'data.frame':   160 obs. of  9 variables:\n $ ID         : int  1 3 4 5 6 7 8 9 10 11 ...\n $ Category   : chr  \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num  1981 1982 1983 1984 1985 ...\n $ Athlete    : chr  \"Dick Beardsley (Tie)\" \"Hugh Jones\" \"Mike Gratton\" \"Charlie Spedding\" ...\n $ Nationality: chr  \"United States\" \"United Kingdom\" \"United Kingdom\" \"United Kingdom\" ...\n $ Time       : num  0.0915 0.0899 0.0901 0.0902 0.0891 ...\n $ Hours      : num  2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes    : num  11 9 9 9 8 10 9 10 9 10 ...\n $ Seconds    : num  48 24 43 57 16 2 50 20 3 10 ...\n\n\nWe have merged the columns of the times data set onto the right the winners data.\n\n\nSubsetting data\nOne very important part of working with data in R is the subsetting of data. This means we select specific values from a data set.\nDivide by Category (Wheelchar vs. no wheelchair)\n\n\nRegression Time vs. year\n\nwomen &lt;- winners[winners$Category == \"Women\", ]\n\n\nlm_rs &lt;- lm(Minutes_total ~ Year, women)\nsummary(lm_rs)\n\n# 614 min bei Year = 0, für jedes Jahr -0.23 Min weniger:\n# 614 + 2020 * -0.236\n\n\nplot(lm_rs)\n\n\nwinners$Minutes_total &lt;- winners$Hours * 60 + winners$Minutes"
  },
  {
    "objectID": "the_big_picture.html#plot-the-data",
    "href": "the_big_picture.html#plot-the-data",
    "title": "The big picture",
    "section": "Plot the data",
    "text": "Plot the data\n\nlibrary(ggplot2)\nwinners %&gt;%\n  filter(Category %in% c(\"Men\", \"Women\")) %&gt;%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\nwinners %&gt;%\n  filter(Category %in% c(\"Wheelchair Men\", \"Wheelchair Women\")) %&gt;%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\n# Für die Übung. \n#install.packages(\"tidytuesdayR\")\nlibrary(tidytuesdayR)\ntuesdata &lt;- tidytuesdayR::tt_load('2022-08-16')"
  },
  {
    "objectID": "the_big_picture.html#conclusion",
    "href": "the_big_picture.html#conclusion",
    "title": "The big picture",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in."
  },
  {
    "objectID": "Manipulation.html",
    "href": "Manipulation.html",
    "title": "New columns",
    "section": "",
    "text": "Adding new columns to a data frame is pretty straight forward. We just define the column name, and then assign it some input:\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extro = c(3.5, 2, 4.5, 4.2)\n                      )\n\npersons$big5_neuro &lt;- c(3, 4, 1, 2)\n\nOr, using the tidyverse:\n\n\nlibrary(dplyr)\npersons &lt;- persons %&gt;%\n  mutate(big5_open = c(3, 4, 3, 4))"
  },
  {
    "objectID": "Manipulation.html#merging-data-frames",
    "href": "Manipulation.html#merging-data-frames",
    "title": "New columns",
    "section": "Merging data frames",
    "text": "Merging data frames"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Workshop",
    "section": "",
    "text": "The following tutorial will teach you the basics of R. It is designed to be self paced, so you can work in you own tempo.\n\n\n\nLearn the basics of programming in R as needed for the rest of the Open Research Summer School."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "R Workshop",
    "section": "",
    "text": "The following tutorial will teach you the basics of R. It is designed to be self paced, so you can work in you own tempo.\n\n\n\nLearn the basics of programming in R as needed for the rest of the Open Research Summer School."
  },
  {
    "objectID": "subsetting.html",
    "href": "subsetting.html",
    "title": "Subsetting data",
    "section": "",
    "text": "Please take a look at the different data structures in R if you are not familiar with them, before you start with this chapter.\n\n\nLoad the data set, which lies within the folder raw_data in my working directory:\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\n\nLet’s take a quick look:\n\nhead(winners)\n\n  Category Year              Athlete    Nationality ID\n1      Men 1981 Dick Beardsley (Tie)  United States  1\n2      Men 1981  Inge Simonsen (Tie)         Norway NA\n3      Men 1982           Hugh Jones United Kingdom  3\n4      Men 1983         Mike Gratton United Kingdom  4\n5      Men 1984     Charlie Spedding United Kingdom  5\n6      Men 1985          Steve Jones United Kingdom  6\n\n\nSo, this data frame seems to hold the winners of the london marathon, but their finishing times are missing. They are stored in another data set, but we will deal with that later. For now we want to look at how we can extract data from our data structures, so we can work with it.\n\n\n\nWe will look at two ways to extract rows and columns from data frames.\n\n\nIn Base R, we use square brackets [,]. In front of the , we write the rows we want to extract:\n\n# Extract the first and the fourth row\nwinners[c(1, 4), ]\n\n  Category Year              Athlete    Nationality ID\n1      Men 1981 Dick Beardsley (Tie)  United States  1\n4      Men 1983         Mike Gratton United Kingdom  4\n\n\nBehind it the columns:\n\n# Extract the second and the fourth column:\nwinners[, c(2, 4)]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Extract the columns by name:\nwinners[, c(\"Year\", \"Nationality\")]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Or only the column Year (and turn it into a vector right away):\nwinners$Year\n\n  [1] 1981 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994\n [16] 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n [31] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1981\n [46] 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996\n [61] 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011\n [76] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1983 1984 1985\n [91] 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000\n[106] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015\n[121] 2016 2017 2018 2019 2020 2021 1983 1984 1985 1986 1987 1988 1989 1990 1991\n[136] 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006\n[151] 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021\n\n\nAnd of course we can combine both calls:\n\nwinners[c(1, 4), c(2, 4)]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\nwinners[c(1, 4), c(\"Year\", \"Nationality\")]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\n\nWe can also use Boolean values (every row/column must get a value here, so we extract the first 100 rows by repeating TRUE 100 times, and than add FALSE for the remaining rows:\n\nwinners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n\n          Category    Nationality  ID\n1              Men  United States   1\n2              Men         Norway  NA\n3              Men United Kingdom   3\n4              Men United Kingdom   4\n5              Men United Kingdom   5\n6              Men United Kingdom   6\n7              Men          Japan   7\n8              Men          Japan   8\n9              Men        Denmark   9\n10             Men          Kenya  10\n11             Men United Kingdom  11\n12             Men   Soviet Union  12\n13             Men       Portugal  13\n14             Men United Kingdom  14\n15             Men         Mexico  15\n16             Men         Mexico  16\n17             Men         Mexico  17\n18             Men       Portugal  18\n19             Men          Spain  19\n20             Men        Morocco  20\n21             Men       Portugal  21\n22             Men        Morocco  22\n23             Men  United States  23\n24             Men       Ethiopia  NA\n25             Men          Kenya  25\n26             Men          Kenya  26\n27             Men          Kenya  27\n28             Men          Kenya  28\n29             Men          Kenya  29\n30             Men          Kenya  30\n31             Men       Ethiopia  31\n32             Men          Kenya  32\n33             Men          Kenya  33\n34             Men       Ethiopia  34\n35             Men          Kenya  NA\n36             Men          Kenya  36\n37             Men          Kenya  37\n38             Men          Kenya  38\n39             Men          Kenya  39\n40             Men          Kenya  40\n41             Men       Ethiopia  41\n42             Men       Ethiopia  42\n43             Men          Kenya  43\n44             Men          Kenya  44\n45           Women United Kingdom  45\n46           Women United Kingdom  46\n47           Women         Norway  47\n48           Women         Norway  48\n49           Women         Norway  49\n50           Women         Norway  50\n51           Women         Norway  51\n52           Women         Norway  52\n53           Women United Kingdom  53\n54           Women         Poland  54\n55           Women       Portugal  55\n56           Women        Germany  56\n57           Women        Germany  57\n58           Women        Germany  58\n59           Women         Poland  59\n60           Women United Kingdom  60\n61           Women          Kenya  61\n62           Women        Ireland  62\n63           Women          Kenya  63\n64           Women          Kenya  64\n65           Women       Ethiopia  65\n66           Women United Kingdom  66\n67           Women United Kingdom  67\n68           Women          Kenya  68\n69           Women United Kingdom  69\n70           Women  United States  70\n71           Women          China  71\n72           Women        Germany  72\n73           Women        Germany  73\n74           Women       Ethiopia  74\n75           Women          Kenya  75\n76           Women          Kenya  76\n77           Women          Kenya  77\n78           Women          Kenya  78\n79           Women       Ethiopia  79\n80           Women          Kenya  80\n81           Women          Kenya  81\n82           Women          Kenya  82\n83           Women          Kenya  83\n84           Women          Kenya  84\n85           Women          Kenya  85\n86           Women       Ethiopia  86\n87           Women    Netherlands  87\n88  Wheelchair Men United Kingdom  88\n89  Wheelchair Men        Ireland  89\n90  Wheelchair Men United Kingdom  90\n91  Wheelchair Men        Ireland  91\n92  Wheelchair Men United Kingdom  92\n93  Wheelchair Men         Canada  93\n94  Wheelchair Men United Kingdom  94\n95  Wheelchair Men         Sweden  NA\n96  Wheelchair Men         France  96\n97  Wheelchair Men         Canada  97\n98  Wheelchair Men        Belgium  98\n99  Wheelchair Men United Kingdom  99\n100 Wheelchair Men    Switzerland 100\n\n\nNow the stuff we looked at in logical operators comes in handy! We can filter rows which match some condition. For example, we might want to look at all winners from Kenya:\n\nwinners[winners$Nationality == \"Kenya\", ]\n\n   Category Year                    Athlete Nationality ID\n10      Men 1989          Douglas Wakiihuri       Kenya 10\n25      Men 2004                Evans Rutto       Kenya 25\n26      Men 2005                 Martin Lel       Kenya 26\n27      Men 2006                 Felix Limo       Kenya 27\n28      Men 2007                 Martin Lel       Kenya 28\n29      Men 2008                 Martin Lel       Kenya 29\n30      Men 2009             Samuel Wanjiru       Kenya 30\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya 32\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya 33\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya NA\n36      Men 2015             Eliud Kipchoge       Kenya 36\n37      Men 2016             Eliud Kipchoge       Kenya 37\n38      Men 2017             Daniel Wanjiru       Kenya 38\n39      Men 2018             Eliud Kipchoge       Kenya 39\n40      Men 2019             Eliud Kipchoge       Kenya 40\n43      Men 2022               Amos Kipruto       Kenya 43\n44      Men 2023              Kelvin Kiptum       Kenya 44\n61    Women 1997           Joyce Chepchumba       Kenya 61\n63    Women 1999           Joyce Chepchumba       Kenya 63\n64    Women 2000              Tegla Loroupe       Kenya 64\n68    Women 2004             Margaret Okayo       Kenya 68\n75    Women 2011     Mary Jepkosgei Keitany       Kenya 75\n76    Women 2012     Mary Jepkosgei Keitany       Kenya 76\n77    Women 2013             Priscah Jeptoo       Kenya 77\n78    Women 2014              Edna Kiplagat       Kenya 78\n80    Women 2016             Jemima Sumgong       Kenya 80\n81    Women 2017     Mary Jepkosgei Keitany       Kenya 81\n82    Women 2018           Vivian Cheruiyot       Kenya 82\n83    Women 2019              Brigid Kosgei       Kenya 83\n84    Women 2020              Brigid Kosgei       Kenya 84\n85    Women 2021        Joyciline Jepkosgei       Kenya 85\n\n\nTake a close look at the comparison before the ,:\n\nwinners$Nationality == \"Kenya\"\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n [85]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nwinners$Nationality is a vector, so comparing its values to a specified value yields a logical vector with the respective TRUE and FALSE values. We can insert this logical vector in front of the , to extract all rows corresponding to that condition.\nIf we want to extract multiple nationalities at once, we need the %in% operator:\n\nwinners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\n\n   Category Year                    Athlete Nationality ID\n2       Men 1981        Inge Simonsen (Tie)      Norway NA\n10      Men 1989          Douglas Wakiihuri       Kenya 10\n25      Men 2004                Evans Rutto       Kenya 25\n26      Men 2005                 Martin Lel       Kenya 26\n27      Men 2006                 Felix Limo       Kenya 27\n28      Men 2007                 Martin Lel       Kenya 28\n29      Men 2008                 Martin Lel       Kenya 29\n30      Men 2009             Samuel Wanjiru       Kenya 30\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya 32\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya 33\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya NA\n36      Men 2015             Eliud Kipchoge       Kenya 36\n37      Men 2016             Eliud Kipchoge       Kenya 37\n38      Men 2017             Daniel Wanjiru       Kenya 38\n39      Men 2018             Eliud Kipchoge       Kenya 39\n40      Men 2019             Eliud Kipchoge       Kenya 40\n43      Men 2022               Amos Kipruto       Kenya 43\n44      Men 2023              Kelvin Kiptum       Kenya 44\n47    Women 1983                Grete Waitz      Norway 47\n48    Women 1984         Ingrid Kristiansen      Norway 48\n49    Women 1985         Ingrid Kristiansen      Norway 49\n50    Women 1986                Grete Waitz      Norway 50\n51    Women 1987         Ingrid Kristiansen      Norway 51\n52    Women 1988         Ingrid Kristiansen      Norway 52\n56    Women 1992        Katrin Dörre-Heinig     Germany 56\n57    Women 1993        Katrin Dörre-Heinig     Germany 57\n58    Women 1994        Katrin Dörre-Heinig     Germany 58\n61    Women 1997           Joyce Chepchumba       Kenya 61\n63    Women 1999           Joyce Chepchumba       Kenya 63\n64    Women 2000              Tegla Loroupe       Kenya 64\n68    Women 2004             Margaret Okayo       Kenya 68\n72    Women 2008            Irina Mikitenko     Germany 72\n73    Women 2009            Irina Mikitenko     Germany 73\n75    Women 2011     Mary Jepkosgei Keitany       Kenya 75\n76    Women 2012     Mary Jepkosgei Keitany       Kenya 76\n77    Women 2013             Priscah Jeptoo       Kenya 77\n78    Women 2014              Edna Kiplagat       Kenya 78\n80    Women 2016             Jemima Sumgong       Kenya 80\n81    Women 2017     Mary Jepkosgei Keitany       Kenya 81\n82    Women 2018           Vivian Cheruiyot       Kenya 82\n83    Women 2019              Brigid Kosgei       Kenya 83\n84    Women 2020              Brigid Kosgei       Kenya 84\n85    Women 2021        Joyciline Jepkosgei       Kenya 85\n\n\nBy the way, if we want to save our extracted data frame, we can assign it a new name (otherwise it will only get printed into the console, but you cant work further with it):\n\nwinners_nat &lt;- winners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\nwinners_nat\n\n   Category Year                    Athlete Nationality ID\n2       Men 1981        Inge Simonsen (Tie)      Norway NA\n10      Men 1989          Douglas Wakiihuri       Kenya 10\n25      Men 2004                Evans Rutto       Kenya 25\n26      Men 2005                 Martin Lel       Kenya 26\n27      Men 2006                 Felix Limo       Kenya 27\n28      Men 2007                 Martin Lel       Kenya 28\n29      Men 2008                 Martin Lel       Kenya 29\n30      Men 2009             Samuel Wanjiru       Kenya 30\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya 32\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya 33\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya NA\n36      Men 2015             Eliud Kipchoge       Kenya 36\n37      Men 2016             Eliud Kipchoge       Kenya 37\n38      Men 2017             Daniel Wanjiru       Kenya 38\n39      Men 2018             Eliud Kipchoge       Kenya 39\n40      Men 2019             Eliud Kipchoge       Kenya 40\n43      Men 2022               Amos Kipruto       Kenya 43\n44      Men 2023              Kelvin Kiptum       Kenya 44\n47    Women 1983                Grete Waitz      Norway 47\n48    Women 1984         Ingrid Kristiansen      Norway 48\n49    Women 1985         Ingrid Kristiansen      Norway 49\n50    Women 1986                Grete Waitz      Norway 50\n51    Women 1987         Ingrid Kristiansen      Norway 51\n52    Women 1988         Ingrid Kristiansen      Norway 52\n56    Women 1992        Katrin Dörre-Heinig     Germany 56\n57    Women 1993        Katrin Dörre-Heinig     Germany 57\n58    Women 1994        Katrin Dörre-Heinig     Germany 58\n61    Women 1997           Joyce Chepchumba       Kenya 61\n63    Women 1999           Joyce Chepchumba       Kenya 63\n64    Women 2000              Tegla Loroupe       Kenya 64\n68    Women 2004             Margaret Okayo       Kenya 68\n72    Women 2008            Irina Mikitenko     Germany 72\n73    Women 2009            Irina Mikitenko     Germany 73\n75    Women 2011     Mary Jepkosgei Keitany       Kenya 75\n76    Women 2012     Mary Jepkosgei Keitany       Kenya 76\n77    Women 2013             Priscah Jeptoo       Kenya 77\n78    Women 2014              Edna Kiplagat       Kenya 78\n80    Women 2016             Jemima Sumgong       Kenya 80\n81    Women 2017     Mary Jepkosgei Keitany       Kenya 81\n82    Women 2018           Vivian Cheruiyot       Kenya 82\n83    Women 2019              Brigid Kosgei       Kenya 83\n84    Women 2020              Brigid Kosgei       Kenya 84\n85    Women 2021        Joyciline Jepkosgei       Kenya 85\n\n\nWe can also combine multiple logical vectors using & (“and”) and | (“or”). For example, we might want to look at all Kenyan winners before the year 2000:\n\nwinners[winners$Nationality == \"Kenya\" & winners$Year &lt; 2000, ]\n\n   Category Year           Athlete Nationality ID\n10      Men 1989 Douglas Wakiihuri       Kenya 10\n61    Women 1997  Joyce Chepchumba       Kenya 61\n63    Women 1999  Joyce Chepchumba       Kenya 63\n\n\nOr at all women winners from Australia in the wheelchair category, and the male winners from the United States in the wheelchair category:\n\nwinners[(winners$Category == \"Wheelchair Women\" & winners$Nationality == \"Australia\") | (winners$Category == \"Wheelchair Men\" & winners$Nationality == \"United States\"), ]\n\n            Category Year            Athlete   Nationality  ID\n120   Wheelchair Men 2015        Josh George United States 120\n124   Wheelchair Men 2019   Daniel Romanchuk United States 124\n162 Wheelchair Women 2018 Madison de Rozario     Australia 162\n\n\nIn the long run, always having to define the data frame multiple time in each row can become a bit annoying and clutters the code. Enter, the filter() function:\n\n\n\nThe dplyr package is part of the tidyverse and provides a grammar of data manipulation. We can use filter() to subset rows from a data frame:\n\n\nlibrary(dplyr)\n\nfilter(winners, Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality ID\n1      Men 1989 Douglas Wakiihuri       Kenya 10\n2    Women 1997  Joyce Chepchumba       Kenya 61\n3    Women 1999  Joyce Chepchumba       Kenya 63\n\n\n\nNote how we can just write our conditions without connecting them with & (filter() does that automatically for us). Also, we don’t have to put the column names into \"\", because filter() knows that this are column names of the winners data frame, which makes coding a bit more pleasant.\nFor extracting columns, we need select():\n\n\nselect(winners, Year, Athlete)\n\n    Year                    Athlete\n1   1981       Dick Beardsley (Tie)\n2   1981        Inge Simonsen (Tie)\n3   1982                 Hugh Jones\n4   1983               Mike Gratton\n5   1984           Charlie Spedding\n6   1985                Steve Jones\n7   1986             Toshihiko Seko\n8   1987           Hiromi Taniguchi\n9   1988           Henrik Jørgensen\n10  1989          Douglas Wakiihuri\n11  1990            Allister Hutton\n12  1991            Yakov Tolstikov\n13  1992              António Pinto\n14  1993              Eamonn Martin\n15  1994             Dionicio Cerón\n16  1995             Dionicio Cerón\n17  1996             Dionicio Cerón\n18  1997              António Pinto\n19  1998                 Abel Antón\n20  1999      Abdelkader El Mouaziz\n21  2000              António Pinto\n22  2001      Abdelkader El Mouaziz\n23  2002          Khalid Khannouchi\n24  2003            Gezahegne Abera\n25  2004                Evans Rutto\n26  2005                 Martin Lel\n27  2006                 Felix Limo\n28  2007                 Martin Lel\n29  2008                 Martin Lel\n30  2009             Samuel Wanjiru\n31  2010             Tsegaye Kebede\n32  2011 Emmanuel Kipchirchir Mutai\n33  2012   Wilson Kipsang Kiprotich\n34  2013             Tsegaye Kebede\n35  2014   Wilson Kipsang Kiprotich\n36  2015             Eliud Kipchoge\n37  2016             Eliud Kipchoge\n38  2017             Daniel Wanjiru\n39  2018             Eliud Kipchoge\n40  2019             Eliud Kipchoge\n41  2020          Shura Kitata Tola\n42  2021                Sisay Lemma\n43  2022               Amos Kipruto\n44  2023              Kelvin Kiptum\n45  1981                Joyce Smith\n46  1982                Joyce Smith\n47  1983                Grete Waitz\n48  1984         Ingrid Kristiansen\n49  1985         Ingrid Kristiansen\n50  1986                Grete Waitz\n51  1987         Ingrid Kristiansen\n52  1988         Ingrid Kristiansen\n53  1989            Véronique Marot\n54  1990               Wanda Panfil\n55  1991                  Rosa Mota\n56  1992        Katrin Dörre-Heinig\n57  1993        Katrin Dörre-Heinig\n58  1994        Katrin Dörre-Heinig\n59  1995        Małgorzata Sobańska\n60  1996               Liz McColgan\n61  1997           Joyce Chepchumba\n62  1998        Catherina McKiernan\n63  1999           Joyce Chepchumba\n64  2000              Tegla Loroupe\n65  2001               Derartu Tulu\n66  2002            Paula Radcliffe\n67  2003            Paula Radcliffe\n68  2004             Margaret Okayo\n69  2005            Paula Radcliffe\n70  2006               Deena Kastor\n71  2007               Zhou Chunxiu\n72  2008            Irina Mikitenko\n73  2009            Irina Mikitenko\n74  2010           Aselefech Mergia\n75  2011     Mary Jepkosgei Keitany\n76  2012     Mary Jepkosgei Keitany\n77  2013             Priscah Jeptoo\n78  2014              Edna Kiplagat\n79  2015                Tigist Tufa\n80  2016             Jemima Sumgong\n81  2017     Mary Jepkosgei Keitany\n82  2018           Vivian Cheruiyot\n83  2019              Brigid Kosgei\n84  2020              Brigid Kosgei\n85  2021        Joyciline Jepkosgei\n86  2022         Yalemzerf Yehualaw\n87  2023               Sifan Hassan\n88  1983               Gordon Perry\n89  1984                Kevin Breen\n90  1985               Chris Hallam\n91  1986             Gerry O'Rourke\n92  1987               Chris Hallam\n93  1988                  Ted Vince\n94  1989              David Holding\n95  1990             Håkan Ericsson\n96  1991            Farid Amarouche\n97  1992              Daniel Wesley\n98  1993            George Vandamme\n99  1994              David Holding\n100 1995                 Heinz Frei\n101 1996              David Holding\n102 1997              David Holding\n103 1998                 Heinz Frei\n104 1999                 Heinz Frei\n105 2000             Kevin Papworth\n106 2001            Denis Lemeunier\n107 2002                 David Weir\n108 2003               Joël Jeannot\n109 2004               Saúl Mendoza\n110 2005               Saúl Mendoza\n111 2006                 David Weir\n112 2007                 David Weir\n113 2008                 David Weir\n114 2009              Kurt Fearnley\n115 2010               Josh Cassidy\n116 2011                 David Weir\n117 2012                 David Weir\n118 2013              Kurt Fearnley\n119 2014                 Marcel Hug\n120 2015                Josh George\n121 2016                 Marcel Hug\n122 2017                 David Weir\n123 2018                 David Weir\n124 2019           Daniel Romanchuk\n125 2020              Brent Lakatos\n126 2021                 Marcel Hug\n127 1983               Denise Smith\n128 1984                Kay McShane\n129 1985                Kay McShane\n130 1986                Kay McShane\n131 1987             Karen Davidson\n132 1988             Karen Davidson\n133 1989            Josie Cichockyj\n134 1990              Connie Hansen\n135 1991              Connie Hansen\n136 1992        Tanni Grey-Thompson\n137 1993                  Rose Hill\n138 1994        Tanni Grey-Thompson\n139 1995                  Rose Hill\n140 1996        Tanni Grey-Thompson\n141 1997         Monica Wetterström\n142 1998        Tanni Grey-Thompson\n143 1999         Monica Wetterström\n144 2000               Sarah Piercy\n145 2001        Tanni Grey-Thompson\n146 2002        Tanni Grey-Thompson\n147 2003       Francesca Porcellato\n148 2004       Francesca Porcellato\n149 2005       Francesca Porcellato\n150 2006       Francesca Porcellato\n151 2007               Shelly Woods\n152 2008                Sandra Graf\n153 2009             Amanda McGrory\n154 2010            Wakako Tsuchida\n155 2011             Amanda McGrory\n156 2012               Shelly Woods\n157 2013           Tatyana McFadden\n158 2014           Tatyana McFadden\n159 2015           Tatyana McFadden\n160 2016           Tatyana McFadden\n161 2017              Manuela Schär\n162 2018         Madison de Rozario\n163 2019              Manuela Schär\n164 2020            Nikita den Boer\n165 2021              Manuela Schär\n\n\n\n\n\nHold on! Normally, we wouldn’t write tidyverse code like that. Instead, we would use the pipe operator %&gt;% (than do), which makes it easy to connect multiple function calls:\n\n\nwinners %&gt;%\n  filter(Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality ID\n1      Men 1989 Douglas Wakiihuri       Kenya 10\n2    Women 1997  Joyce Chepchumba       Kenya 61\n3    Women 1999  Joyce Chepchumba       Kenya 63\n\n\n\nHere, we first input the data frame we want to manipulate. Than we filter, as specified by the pipe operator. Like this, we can easily connect multiple function calls instead of nesting them within multiple brackets, which increases the readability:\n\nwinners[winners$Year &gt; 2000 & winners$Category == \"Women\", c(\"Category\", \"Year\")]\n\n   Category Year\n65    Women 2001\n66    Women 2002\n67    Women 2003\n68    Women 2004\n69    Women 2005\n70    Women 2006\n71    Women 2007\n72    Women 2008\n73    Women 2009\n74    Women 2010\n75    Women 2011\n76    Women 2012\n77    Women 2013\n78    Women 2014\n79    Women 2015\n80    Women 2016\n81    Women 2017\n82    Women 2018\n83    Women 2019\n84    Women 2020\n85    Women 2021\n86    Women 2022\n87    Women 2023\n\n\nbecomes:\n\n\nwinners %&gt;%\n  filter(Year &gt; 2000, Category == \"Women\") %&gt;%\n  select(Category, Year)\n\n   Category Year\n1     Women 2001\n2     Women 2002\n3     Women 2003\n4     Women 2004\n5     Women 2005\n6     Women 2006\n7     Women 2007\n8     Women 2008\n9     Women 2009\n10    Women 2010\n11    Women 2011\n12    Women 2012\n13    Women 2013\n14    Women 2014\n15    Women 2015\n16    Women 2016\n17    Women 2017\n18    Women 2018\n19    Women 2019\n20    Women 2020\n21    Women 2021\n22    Women 2022\n23    Women 2023\n\n\n\nMuch nicer to read, right?\nSome notes on this syntax: If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets. The pipe operator will give the result of the last function as input into the next function. If we want to clearly state which of the function arguments should receive the input, we can write a ., which can be read as output of the previous function call.\n\n\n\n\n\nFinally, let’s take a quick look at how to extract elements from a vector. It’s pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets:\n\nvec_athlete &lt;- winners$Athlete # remember: `$` returns a vector\nvec_athlete[2]\n\n[1] \"Inge Simonsen (Tie)\"\n\n\nOf course we can also do that for multiple elements:\n\nvec_athlete[c(2,3,4)]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n## Or, less to write:\nvec_athlete[2:4]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n\nAnother way would be to provide a logical vector, which defines for each position, if we want to extract the element or not (like we already did for data frames):\n\nvec_athlete[c(rep(TRUE, 100), rep(FALSE, 65))]\n\n  [1] \"Dick Beardsley (Tie)\"       \"Inge Simonsen (Tie)\"       \n  [3] \"Hugh Jones\"                 \"Mike Gratton\"              \n  [5] \"Charlie Spedding\"           \"Steve Jones\"               \n  [7] \"Toshihiko Seko\"             \"Hiromi Taniguchi\"          \n  [9] \"Henrik Jørgensen\"           \"Douglas Wakiihuri\"         \n [11] \"Allister Hutton\"            \"Yakov Tolstikov\"           \n [13] \"António Pinto\"              \"Eamonn Martin\"             \n [15] \"Dionicio Cerón\"             \"Dionicio Cerón\"            \n [17] \"Dionicio Cerón\"             \"António Pinto\"             \n [19] \"Abel Antón\"                 \"Abdelkader El Mouaziz\"     \n [21] \"António Pinto\"              \"Abdelkader El Mouaziz\"     \n [23] \"Khalid Khannouchi\"          \"Gezahegne Abera\"           \n [25] \"Evans Rutto\"                \"Martin Lel\"                \n [27] \"Felix Limo\"                 \"Martin Lel\"                \n [29] \"Martin Lel\"                 \"Samuel Wanjiru\"            \n [31] \"Tsegaye Kebede\"             \"Emmanuel Kipchirchir Mutai\"\n [33] \"Wilson Kipsang Kiprotich\"   \"Tsegaye Kebede\"            \n [35] \"Wilson Kipsang Kiprotich\"   \"Eliud Kipchoge\"            \n [37] \"Eliud Kipchoge\"             \"Daniel Wanjiru\"            \n [39] \"Eliud Kipchoge\"             \"Eliud Kipchoge\"            \n [41] \"Shura Kitata Tola\"          \"Sisay Lemma\"               \n [43] \"Amos Kipruto\"               \"Kelvin Kiptum\"             \n [45] \"Joyce Smith\"                \"Joyce Smith\"               \n [47] \"Grete Waitz\"                \"Ingrid Kristiansen\"        \n [49] \"Ingrid Kristiansen\"         \"Grete Waitz\"               \n [51] \"Ingrid Kristiansen\"         \"Ingrid Kristiansen\"        \n [53] \"Véronique Marot\"            \"Wanda Panfil\"              \n [55] \"Rosa Mota\"                  \"Katrin Dörre-Heinig\"       \n [57] \"Katrin Dörre-Heinig\"        \"Katrin Dörre-Heinig\"       \n [59] \"Małgorzata Sobańska\"        \"Liz McColgan\"              \n [61] \"Joyce Chepchumba\"           \"Catherina McKiernan\"       \n [63] \"Joyce Chepchumba\"           \"Tegla Loroupe\"             \n [65] \"Derartu Tulu\"               \"Paula Radcliffe\"           \n [67] \"Paula Radcliffe\"            \"Margaret Okayo\"            \n [69] \"Paula Radcliffe\"            \"Deena Kastor\"              \n [71] \"Zhou Chunxiu\"               \"Irina Mikitenko\"           \n [73] \"Irina Mikitenko\"            \"Aselefech Mergia\"          \n [75] \"Mary Jepkosgei Keitany\"     \"Mary Jepkosgei Keitany\"    \n [77] \"Priscah Jeptoo\"             \"Edna Kiplagat\"             \n [79] \"Tigist Tufa\"                \"Jemima Sumgong\"            \n [81] \"Mary Jepkosgei Keitany\"     \"Vivian Cheruiyot\"          \n [83] \"Brigid Kosgei\"              \"Brigid Kosgei\"             \n [85] \"Joyciline Jepkosgei\"        \"Yalemzerf Yehualaw\"        \n [87] \"Sifan Hassan\"               \"Gordon Perry\"              \n [89] \"Kevin Breen\"                \"Chris Hallam\"              \n [91] \"Gerry O'Rourke\"             \"Chris Hallam\"              \n [93] \"Ted Vince\"                  \"David Holding\"             \n [95] \"Håkan Ericsson\"             \"Farid Amarouche\"           \n [97] \"Daniel Wesley\"              \"George Vandamme\"           \n [99] \"David Holding\"              \"Heinz Frei\"                \n\n\n\n\n\n\nLoad the tutoR package and start the exercises about subsetting by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"subsetting\", package = \"tutoR\")"
  },
  {
    "objectID": "subsetting.html#data-set",
    "href": "subsetting.html#data-set",
    "title": "Subsetting data",
    "section": "",
    "text": "Load the data set, which lies within the folder raw_data in my working directory:\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\n\nLet’s take a quick look:\n\nhead(winners)\n\n  Category Year              Athlete    Nationality ID\n1      Men 1981 Dick Beardsley (Tie)  United States  1\n2      Men 1981  Inge Simonsen (Tie)         Norway NA\n3      Men 1982           Hugh Jones United Kingdom  3\n4      Men 1983         Mike Gratton United Kingdom  4\n5      Men 1984     Charlie Spedding United Kingdom  5\n6      Men 1985          Steve Jones United Kingdom  6\n\n\nSo, this data frame seems to hold the winners of the london marathon, but their finishing times are missing. They are stored in another data set, but we will deal with that later. For now we want to look at how we can extract data from our data structures, so we can work with it."
  },
  {
    "objectID": "subsetting.html#data-frames",
    "href": "subsetting.html#data-frames",
    "title": "Subsetting data",
    "section": "",
    "text": "We will look at two ways to extract rows and columns from data frames.\n\n\nIn Base R, we use square brackets [,]. In front of the , we write the rows we want to extract:\n\n# Extract the first and the fourth row\nwinners[c(1, 4), ]\n\n  Category Year              Athlete    Nationality ID\n1      Men 1981 Dick Beardsley (Tie)  United States  1\n4      Men 1983         Mike Gratton United Kingdom  4\n\n\nBehind it the columns:\n\n# Extract the second and the fourth column:\nwinners[, c(2, 4)]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Extract the columns by name:\nwinners[, c(\"Year\", \"Nationality\")]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Or only the column Year (and turn it into a vector right away):\nwinners$Year\n\n  [1] 1981 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994\n [16] 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n [31] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1981\n [46] 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996\n [61] 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011\n [76] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1983 1984 1985\n [91] 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000\n[106] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015\n[121] 2016 2017 2018 2019 2020 2021 1983 1984 1985 1986 1987 1988 1989 1990 1991\n[136] 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006\n[151] 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021\n\n\nAnd of course we can combine both calls:\n\nwinners[c(1, 4), c(2, 4)]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\nwinners[c(1, 4), c(\"Year\", \"Nationality\")]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\n\nWe can also use Boolean values (every row/column must get a value here, so we extract the first 100 rows by repeating TRUE 100 times, and than add FALSE for the remaining rows:\n\nwinners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n\n          Category    Nationality  ID\n1              Men  United States   1\n2              Men         Norway  NA\n3              Men United Kingdom   3\n4              Men United Kingdom   4\n5              Men United Kingdom   5\n6              Men United Kingdom   6\n7              Men          Japan   7\n8              Men          Japan   8\n9              Men        Denmark   9\n10             Men          Kenya  10\n11             Men United Kingdom  11\n12             Men   Soviet Union  12\n13             Men       Portugal  13\n14             Men United Kingdom  14\n15             Men         Mexico  15\n16             Men         Mexico  16\n17             Men         Mexico  17\n18             Men       Portugal  18\n19             Men          Spain  19\n20             Men        Morocco  20\n21             Men       Portugal  21\n22             Men        Morocco  22\n23             Men  United States  23\n24             Men       Ethiopia  NA\n25             Men          Kenya  25\n26             Men          Kenya  26\n27             Men          Kenya  27\n28             Men          Kenya  28\n29             Men          Kenya  29\n30             Men          Kenya  30\n31             Men       Ethiopia  31\n32             Men          Kenya  32\n33             Men          Kenya  33\n34             Men       Ethiopia  34\n35             Men          Kenya  NA\n36             Men          Kenya  36\n37             Men          Kenya  37\n38             Men          Kenya  38\n39             Men          Kenya  39\n40             Men          Kenya  40\n41             Men       Ethiopia  41\n42             Men       Ethiopia  42\n43             Men          Kenya  43\n44             Men          Kenya  44\n45           Women United Kingdom  45\n46           Women United Kingdom  46\n47           Women         Norway  47\n48           Women         Norway  48\n49           Women         Norway  49\n50           Women         Norway  50\n51           Women         Norway  51\n52           Women         Norway  52\n53           Women United Kingdom  53\n54           Women         Poland  54\n55           Women       Portugal  55\n56           Women        Germany  56\n57           Women        Germany  57\n58           Women        Germany  58\n59           Women         Poland  59\n60           Women United Kingdom  60\n61           Women          Kenya  61\n62           Women        Ireland  62\n63           Women          Kenya  63\n64           Women          Kenya  64\n65           Women       Ethiopia  65\n66           Women United Kingdom  66\n67           Women United Kingdom  67\n68           Women          Kenya  68\n69           Women United Kingdom  69\n70           Women  United States  70\n71           Women          China  71\n72           Women        Germany  72\n73           Women        Germany  73\n74           Women       Ethiopia  74\n75           Women          Kenya  75\n76           Women          Kenya  76\n77           Women          Kenya  77\n78           Women          Kenya  78\n79           Women       Ethiopia  79\n80           Women          Kenya  80\n81           Women          Kenya  81\n82           Women          Kenya  82\n83           Women          Kenya  83\n84           Women          Kenya  84\n85           Women          Kenya  85\n86           Women       Ethiopia  86\n87           Women    Netherlands  87\n88  Wheelchair Men United Kingdom  88\n89  Wheelchair Men        Ireland  89\n90  Wheelchair Men United Kingdom  90\n91  Wheelchair Men        Ireland  91\n92  Wheelchair Men United Kingdom  92\n93  Wheelchair Men         Canada  93\n94  Wheelchair Men United Kingdom  94\n95  Wheelchair Men         Sweden  NA\n96  Wheelchair Men         France  96\n97  Wheelchair Men         Canada  97\n98  Wheelchair Men        Belgium  98\n99  Wheelchair Men United Kingdom  99\n100 Wheelchair Men    Switzerland 100\n\n\nNow the stuff we looked at in logical operators comes in handy! We can filter rows which match some condition. For example, we might want to look at all winners from Kenya:\n\nwinners[winners$Nationality == \"Kenya\", ]\n\n   Category Year                    Athlete Nationality ID\n10      Men 1989          Douglas Wakiihuri       Kenya 10\n25      Men 2004                Evans Rutto       Kenya 25\n26      Men 2005                 Martin Lel       Kenya 26\n27      Men 2006                 Felix Limo       Kenya 27\n28      Men 2007                 Martin Lel       Kenya 28\n29      Men 2008                 Martin Lel       Kenya 29\n30      Men 2009             Samuel Wanjiru       Kenya 30\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya 32\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya 33\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya NA\n36      Men 2015             Eliud Kipchoge       Kenya 36\n37      Men 2016             Eliud Kipchoge       Kenya 37\n38      Men 2017             Daniel Wanjiru       Kenya 38\n39      Men 2018             Eliud Kipchoge       Kenya 39\n40      Men 2019             Eliud Kipchoge       Kenya 40\n43      Men 2022               Amos Kipruto       Kenya 43\n44      Men 2023              Kelvin Kiptum       Kenya 44\n61    Women 1997           Joyce Chepchumba       Kenya 61\n63    Women 1999           Joyce Chepchumba       Kenya 63\n64    Women 2000              Tegla Loroupe       Kenya 64\n68    Women 2004             Margaret Okayo       Kenya 68\n75    Women 2011     Mary Jepkosgei Keitany       Kenya 75\n76    Women 2012     Mary Jepkosgei Keitany       Kenya 76\n77    Women 2013             Priscah Jeptoo       Kenya 77\n78    Women 2014              Edna Kiplagat       Kenya 78\n80    Women 2016             Jemima Sumgong       Kenya 80\n81    Women 2017     Mary Jepkosgei Keitany       Kenya 81\n82    Women 2018           Vivian Cheruiyot       Kenya 82\n83    Women 2019              Brigid Kosgei       Kenya 83\n84    Women 2020              Brigid Kosgei       Kenya 84\n85    Women 2021        Joyciline Jepkosgei       Kenya 85\n\n\nTake a close look at the comparison before the ,:\n\nwinners$Nationality == \"Kenya\"\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n [85]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nwinners$Nationality is a vector, so comparing its values to a specified value yields a logical vector with the respective TRUE and FALSE values. We can insert this logical vector in front of the , to extract all rows corresponding to that condition.\nIf we want to extract multiple nationalities at once, we need the %in% operator:\n\nwinners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\n\n   Category Year                    Athlete Nationality ID\n2       Men 1981        Inge Simonsen (Tie)      Norway NA\n10      Men 1989          Douglas Wakiihuri       Kenya 10\n25      Men 2004                Evans Rutto       Kenya 25\n26      Men 2005                 Martin Lel       Kenya 26\n27      Men 2006                 Felix Limo       Kenya 27\n28      Men 2007                 Martin Lel       Kenya 28\n29      Men 2008                 Martin Lel       Kenya 29\n30      Men 2009             Samuel Wanjiru       Kenya 30\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya 32\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya 33\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya NA\n36      Men 2015             Eliud Kipchoge       Kenya 36\n37      Men 2016             Eliud Kipchoge       Kenya 37\n38      Men 2017             Daniel Wanjiru       Kenya 38\n39      Men 2018             Eliud Kipchoge       Kenya 39\n40      Men 2019             Eliud Kipchoge       Kenya 40\n43      Men 2022               Amos Kipruto       Kenya 43\n44      Men 2023              Kelvin Kiptum       Kenya 44\n47    Women 1983                Grete Waitz      Norway 47\n48    Women 1984         Ingrid Kristiansen      Norway 48\n49    Women 1985         Ingrid Kristiansen      Norway 49\n50    Women 1986                Grete Waitz      Norway 50\n51    Women 1987         Ingrid Kristiansen      Norway 51\n52    Women 1988         Ingrid Kristiansen      Norway 52\n56    Women 1992        Katrin Dörre-Heinig     Germany 56\n57    Women 1993        Katrin Dörre-Heinig     Germany 57\n58    Women 1994        Katrin Dörre-Heinig     Germany 58\n61    Women 1997           Joyce Chepchumba       Kenya 61\n63    Women 1999           Joyce Chepchumba       Kenya 63\n64    Women 2000              Tegla Loroupe       Kenya 64\n68    Women 2004             Margaret Okayo       Kenya 68\n72    Women 2008            Irina Mikitenko     Germany 72\n73    Women 2009            Irina Mikitenko     Germany 73\n75    Women 2011     Mary Jepkosgei Keitany       Kenya 75\n76    Women 2012     Mary Jepkosgei Keitany       Kenya 76\n77    Women 2013             Priscah Jeptoo       Kenya 77\n78    Women 2014              Edna Kiplagat       Kenya 78\n80    Women 2016             Jemima Sumgong       Kenya 80\n81    Women 2017     Mary Jepkosgei Keitany       Kenya 81\n82    Women 2018           Vivian Cheruiyot       Kenya 82\n83    Women 2019              Brigid Kosgei       Kenya 83\n84    Women 2020              Brigid Kosgei       Kenya 84\n85    Women 2021        Joyciline Jepkosgei       Kenya 85\n\n\nBy the way, if we want to save our extracted data frame, we can assign it a new name (otherwise it will only get printed into the console, but you cant work further with it):\n\nwinners_nat &lt;- winners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\nwinners_nat\n\n   Category Year                    Athlete Nationality ID\n2       Men 1981        Inge Simonsen (Tie)      Norway NA\n10      Men 1989          Douglas Wakiihuri       Kenya 10\n25      Men 2004                Evans Rutto       Kenya 25\n26      Men 2005                 Martin Lel       Kenya 26\n27      Men 2006                 Felix Limo       Kenya 27\n28      Men 2007                 Martin Lel       Kenya 28\n29      Men 2008                 Martin Lel       Kenya 29\n30      Men 2009             Samuel Wanjiru       Kenya 30\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya 32\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya 33\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya NA\n36      Men 2015             Eliud Kipchoge       Kenya 36\n37      Men 2016             Eliud Kipchoge       Kenya 37\n38      Men 2017             Daniel Wanjiru       Kenya 38\n39      Men 2018             Eliud Kipchoge       Kenya 39\n40      Men 2019             Eliud Kipchoge       Kenya 40\n43      Men 2022               Amos Kipruto       Kenya 43\n44      Men 2023              Kelvin Kiptum       Kenya 44\n47    Women 1983                Grete Waitz      Norway 47\n48    Women 1984         Ingrid Kristiansen      Norway 48\n49    Women 1985         Ingrid Kristiansen      Norway 49\n50    Women 1986                Grete Waitz      Norway 50\n51    Women 1987         Ingrid Kristiansen      Norway 51\n52    Women 1988         Ingrid Kristiansen      Norway 52\n56    Women 1992        Katrin Dörre-Heinig     Germany 56\n57    Women 1993        Katrin Dörre-Heinig     Germany 57\n58    Women 1994        Katrin Dörre-Heinig     Germany 58\n61    Women 1997           Joyce Chepchumba       Kenya 61\n63    Women 1999           Joyce Chepchumba       Kenya 63\n64    Women 2000              Tegla Loroupe       Kenya 64\n68    Women 2004             Margaret Okayo       Kenya 68\n72    Women 2008            Irina Mikitenko     Germany 72\n73    Women 2009            Irina Mikitenko     Germany 73\n75    Women 2011     Mary Jepkosgei Keitany       Kenya 75\n76    Women 2012     Mary Jepkosgei Keitany       Kenya 76\n77    Women 2013             Priscah Jeptoo       Kenya 77\n78    Women 2014              Edna Kiplagat       Kenya 78\n80    Women 2016             Jemima Sumgong       Kenya 80\n81    Women 2017     Mary Jepkosgei Keitany       Kenya 81\n82    Women 2018           Vivian Cheruiyot       Kenya 82\n83    Women 2019              Brigid Kosgei       Kenya 83\n84    Women 2020              Brigid Kosgei       Kenya 84\n85    Women 2021        Joyciline Jepkosgei       Kenya 85\n\n\nWe can also combine multiple logical vectors using & (“and”) and | (“or”). For example, we might want to look at all Kenyan winners before the year 2000:\n\nwinners[winners$Nationality == \"Kenya\" & winners$Year &lt; 2000, ]\n\n   Category Year           Athlete Nationality ID\n10      Men 1989 Douglas Wakiihuri       Kenya 10\n61    Women 1997  Joyce Chepchumba       Kenya 61\n63    Women 1999  Joyce Chepchumba       Kenya 63\n\n\nOr at all women winners from Australia in the wheelchair category, and the male winners from the United States in the wheelchair category:\n\nwinners[(winners$Category == \"Wheelchair Women\" & winners$Nationality == \"Australia\") | (winners$Category == \"Wheelchair Men\" & winners$Nationality == \"United States\"), ]\n\n            Category Year            Athlete   Nationality  ID\n120   Wheelchair Men 2015        Josh George United States 120\n124   Wheelchair Men 2019   Daniel Romanchuk United States 124\n162 Wheelchair Women 2018 Madison de Rozario     Australia 162\n\n\nIn the long run, always having to define the data frame multiple time in each row can become a bit annoying and clutters the code. Enter, the filter() function:\n\n\n\nThe dplyr package is part of the tidyverse and provides a grammar of data manipulation. We can use filter() to subset rows from a data frame:\n\n\nlibrary(dplyr)\n\nfilter(winners, Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality ID\n1      Men 1989 Douglas Wakiihuri       Kenya 10\n2    Women 1997  Joyce Chepchumba       Kenya 61\n3    Women 1999  Joyce Chepchumba       Kenya 63\n\n\n\nNote how we can just write our conditions without connecting them with & (filter() does that automatically for us). Also, we don’t have to put the column names into \"\", because filter() knows that this are column names of the winners data frame, which makes coding a bit more pleasant.\nFor extracting columns, we need select():\n\n\nselect(winners, Year, Athlete)\n\n    Year                    Athlete\n1   1981       Dick Beardsley (Tie)\n2   1981        Inge Simonsen (Tie)\n3   1982                 Hugh Jones\n4   1983               Mike Gratton\n5   1984           Charlie Spedding\n6   1985                Steve Jones\n7   1986             Toshihiko Seko\n8   1987           Hiromi Taniguchi\n9   1988           Henrik Jørgensen\n10  1989          Douglas Wakiihuri\n11  1990            Allister Hutton\n12  1991            Yakov Tolstikov\n13  1992              António Pinto\n14  1993              Eamonn Martin\n15  1994             Dionicio Cerón\n16  1995             Dionicio Cerón\n17  1996             Dionicio Cerón\n18  1997              António Pinto\n19  1998                 Abel Antón\n20  1999      Abdelkader El Mouaziz\n21  2000              António Pinto\n22  2001      Abdelkader El Mouaziz\n23  2002          Khalid Khannouchi\n24  2003            Gezahegne Abera\n25  2004                Evans Rutto\n26  2005                 Martin Lel\n27  2006                 Felix Limo\n28  2007                 Martin Lel\n29  2008                 Martin Lel\n30  2009             Samuel Wanjiru\n31  2010             Tsegaye Kebede\n32  2011 Emmanuel Kipchirchir Mutai\n33  2012   Wilson Kipsang Kiprotich\n34  2013             Tsegaye Kebede\n35  2014   Wilson Kipsang Kiprotich\n36  2015             Eliud Kipchoge\n37  2016             Eliud Kipchoge\n38  2017             Daniel Wanjiru\n39  2018             Eliud Kipchoge\n40  2019             Eliud Kipchoge\n41  2020          Shura Kitata Tola\n42  2021                Sisay Lemma\n43  2022               Amos Kipruto\n44  2023              Kelvin Kiptum\n45  1981                Joyce Smith\n46  1982                Joyce Smith\n47  1983                Grete Waitz\n48  1984         Ingrid Kristiansen\n49  1985         Ingrid Kristiansen\n50  1986                Grete Waitz\n51  1987         Ingrid Kristiansen\n52  1988         Ingrid Kristiansen\n53  1989            Véronique Marot\n54  1990               Wanda Panfil\n55  1991                  Rosa Mota\n56  1992        Katrin Dörre-Heinig\n57  1993        Katrin Dörre-Heinig\n58  1994        Katrin Dörre-Heinig\n59  1995        Małgorzata Sobańska\n60  1996               Liz McColgan\n61  1997           Joyce Chepchumba\n62  1998        Catherina McKiernan\n63  1999           Joyce Chepchumba\n64  2000              Tegla Loroupe\n65  2001               Derartu Tulu\n66  2002            Paula Radcliffe\n67  2003            Paula Radcliffe\n68  2004             Margaret Okayo\n69  2005            Paula Radcliffe\n70  2006               Deena Kastor\n71  2007               Zhou Chunxiu\n72  2008            Irina Mikitenko\n73  2009            Irina Mikitenko\n74  2010           Aselefech Mergia\n75  2011     Mary Jepkosgei Keitany\n76  2012     Mary Jepkosgei Keitany\n77  2013             Priscah Jeptoo\n78  2014              Edna Kiplagat\n79  2015                Tigist Tufa\n80  2016             Jemima Sumgong\n81  2017     Mary Jepkosgei Keitany\n82  2018           Vivian Cheruiyot\n83  2019              Brigid Kosgei\n84  2020              Brigid Kosgei\n85  2021        Joyciline Jepkosgei\n86  2022         Yalemzerf Yehualaw\n87  2023               Sifan Hassan\n88  1983               Gordon Perry\n89  1984                Kevin Breen\n90  1985               Chris Hallam\n91  1986             Gerry O'Rourke\n92  1987               Chris Hallam\n93  1988                  Ted Vince\n94  1989              David Holding\n95  1990             Håkan Ericsson\n96  1991            Farid Amarouche\n97  1992              Daniel Wesley\n98  1993            George Vandamme\n99  1994              David Holding\n100 1995                 Heinz Frei\n101 1996              David Holding\n102 1997              David Holding\n103 1998                 Heinz Frei\n104 1999                 Heinz Frei\n105 2000             Kevin Papworth\n106 2001            Denis Lemeunier\n107 2002                 David Weir\n108 2003               Joël Jeannot\n109 2004               Saúl Mendoza\n110 2005               Saúl Mendoza\n111 2006                 David Weir\n112 2007                 David Weir\n113 2008                 David Weir\n114 2009              Kurt Fearnley\n115 2010               Josh Cassidy\n116 2011                 David Weir\n117 2012                 David Weir\n118 2013              Kurt Fearnley\n119 2014                 Marcel Hug\n120 2015                Josh George\n121 2016                 Marcel Hug\n122 2017                 David Weir\n123 2018                 David Weir\n124 2019           Daniel Romanchuk\n125 2020              Brent Lakatos\n126 2021                 Marcel Hug\n127 1983               Denise Smith\n128 1984                Kay McShane\n129 1985                Kay McShane\n130 1986                Kay McShane\n131 1987             Karen Davidson\n132 1988             Karen Davidson\n133 1989            Josie Cichockyj\n134 1990              Connie Hansen\n135 1991              Connie Hansen\n136 1992        Tanni Grey-Thompson\n137 1993                  Rose Hill\n138 1994        Tanni Grey-Thompson\n139 1995                  Rose Hill\n140 1996        Tanni Grey-Thompson\n141 1997         Monica Wetterström\n142 1998        Tanni Grey-Thompson\n143 1999         Monica Wetterström\n144 2000               Sarah Piercy\n145 2001        Tanni Grey-Thompson\n146 2002        Tanni Grey-Thompson\n147 2003       Francesca Porcellato\n148 2004       Francesca Porcellato\n149 2005       Francesca Porcellato\n150 2006       Francesca Porcellato\n151 2007               Shelly Woods\n152 2008                Sandra Graf\n153 2009             Amanda McGrory\n154 2010            Wakako Tsuchida\n155 2011             Amanda McGrory\n156 2012               Shelly Woods\n157 2013           Tatyana McFadden\n158 2014           Tatyana McFadden\n159 2015           Tatyana McFadden\n160 2016           Tatyana McFadden\n161 2017              Manuela Schär\n162 2018         Madison de Rozario\n163 2019              Manuela Schär\n164 2020            Nikita den Boer\n165 2021              Manuela Schär\n\n\n\n\n\nHold on! Normally, we wouldn’t write tidyverse code like that. Instead, we would use the pipe operator %&gt;% (than do), which makes it easy to connect multiple function calls:\n\n\nwinners %&gt;%\n  filter(Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality ID\n1      Men 1989 Douglas Wakiihuri       Kenya 10\n2    Women 1997  Joyce Chepchumba       Kenya 61\n3    Women 1999  Joyce Chepchumba       Kenya 63\n\n\n\nHere, we first input the data frame we want to manipulate. Than we filter, as specified by the pipe operator. Like this, we can easily connect multiple function calls instead of nesting them within multiple brackets, which increases the readability:\n\nwinners[winners$Year &gt; 2000 & winners$Category == \"Women\", c(\"Category\", \"Year\")]\n\n   Category Year\n65    Women 2001\n66    Women 2002\n67    Women 2003\n68    Women 2004\n69    Women 2005\n70    Women 2006\n71    Women 2007\n72    Women 2008\n73    Women 2009\n74    Women 2010\n75    Women 2011\n76    Women 2012\n77    Women 2013\n78    Women 2014\n79    Women 2015\n80    Women 2016\n81    Women 2017\n82    Women 2018\n83    Women 2019\n84    Women 2020\n85    Women 2021\n86    Women 2022\n87    Women 2023\n\n\nbecomes:\n\n\nwinners %&gt;%\n  filter(Year &gt; 2000, Category == \"Women\") %&gt;%\n  select(Category, Year)\n\n   Category Year\n1     Women 2001\n2     Women 2002\n3     Women 2003\n4     Women 2004\n5     Women 2005\n6     Women 2006\n7     Women 2007\n8     Women 2008\n9     Women 2009\n10    Women 2010\n11    Women 2011\n12    Women 2012\n13    Women 2013\n14    Women 2014\n15    Women 2015\n16    Women 2016\n17    Women 2017\n18    Women 2018\n19    Women 2019\n20    Women 2020\n21    Women 2021\n22    Women 2022\n23    Women 2023\n\n\n\nMuch nicer to read, right?\nSome notes on this syntax: If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets. The pipe operator will give the result of the last function as input into the next function. If we want to clearly state which of the function arguments should receive the input, we can write a ., which can be read as output of the previous function call."
  },
  {
    "objectID": "subsetting.html#vectors",
    "href": "subsetting.html#vectors",
    "title": "Subsetting data",
    "section": "",
    "text": "Finally, let’s take a quick look at how to extract elements from a vector. It’s pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets:\n\nvec_athlete &lt;- winners$Athlete # remember: `$` returns a vector\nvec_athlete[2]\n\n[1] \"Inge Simonsen (Tie)\"\n\n\nOf course we can also do that for multiple elements:\n\nvec_athlete[c(2,3,4)]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n## Or, less to write:\nvec_athlete[2:4]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n\nAnother way would be to provide a logical vector, which defines for each position, if we want to extract the element or not (like we already did for data frames):\n\nvec_athlete[c(rep(TRUE, 100), rep(FALSE, 65))]\n\n  [1] \"Dick Beardsley (Tie)\"       \"Inge Simonsen (Tie)\"       \n  [3] \"Hugh Jones\"                 \"Mike Gratton\"              \n  [5] \"Charlie Spedding\"           \"Steve Jones\"               \n  [7] \"Toshihiko Seko\"             \"Hiromi Taniguchi\"          \n  [9] \"Henrik Jørgensen\"           \"Douglas Wakiihuri\"         \n [11] \"Allister Hutton\"            \"Yakov Tolstikov\"           \n [13] \"António Pinto\"              \"Eamonn Martin\"             \n [15] \"Dionicio Cerón\"             \"Dionicio Cerón\"            \n [17] \"Dionicio Cerón\"             \"António Pinto\"             \n [19] \"Abel Antón\"                 \"Abdelkader El Mouaziz\"     \n [21] \"António Pinto\"              \"Abdelkader El Mouaziz\"     \n [23] \"Khalid Khannouchi\"          \"Gezahegne Abera\"           \n [25] \"Evans Rutto\"                \"Martin Lel\"                \n [27] \"Felix Limo\"                 \"Martin Lel\"                \n [29] \"Martin Lel\"                 \"Samuel Wanjiru\"            \n [31] \"Tsegaye Kebede\"             \"Emmanuel Kipchirchir Mutai\"\n [33] \"Wilson Kipsang Kiprotich\"   \"Tsegaye Kebede\"            \n [35] \"Wilson Kipsang Kiprotich\"   \"Eliud Kipchoge\"            \n [37] \"Eliud Kipchoge\"             \"Daniel Wanjiru\"            \n [39] \"Eliud Kipchoge\"             \"Eliud Kipchoge\"            \n [41] \"Shura Kitata Tola\"          \"Sisay Lemma\"               \n [43] \"Amos Kipruto\"               \"Kelvin Kiptum\"             \n [45] \"Joyce Smith\"                \"Joyce Smith\"               \n [47] \"Grete Waitz\"                \"Ingrid Kristiansen\"        \n [49] \"Ingrid Kristiansen\"         \"Grete Waitz\"               \n [51] \"Ingrid Kristiansen\"         \"Ingrid Kristiansen\"        \n [53] \"Véronique Marot\"            \"Wanda Panfil\"              \n [55] \"Rosa Mota\"                  \"Katrin Dörre-Heinig\"       \n [57] \"Katrin Dörre-Heinig\"        \"Katrin Dörre-Heinig\"       \n [59] \"Małgorzata Sobańska\"        \"Liz McColgan\"              \n [61] \"Joyce Chepchumba\"           \"Catherina McKiernan\"       \n [63] \"Joyce Chepchumba\"           \"Tegla Loroupe\"             \n [65] \"Derartu Tulu\"               \"Paula Radcliffe\"           \n [67] \"Paula Radcliffe\"            \"Margaret Okayo\"            \n [69] \"Paula Radcliffe\"            \"Deena Kastor\"              \n [71] \"Zhou Chunxiu\"               \"Irina Mikitenko\"           \n [73] \"Irina Mikitenko\"            \"Aselefech Mergia\"          \n [75] \"Mary Jepkosgei Keitany\"     \"Mary Jepkosgei Keitany\"    \n [77] \"Priscah Jeptoo\"             \"Edna Kiplagat\"             \n [79] \"Tigist Tufa\"                \"Jemima Sumgong\"            \n [81] \"Mary Jepkosgei Keitany\"     \"Vivian Cheruiyot\"          \n [83] \"Brigid Kosgei\"              \"Brigid Kosgei\"             \n [85] \"Joyciline Jepkosgei\"        \"Yalemzerf Yehualaw\"        \n [87] \"Sifan Hassan\"               \"Gordon Perry\"              \n [89] \"Kevin Breen\"                \"Chris Hallam\"              \n [91] \"Gerry O'Rourke\"             \"Chris Hallam\"              \n [93] \"Ted Vince\"                  \"David Holding\"             \n [95] \"Håkan Ericsson\"             \"Farid Amarouche\"           \n [97] \"Daniel Wesley\"              \"George Vandamme\"           \n [99] \"David Holding\"              \"Heinz Frei\""
  },
  {
    "objectID": "subsetting.html#exercises",
    "href": "subsetting.html#exercises",
    "title": "Subsetting data",
    "section": "",
    "text": "Load the tutoR package and start the exercises about subsetting by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"subsetting\", package = \"tutoR\")"
  },
  {
    "objectID": "data_structures.html",
    "href": "data_structures.html",
    "title": "Data structures",
    "section": "",
    "text": "There are five main data structures in R which differ on their dimensions (one dimension, two dimensions, n dimensions) and the type of the elements they are containing (same type, different types):1\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1d\natomic vector\nlist\n\n\n2d\nmatrix\ndata.frame\n\n\nnd\narray\n\n\n\n\n\nLet’s take a closer look at the two we will use mostly throughout this workshop:\n\n\nAtomic vectors (from hereon only called vectors) contain elements of only the same type:\n\nnum_vec &lt;- c(2023, 8, 8)\nnum_vec\n\n[1] 2023    8    8\n\nchar_vec &lt;- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n\nlog_vec &lt;- c(TRUE, FALSE)\nlog_vec\n\n[1]  TRUE FALSE\n\n\nThe c() stands for combine, or concatenate, and is the basic function for building a vector out of single elements.\n\n\nIf we take a look at the structure of the vectors we have just created, we see se a short description of the data type we are dealing with in front of the vector:\n\nstr(num_vec)\n\n num [1:3] 2023 8 8\n\nstr(char_vec)\n\n chr [1:5] \"This\" \"is\" \"a\" \"vec\" \".\"\n\nstr(log_vec)\n\n logi [1:2] TRUE FALSE\n\n\nThe first one is num (numeric) so it only stores numeric values. The second one is char (character), so it only can contain strings. And last but not least we have logi (logical) for boolean values. Why is that important? Well, some functions only make sense for specific data types. For example:\n\nmean(char_vec)\n\nWarning in mean.default(char_vec): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\ngives us a warning, because the input has the wrong format.\n\n\n\n\nA data frame is two dimensional and can store elements of different types. It is the closest to data tables we are probably most used to working with.\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extro = c(3.5, 2, 4.5, 4.2)\n                      )\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n\nA special type of data frames are the so called tibbles. Tibbles are a modern version of data frames and the standard data frame type of the tidyverse, as they have some advantageous characteristics (e.g., note the prettier printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames.\n\npersons_tibble &lt;- tibble::tibble(\n  name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n  age = c(19, 17, 18, 18),\n  birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n  big5_extro = c(3.5, 2, 4.5, 4.2)\n)\npersons_tibble\n\n# A tibble: 4 × 4\n  name    age birth_month big5_extro\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1 Anna     19 Jan                3.5\n2 Alex     17 Sep                2  \n3 John     18 Oct                4.5\n4 Jessi    18 Mar                4.2\n\n\n\n\n\n\nA list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\npersonality_rating &lt;- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n\n\nHere, we define the list personality_rating, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type. We won’t use it any more in this workshop, but keep in mind it exists, as it quickly becomes necessary for managing more complex tasks.\nInstead, we are now well equipped to get started with some data manipulation and transformation."
  },
  {
    "objectID": "data_structures.html#vector",
    "href": "data_structures.html#vector",
    "title": "Data structures",
    "section": "",
    "text": "Atomic vectors (from hereon only called vectors) contain elements of only the same type:\n\nnum_vec &lt;- c(2023, 8, 8)\nnum_vec\n\n[1] 2023    8    8\n\nchar_vec &lt;- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n\nlog_vec &lt;- c(TRUE, FALSE)\nlog_vec\n\n[1]  TRUE FALSE\n\n\nThe c() stands for combine, or concatenate, and is the basic function for building a vector out of single elements.\n\n\nIf we take a look at the structure of the vectors we have just created, we see se a short description of the data type we are dealing with in front of the vector:\n\nstr(num_vec)\n\n num [1:3] 2023 8 8\n\nstr(char_vec)\n\n chr [1:5] \"This\" \"is\" \"a\" \"vec\" \".\"\n\nstr(log_vec)\n\n logi [1:2] TRUE FALSE\n\n\nThe first one is num (numeric) so it only stores numeric values. The second one is char (character), so it only can contain strings. And last but not least we have logi (logical) for boolean values. Why is that important? Well, some functions only make sense for specific data types. For example:\n\nmean(char_vec)\n\nWarning in mean.default(char_vec): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\ngives us a warning, because the input has the wrong format."
  },
  {
    "objectID": "data_structures.html#data-frame",
    "href": "data_structures.html#data-frame",
    "title": "Data structures",
    "section": "",
    "text": "A data frame is two dimensional and can store elements of different types. It is the closest to data tables we are probably most used to working with.\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extro = c(3.5, 2, 4.5, 4.2)\n                      )\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n\nA special type of data frames are the so called tibbles. Tibbles are a modern version of data frames and the standard data frame type of the tidyverse, as they have some advantageous characteristics (e.g., note the prettier printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames.\n\npersons_tibble &lt;- tibble::tibble(\n  name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n  age = c(19, 17, 18, 18),\n  birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n  big5_extro = c(3.5, 2, 4.5, 4.2)\n)\npersons_tibble\n\n# A tibble: 4 × 4\n  name    age birth_month big5_extro\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1 Anna     19 Jan                3.5\n2 Alex     17 Sep                2  \n3 John     18 Oct                4.5\n4 Jessi    18 Mar                4.2"
  },
  {
    "objectID": "data_structures.html#honorable-mention-list",
    "href": "data_structures.html#honorable-mention-list",
    "title": "Data structures",
    "section": "",
    "text": "A list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\npersonality_rating &lt;- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n\n\nHere, we define the list personality_rating, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type. We won’t use it any more in this workshop, but keep in mind it exists, as it quickly becomes necessary for managing more complex tasks.\nInstead, we are now well equipped to get started with some data manipulation and transformation."
  },
  {
    "objectID": "data_structures.html#footnotes",
    "href": "data_structures.html#footnotes",
    "title": "Data structures",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTable from Advanced R.↩︎"
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Basic operations",
    "section": "",
    "text": "Let’s take a quick look at the most important basic operations in R.\n\n\nWe can use R as a calculator:\n\n(1 + 2) * 3^2\n2 - 3/log(8)\n\n\n\n\nWe can create objects in R by using the assignment operator &lt;-, which assigns a value to an object:\n\n## Assign the result of 1 + 1 to the object 'result':\nresult &lt;- 1 + 1\nresult\n\n[1] 2\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result &lt;- !(10 &gt; 1)\nlog_result\n\n[1] FALSE\n\n\n\n\n\nThe boolean variables in R are TRUE and FALSE. Comparison operators return either TRUE or FALSE:\n\n1 &lt; 2\n\n[1] TRUE\n\n# But:\n2 &lt; 1\n\n[1] FALSE\n\n\nThese are the comparison operators you will typically use:\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;=\nless or equal\n\n\n&gt;=\ngreater or equal\n\n\n\n\n\nMainly we will use these logical operation to check which elements in a vector satisfy some requirements:\n\n# Build a vector of numbers ranging from 1 to 10\nvec_num &lt;- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined.\n\n\n\nWe can invert boolean values by using !:\n\n!TRUE\n\n[1] FALSE\n\n!(1 &gt; 100)\n\n[1] TRUE\n\n!(1:10 != c(1, 2))\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n\nEverything that does something in R is a function. A function call has the form: functionname(argument1 = value, argument2 = value, ...). One basic example for a function is the function that can calculate the square root:\n\nsqrt(4)\n\n[1] 2\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don’t rely on the order of the function arguments:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nwill rep 4 10 times. If we swap the arguments, the 10 will be repeat 4 times:\n\nrep(10, 4)\n\n[1] 10 10 10 10\n\n\nBut if we specify which value belongs to which function argument, the order doesn’t matter:\n\nrep(times = 10, x = 4)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nHow do we know which arguments a function has?:\n\n\n\nOne of the most important functions in R is the help-function ?:\n\n?rep\n\nwill open the documentation for the function with the description of its usage, details about the arguments … In the next chapter we will take a very quick look at R’s data types.\n\n\n\n\nLoad the tutoR package and start the exercises about the basic operations by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"basics\", package = \"tutoR\")"
  },
  {
    "objectID": "basics.html#basic-mathematical-operations",
    "href": "basics.html#basic-mathematical-operations",
    "title": "Basic operations",
    "section": "",
    "text": "We can use R as a calculator:\n\n(1 + 2) * 3^2\n2 - 3/log(8)"
  },
  {
    "objectID": "basics.html#assignment-operator",
    "href": "basics.html#assignment-operator",
    "title": "Basic operations",
    "section": "",
    "text": "We can create objects in R by using the assignment operator &lt;-, which assigns a value to an object:\n\n## Assign the result of 1 + 1 to the object 'result':\nresult &lt;- 1 + 1\nresult\n\n[1] 2\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result &lt;- !(10 &gt; 1)\nlog_result\n\n[1] FALSE"
  },
  {
    "objectID": "basics.html#comparisons-and-logical-operators",
    "href": "basics.html#comparisons-and-logical-operators",
    "title": "Basic operations",
    "section": "",
    "text": "The boolean variables in R are TRUE and FALSE. Comparison operators return either TRUE or FALSE:\n\n1 &lt; 2\n\n[1] TRUE\n\n# But:\n2 &lt; 1\n\n[1] FALSE\n\n\nThese are the comparison operators you will typically use:\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;=\nless or equal\n\n\n&gt;=\ngreater or equal\n\n\n\n\n\nMainly we will use these logical operation to check which elements in a vector satisfy some requirements:\n\n# Build a vector of numbers ranging from 1 to 10\nvec_num &lt;- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined."
  },
  {
    "objectID": "basics.html#section",
    "href": "basics.html#section",
    "title": "Basic operations",
    "section": "",
    "text": "We can invert boolean values by using !:\n\n!TRUE\n\n[1] FALSE\n\n!(1 &gt; 100)\n\n[1] TRUE\n\n!(1:10 != c(1, 2))\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "basics.html#functions",
    "href": "basics.html#functions",
    "title": "Basic operations",
    "section": "",
    "text": "Everything that does something in R is a function. A function call has the form: functionname(argument1 = value, argument2 = value, ...). One basic example for a function is the function that can calculate the square root:\n\nsqrt(4)\n\n[1] 2\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don’t rely on the order of the function arguments:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nwill rep 4 10 times. If we swap the arguments, the 10 will be repeat 4 times:\n\nrep(10, 4)\n\n[1] 10 10 10 10\n\n\nBut if we specify which value belongs to which function argument, the order doesn’t matter:\n\nrep(times = 10, x = 4)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nHow do we know which arguments a function has?:"
  },
  {
    "objectID": "basics.html#help",
    "href": "basics.html#help",
    "title": "Basic operations",
    "section": "",
    "text": "One of the most important functions in R is the help-function ?:\n\n?rep\n\nwill open the documentation for the function with the description of its usage, details about the arguments … In the next chapter we will take a very quick look at R’s data types."
  },
  {
    "objectID": "basics.html#exercise",
    "href": "basics.html#exercise",
    "title": "Basic operations",
    "section": "",
    "text": "Load the tutoR package and start the exercises about the basic operations by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"basics\", package = \"tutoR\")"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "Packages are extensions to the base R you get by default. Most times they provide many new functions, bundled around a specific use case. When working with R you will have to rely heavily on packages developed by others. There are many, many great packages out there facilitating your work with R and making possible many different analyses, visualizations and many more.\nWe can compare them somewhat to apps in an appstore:\n1 First, we have to install the package: install.packages(\"packagename\"). - Most of the openly available packages lie on CRAN (Comprehensive R Archive Network). But you can also download packages form other sources, for example GitHub. This is what you did when downloading the tutoR package in About this workshop.\n2 Then, we have to load them in each session where we want to use them (like tipping on the app icon): library(packagename).\n\nNote that in install.packages(\"packagename\") we have to put the package into quotation marks, when calling library(packagename) not.\n\n\n\nBefore we can use packages we have to install them once. Most packages are hosted via the Comprehensive R Archive Network (CRAN), to install a package from there, we can use:\n\ninstall.packages(\"aRtsy\")\n\nBut often packages are only (or as well) provided via GitHub. To install a package from there, use:\n\ndevtools::install_github(\"cutterkom/generativeart\")\n\n\n\n\nAfter installing a package, we have to load it into our R session:\n\n#library(aRtsy)\n\nNow we are free to use it, in this case to generate some artwork:\n\n#set.seed(1)\n#canvas_collatz(colors = colorPalette(\"lava\"))\n\n\n\n\nOf course it can happen that different packages include functions with the same name. For example, look at the warnings we get when installing and then loading the packages ggplot2 and psych:\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"psych\")\n\n\nlibrary(ggplot2)\nlibrary(psych)\n\n\nAttaching package: 'psych'\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n\n\nThere seems to be a function named alpha which is included in both packages (but not the same function, just the same name). The warning message notifies us that the object alpha from ggplot2 is masked, so if we call it, the alpha function from the psych package is used. To solve that quandary, we can use the :: operator. In front we write the package name, and behind it the name of the function we want to use from that package:\n\nggplot2::alpha()\npsych::alpha()\n\n\n\n\nFinally, a quick note on package management and reproducability of your code. R versions and package versions will change over time, in which case also the output of your code might change. Therefore, it is good practice to save the R version and package versions, so your code stays (kind of) reproducable for a longer period of time. The most straight forward thing to do is to just write down your R-version and the package versions at the top of your script. Call the versions you use with:\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] psych_2.3.6   ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       nlme_3.1-162      cli_3.6.1         knitr_1.43       \n [5] rlang_1.1.1       xfun_0.39         generics_0.1.3    renv_1.0.0       \n [9] jsonlite_1.8.7    glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5  \n[13] scales_1.2.1      fansi_1.0.4       rmarkdown_2.23    grid_4.3.1       \n[17] evaluate_0.21     munsell_0.5.0     tibble_3.2.1      fastmap_1.1.1    \n[21] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2      \n[25] pkgconfig_2.0.3   rstudioapi_0.15.0 lattice_0.21-8    digest_0.6.32    \n[29] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3        parallel_4.3.1   \n[33] mnormt_2.1.1      pillar_1.9.0      magrittr_2.0.3    withr_2.5.0      \n[37] tools_4.3.1       gtable_0.3.3     \n\n\nA more elegant approach to manage your packages is to use a dedicated package like renv, which will make it a lot easier to manage your package versions. But this is past the scope of this workshop, just keep in mind it might be something rewarding to look at, if you should start to programm more with R. Instead, let’s look at how to get data into R in the next chapter, so we can actually get to work with it."
  },
  {
    "objectID": "packages.html#install-packages",
    "href": "packages.html#install-packages",
    "title": "Packages",
    "section": "",
    "text": "Before we can use packages we have to install them once. Most packages are hosted via the Comprehensive R Archive Network (CRAN), to install a package from there, we can use:\n\ninstall.packages(\"aRtsy\")\n\nBut often packages are only (or as well) provided via GitHub. To install a package from there, use:\n\ndevtools::install_github(\"cutterkom/generativeart\")"
  },
  {
    "objectID": "packages.html#load-packages",
    "href": "packages.html#load-packages",
    "title": "Packages",
    "section": "",
    "text": "After installing a package, we have to load it into our R session:\n\n#library(aRtsy)\n\nNow we are free to use it, in this case to generate some artwork:\n\n#set.seed(1)\n#canvas_collatz(colors = colorPalette(\"lava\"))"
  },
  {
    "objectID": "packages.html#conflicts",
    "href": "packages.html#conflicts",
    "title": "Packages",
    "section": "",
    "text": "Of course it can happen that different packages include functions with the same name. For example, look at the warnings we get when installing and then loading the packages ggplot2 and psych:\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"psych\")\n\n\nlibrary(ggplot2)\nlibrary(psych)\n\n\nAttaching package: 'psych'\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n\n\nThere seems to be a function named alpha which is included in both packages (but not the same function, just the same name). The warning message notifies us that the object alpha from ggplot2 is masked, so if we call it, the alpha function from the psych package is used. To solve that quandary, we can use the :: operator. In front we write the package name, and behind it the name of the function we want to use from that package:\n\nggplot2::alpha()\npsych::alpha()"
  },
  {
    "objectID": "packages.html#deliberate-package-management",
    "href": "packages.html#deliberate-package-management",
    "title": "Packages",
    "section": "",
    "text": "Finally, a quick note on package management and reproducability of your code. R versions and package versions will change over time, in which case also the output of your code might change. Therefore, it is good practice to save the R version and package versions, so your code stays (kind of) reproducable for a longer period of time. The most straight forward thing to do is to just write down your R-version and the package versions at the top of your script. Call the versions you use with:\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] psych_2.3.6   ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       nlme_3.1-162      cli_3.6.1         knitr_1.43       \n [5] rlang_1.1.1       xfun_0.39         generics_0.1.3    renv_1.0.0       \n [9] jsonlite_1.8.7    glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5  \n[13] scales_1.2.1      fansi_1.0.4       rmarkdown_2.23    grid_4.3.1       \n[17] evaluate_0.21     munsell_0.5.0     tibble_3.2.1      fastmap_1.1.1    \n[21] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2      \n[25] pkgconfig_2.0.3   rstudioapi_0.15.0 lattice_0.21-8    digest_0.6.32    \n[29] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3        parallel_4.3.1   \n[33] mnormt_2.1.1      pillar_1.9.0      magrittr_2.0.3    withr_2.5.0      \n[37] tools_4.3.1       gtable_0.3.3     \n\n\nA more elegant approach to manage your packages is to use a dedicated package like renv, which will make it a lot easier to manage your package versions. But this is past the scope of this workshop, just keep in mind it might be something rewarding to look at, if you should start to programm more with R. Instead, let’s look at how to get data into R in the next chapter, so we can actually get to work with it."
  },
  {
    "objectID": "packages.html#footnotes",
    "href": "packages.html#footnotes",
    "title": "Packages",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIcons from icons8.de.↩︎\nIcons from icons8.de.↩︎"
  },
  {
    "objectID": "load_data.html",
    "href": "load_data.html",
    "title": "Load data",
    "section": "",
    "text": "There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly readxl and haven.\n\n\n\n\n\n\n\n\n\nData.type\nImport\nExport\n\n\n\n\nR objects (.Rdata, .rda)\nload()\nsave()\n\n\nsingle R object (.Rds)\nreadRDS()\nsaveRDS()\n\n\ntext-files (.txt)\nread.table()\nwrite.table()\n\n\n.csv-files (.csv)\nread.csv()\nwrite.csv()\n\n\nExcel-files (.xlsx)\nreadxl::read_excel()\nwritexl::write_xlsx()\n\n\nSPSS-files (.sav)\nhaven::read_sav()\nhaven::write_sav()\n\n\nSAS-files (.sas)\nhaven::read_sas()\nhaven::write_sas()\n\n\nStata-files (.stata)\nhaven::read_dta()\nhaven::write_dta()\n\n\n\n\n\n\n\nYou can head to a specific file by using the full path (absolute path): \"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\". This approach has some disadvantages: it will only work on my notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use relative paths if possible: \".\\raw_data\\winners.rda\". This will always work independently of the device i am working on, as long as i am in the correct working directory.\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\ngetwd()\n\n[1] \"/home/runner/work/r_tutorial/r_tutorial\"\n\n\nLuckily, as long as we work with RStudio projects, we don’t have to deal with that, as the working directory is set automatically by the project.\nNow take a look at the working directory and the relative path i used for loading the winners.rda. Notice something? Correct, both paths combined equal the absolute path to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is."
  },
  {
    "objectID": "load_data.html#data-types",
    "href": "load_data.html#data-types",
    "title": "Load data",
    "section": "",
    "text": "There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly readxl and haven.\n\n\n\n\n\n\n\n\n\nData.type\nImport\nExport\n\n\n\n\nR objects (.Rdata, .rda)\nload()\nsave()\n\n\nsingle R object (.Rds)\nreadRDS()\nsaveRDS()\n\n\ntext-files (.txt)\nread.table()\nwrite.table()\n\n\n.csv-files (.csv)\nread.csv()\nwrite.csv()\n\n\nExcel-files (.xlsx)\nreadxl::read_excel()\nwritexl::write_xlsx()\n\n\nSPSS-files (.sav)\nhaven::read_sav()\nhaven::write_sav()\n\n\nSAS-files (.sas)\nhaven::read_sas()\nhaven::write_sas()\n\n\nStata-files (.stata)\nhaven::read_dta()\nhaven::write_dta()"
  },
  {
    "objectID": "load_data.html#absolute-paths-vs.-relative-paths",
    "href": "load_data.html#absolute-paths-vs.-relative-paths",
    "title": "Load data",
    "section": "",
    "text": "You can head to a specific file by using the full path (absolute path): \"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\". This approach has some disadvantages: it will only work on my notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use relative paths if possible: \".\\raw_data\\winners.rda\". This will always work independently of the device i am working on, as long as i am in the correct working directory.\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\ngetwd()\n\n[1] \"/home/runner/work/r_tutorial/r_tutorial\"\n\n\nLuckily, as long as we work with RStudio projects, we don’t have to deal with that, as the working directory is set automatically by the project.\nNow take a look at the working directory and the relative path i used for loading the winners.rda. Notice something? Correct, both paths combined equal the absolute path to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is."
  }
]