[
  {
    "objectID": "load_data.html",
    "href": "load_data.html",
    "title": "Load data",
    "section": "",
    "text": "There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly readxl and haven.\n\n\n\n\n\n\n\n\n\nData.type\nImport\nExport\n\n\n\n\nR objects (.Rdata, .rda)\nload()\nsave()\n\n\nsingle R object (.Rds)\nreadRDS()\nsaveRDS()\n\n\ntext-files (.txt)\nread.table()\nwrite.table()\n\n\n.csv-files (.csv)\nread.csv()\nwrite.csv()\n\n\nExcel-files (.xlsx)\nreadxl::read_excel()\nwritexl::write_xlsx()\n\n\nSPSS-files (.sav)\nhaven::read_sav()\nhaven::write_sav()\n\n\nSAS-files (.sas)\nhaven::read_sas()\nhaven::write_sas()\n\n\nStata-files (.stata)\nhaven::read_dta()\nhaven::write_dta()\n\n\n\n\n\n\n\nYou can head to a specific file by using the full path (absolute path): \"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\". This approach has some disadvantages: it will only work on my notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use relative paths if possible: \".\\raw_data\\winners.rda\". This will always work independently of the device i am working on, as long as i am in the correct working directory.\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\ngetwd()\n\n[1] \"/home/runner/work/r_tutorial/r_tutorial\"\n\n\nLuckily, as long as we work with RStudio projects, we don’t have to deal with that, as the working directory is set automatically by the project.\nNow take a look at the working directory and the relative path i used for loading the winners.rda. Notice something? Correct, both paths combined equal the absolute path to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is."
  },
  {
    "objectID": "load_data.html#data-types",
    "href": "load_data.html#data-types",
    "title": "Load data",
    "section": "",
    "text": "There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly readxl and haven.\n\n\n\n\n\n\n\n\n\nData.type\nImport\nExport\n\n\n\n\nR objects (.Rdata, .rda)\nload()\nsave()\n\n\nsingle R object (.Rds)\nreadRDS()\nsaveRDS()\n\n\ntext-files (.txt)\nread.table()\nwrite.table()\n\n\n.csv-files (.csv)\nread.csv()\nwrite.csv()\n\n\nExcel-files (.xlsx)\nreadxl::read_excel()\nwritexl::write_xlsx()\n\n\nSPSS-files (.sav)\nhaven::read_sav()\nhaven::write_sav()\n\n\nSAS-files (.sas)\nhaven::read_sas()\nhaven::write_sas()\n\n\nStata-files (.stata)\nhaven::read_dta()\nhaven::write_dta()"
  },
  {
    "objectID": "load_data.html#absolute-paths-vs.-relative-paths",
    "href": "load_data.html#absolute-paths-vs.-relative-paths",
    "title": "Load data",
    "section": "",
    "text": "You can head to a specific file by using the full path (absolute path): \"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\". This approach has some disadvantages: it will only work on my notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use relative paths if possible: \".\\raw_data\\winners.rda\". This will always work independently of the device i am working on, as long as i am in the correct working directory.\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\ngetwd()\n\n[1] \"/home/runner/work/r_tutorial/r_tutorial\"\n\n\nLuckily, as long as we work with RStudio projects, we don’t have to deal with that, as the working directory is set automatically by the project.\nNow take a look at the working directory and the relative path i used for loading the winners.rda. Notice something? Correct, both paths combined equal the absolute path to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is."
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "Packages are extensions to the base R you get by default. We can compare them somewhat to apps in an appstore:\n1 First, we have to install the package: install.packages(\"packagename\"). - Most of the openly available packages lie on CRAN (Comprehensive R Archive Network). But you can also download packages form other sources, for example GitHub. This is what you did when downloading the tutoR package in About this workshop.\n2 Then, we have to load them in each session where we want to use them (like tipping on the app icon): library(packagename).\n\nNote that in install.packages(\"packagename\") we have to put the package into quotation marks, when calling library(packagename) not."
  },
  {
    "objectID": "packages.html#footnotes",
    "href": "packages.html#footnotes",
    "title": "Packages",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIcons from icons8.de.↩︎\nIcons from icons8.de.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Workshop",
    "section": "",
    "text": "The following tutorial will teach you the basics of R. It is designed to be self paced, so you can work in you own tempo.\n\n\n\nLearn the basics of programming in R as needed for the rest of the Open Research Summer School."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "R Workshop",
    "section": "",
    "text": "The following tutorial will teach you the basics of R. It is designed to be self paced, so you can work in you own tempo.\n\n\n\nLearn the basics of programming in R as needed for the rest of the Open Research Summer School."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Basic operations",
    "section": "",
    "text": "Let’s take a quick look at the most important basic operations in R.\n\n\nWe can use R as a calculator:\n\n(1 + 2) * 3^2\n2 - 3/log(8)\n\n\n\n\nWe can create objects in R by using the assignment operator &lt;-, which assigns a value to an object:\n\n## Assign the result of 1 + 1 to the object 'result':\nresult &lt;- 1 + 1\nresult\n\n[1] 2\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result &lt;- !(10 &gt; 1)\nlog_result\n\n[1] FALSE\n\n\n\n\n\nThe boolean variables in R are TRUE and FALSE. Comparison operators return either TRUE or FALSE:\n\n1 &lt; 2\n\n[1] TRUE\n\n# But:\n2 &lt; 1\n\n[1] FALSE\n\n\nThese are the comparison operators you will typically use:\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;=\nless or equal\n\n\n&gt;=\ngreater or equal\n\n\n\n\n\nMainly we will use these logical operation to check which elements in a vector satisfy some requirements:\n\n# Build a vector of numbers ranging from 1 to 10\nvec_num &lt;- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined.\n\n\n\nWe can invert boolean values by using !:\n\n!TRUE\n\n[1] FALSE\n\n!(1 &gt; 100)\n\n[1] TRUE\n\n!(1:10 != c(1, 2))\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n\nEverything that does something in R is a function. A function call has the form: functionname(argument1 = value, argument2 = value, ...). One basic example for a function is the function that can calculate the square root:\n\nsqrt(4)\n\n[1] 2\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don’t rely on the order of the function arguments:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nwill rep 4 10 times. If we swap the arguments, the 10 will be repeat 4 times:\n\nrep(10, 4)\n\n[1] 10 10 10 10\n\n\nBut if we specify which value belongs to which function argument, the order doesn’t matter:\n\nrep(times = 10, x = 4)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nHow do we know which arguments a function has?:\n\n\n\nOne of the most important functions in R is the help-function ?:\n\n?rep\n\nwill open the documentation for the function with the description of its usage, details about the arguments …\n\n\n\n\nLoad the tutoR package and start the exercises about the basic operations by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"basics\", package = \"tutoR\")"
  },
  {
    "objectID": "basics.html#basic-mathematical-operations",
    "href": "basics.html#basic-mathematical-operations",
    "title": "Basic operations",
    "section": "",
    "text": "We can use R as a calculator:\n\n(1 + 2) * 3^2\n2 - 3/log(8)"
  },
  {
    "objectID": "basics.html#assignment-operator",
    "href": "basics.html#assignment-operator",
    "title": "Basic operations",
    "section": "",
    "text": "We can create objects in R by using the assignment operator &lt;-, which assigns a value to an object:\n\n## Assign the result of 1 + 1 to the object 'result':\nresult &lt;- 1 + 1\nresult\n\n[1] 2\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result &lt;- !(10 &gt; 1)\nlog_result\n\n[1] FALSE"
  },
  {
    "objectID": "basics.html#comparisons-and-logical-operators",
    "href": "basics.html#comparisons-and-logical-operators",
    "title": "Basic operations",
    "section": "",
    "text": "The boolean variables in R are TRUE and FALSE. Comparison operators return either TRUE or FALSE:\n\n1 &lt; 2\n\n[1] TRUE\n\n# But:\n2 &lt; 1\n\n[1] FALSE\n\n\nThese are the comparison operators you will typically use:\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;=\nless or equal\n\n\n&gt;=\ngreater or equal\n\n\n\n\n\nMainly we will use these logical operation to check which elements in a vector satisfy some requirements:\n\n# Build a vector of numbers ranging from 1 to 10\nvec_num &lt;- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined."
  },
  {
    "objectID": "basics.html#section",
    "href": "basics.html#section",
    "title": "Basic operations",
    "section": "",
    "text": "We can invert boolean values by using !:\n\n!TRUE\n\n[1] FALSE\n\n!(1 &gt; 100)\n\n[1] TRUE\n\n!(1:10 != c(1, 2))\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "basics.html#functions",
    "href": "basics.html#functions",
    "title": "Basic operations",
    "section": "",
    "text": "Everything that does something in R is a function. A function call has the form: functionname(argument1 = value, argument2 = value, ...). One basic example for a function is the function that can calculate the square root:\n\nsqrt(4)\n\n[1] 2\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don’t rely on the order of the function arguments:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nwill rep 4 10 times. If we swap the arguments, the 10 will be repeat 4 times:\n\nrep(10, 4)\n\n[1] 10 10 10 10\n\n\nBut if we specify which value belongs to which function argument, the order doesn’t matter:\n\nrep(times = 10, x = 4)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nHow do we know which arguments a function has?:"
  },
  {
    "objectID": "basics.html#help",
    "href": "basics.html#help",
    "title": "Basic operations",
    "section": "",
    "text": "One of the most important functions in R is the help-function ?:\n\n?rep\n\nwill open the documentation for the function with the description of its usage, details about the arguments …"
  },
  {
    "objectID": "basics.html#exercise",
    "href": "basics.html#exercise",
    "title": "Basic operations",
    "section": "",
    "text": "Load the tutoR package and start the exercises about the basic operations by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"basics\", package = \"tutoR\")"
  },
  {
    "objectID": "the_big_picture.html",
    "href": "the_big_picture.html",
    "title": "The big picture",
    "section": "",
    "text": "Now that we have completed our set up, let’s dive right into programming with R. In this chapter, we will go through a “mini-project”, which follows a typical workflow when working with data in R. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters, we will go into a little bit more depth for each topic. If you want to have more in depth information instead of following the whole workflow first, you can also jump to the according chapter and read the theory. But make sure to come back to this chapter for the final exercise.\n\n\nPackages are extensions to the base R you get by default. We already installed our first packages in About this workshop. Let’s keep doing that and install the following package as well:\n\ninstall.packages(\"tidyverse\")\n\nThe tidyverse is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the tidyverse.\nJust by installing the packages, we can’t use them. We also have to load them into our R session:\n\nlibrary(tutoR)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe top of your R Script should look something like this:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\ninstall.packages(\"tidyverse\")\n\nlibrary(tutoR)\nlibrary(tidyverse)\n\n\n\n\nData is loaded into R so you can work with it. Let’s do just that. First, you need to download the file “winners.rds” from this link and save it in your project folder (Tip: Save it in a new subfolder named “raw_data” or somewhat similar.). The data comes from the LondonMarathon package. Next, take a look at the ending. Different data formats need different functions for loading them into R. The winners.rds file has the ending .rds. So we use readRDS to load it into R. Here you can find a more thourough discussion about loading different data formats.\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\n\nThis will load the data into R and assigning it the name winners by using the &lt;-. You can see the data popping up in your Environment pane on the upper right. It is important you use the correct path, because otherwise R will not find your data file. Here the RStudio project we have created earlier comes in handy. It automatically knows our file lies within our project folder, which is why we can use a relative path, that starts at the project path and looks into the folder raw_data to open the file. Otherwise, we would have to use an absolute path (like “C:/Users/hafiznij/Documents/GitHub/r_tutorial/raw_data/london_marathon.rda” which will only work on my notebook, and only if my project stays in on this path.\n\n\n\nNow that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be View(), which will open the data set excel-style in a new window:\n\nView(winners)\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\nstr(winners)\n\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Category   : chr [1:165] \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num [1:165] 1981 1981 1982 1983 1984 ...\n $ Athlete    : chr [1:165] \"Dick Beardsley (Tie)\" \"Inge Simonsen (Tie)\" \"Hugh Jones\" \"Mike Gratton\" ...\n $ Nationality: chr [1:165] \"United States\" \"Norway\" \"United Kingdom\" \"United Kingdom\" ...\n $ ID         : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n\n\nOn the left we can see the columns of this data.frame, named Category, Year, Athlete, Nationality and ID. On the right we see the first values in each column, for example 1981, 1981, 1982 etc … in the Year-column.\n\n\n\nNow, lets do something with this data. We want to answer the question if people have gotten faster at running marathons over that last 40 years. Sadly, the finishing times are not saved in this data set, but in another one named times.rda. So we need a way to combine them both, so we can run our analysis on the data.\nExercise: Download the second data set called “times.rda” and load it into R on your own.\n\n\nLet’s take a quick look at that one as well:\n\nstr(times)\n\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Time   : 'times' num [1:165] 0.0915 0.0915 0.0899 0.0901 0.0902 ...\n  ..- attr(*, \"format\")= chr \"h:m:s\"\n $ Hours  : num [1:165] 2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes: num [1:165] 11 11 9 9 9 8 10 9 10 9 ...\n $ Seconds: num [1:165] 48 48 24 43 57 16 2 50 20 3 ...\n $ ID     : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n\n\nThe only column both data sets seem to have in commonn is the ID one. This means we have to merge our two data sets on that column, so rows which have the same value in that column will be merged together. However, we have a slight problem: the ID column contains missing values (called NA). We will not be able to match these rows over both data sets, so we have to remove them. But first, let’s take a look at how many those are:\n\nsum(is.na(times$ID))\n\n[1] 5\n\nsum(is.na(winners$ID))\n\n[1] 5\n\n\nDon’t worry to much about what that code is doing right now, we will take a closer look later on. We seem to have five NAs in both data sets. This isn’t a whole lot, so we will just remove them, but keep in mind dealing with NAs is a broad topic for itself with many different possible approaches.\n\ntimes &lt;- drop_na(data = times, ID)\nwinners &lt;- drop_na(data = winners, ID)\n\nHere, we use a function from the tidyr package (which we installed among others when we installed the tidyverse) that removes all rows from the data that contain a NA in the ID column.\n\n\n\nNow we can merge:\n\nwinners_merged &lt;- merge(x = winners, \n                        y = times,\n                        by = \"ID\")\n\nWhat happens here? We take our two data sets, called winers and times and combine them on the column ID. Let’s take a look at the finished product:\n\nstr(winners_merged)\n\n'data.frame':   160 obs. of  9 variables:\n $ ID         : int  1 3 4 5 6 7 8 9 10 11 ...\n $ Category   : chr  \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num  1981 1982 1983 1984 1985 ...\n $ Athlete    : chr  \"Dick Beardsley (Tie)\" \"Hugh Jones\" \"Mike Gratton\" \"Charlie Spedding\" ...\n $ Nationality: chr  \"United States\" \"United Kingdom\" \"United Kingdom\" \"United Kingdom\" ...\n $ Time       : num  0.0915 0.0899 0.0901 0.0902 0.0891 ...\n $ Hours      : num  2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes    : num  11 9 9 9 8 10 9 10 9 10 ...\n $ Seconds    : num  48 24 43 57 16 2 50 20 3 10 ...\n\n\nWe have merged the columns of the times data set onto the right the winners data.\n\n\n\nOne very important part of working with data in R is the subsetting of data. This means we select specific values from a data set.\nDivide by Category (Wheelchar vs. no wheelchair)\n\n\n\n\nwomen &lt;- winners[winners$Category == \"Women\", ]\n\n\nlm_rs &lt;- lm(Minutes_total ~ Year, women)\nsummary(lm_rs)\n\n# 614 min bei Year = 0, für jedes Jahr -0.23 Min weniger:\n# 614 + 2020 * -0.236\n\n\nplot(lm_rs)\n\n\nwinners$Minutes_total &lt;- winners$Hours * 60 + winners$Minutes\n\n\n\n\n\n\nlibrary(ggplot2)\nwinners %&gt;%\n  filter(Category %in% c(\"Men\", \"Women\")) %&gt;%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\nwinners %&gt;%\n  filter(Category %in% c(\"Wheelchair Men\", \"Wheelchair Women\")) %&gt;%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\n# Für die Übung. \n#install.packages(\"tidytuesdayR\")\nlibrary(tidytuesdayR)\ntuesdata &lt;- tidytuesdayR::tt_load('2022-08-16')\n\n\n\n\nIn this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in."
  },
  {
    "objectID": "the_big_picture.html#packages",
    "href": "the_big_picture.html#packages",
    "title": "The big picture",
    "section": "",
    "text": "Packages are extensions to the base R you get by default. We already installed our first packages in About this workshop. Let’s keep doing that and install the following package as well:\n\ninstall.packages(\"tidyverse\")\n\nThe tidyverse is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the tidyverse.\nJust by installing the packages, we can’t use them. We also have to load them into our R session:\n\nlibrary(tutoR)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe top of your R Script should look something like this:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\ninstall.packages(\"tidyverse\")\n\nlibrary(tutoR)\nlibrary(tidyverse)"
  },
  {
    "objectID": "the_big_picture.html#load-data",
    "href": "the_big_picture.html#load-data",
    "title": "The big picture",
    "section": "",
    "text": "Data is loaded into R so you can work with it. Let’s do just that. First, you need to download the file “winners.rds” from this link and save it in your project folder (Tip: Save it in a new subfolder named “raw_data” or somewhat similar.). The data comes from the LondonMarathon package. Next, take a look at the ending. Different data formats need different functions for loading them into R. The winners.rds file has the ending .rds. So we use readRDS to load it into R. Here you can find a more thourough discussion about loading different data formats.\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\n\nThis will load the data into R and assigning it the name winners by using the &lt;-. You can see the data popping up in your Environment pane on the upper right. It is important you use the correct path, because otherwise R will not find your data file. Here the RStudio project we have created earlier comes in handy. It automatically knows our file lies within our project folder, which is why we can use a relative path, that starts at the project path and looks into the folder raw_data to open the file. Otherwise, we would have to use an absolute path (like “C:/Users/hafiznij/Documents/GitHub/r_tutorial/raw_data/london_marathon.rda” which will only work on my notebook, and only if my project stays in on this path."
  },
  {
    "objectID": "the_big_picture.html#take-a-look",
    "href": "the_big_picture.html#take-a-look",
    "title": "The big picture",
    "section": "",
    "text": "Now that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be View(), which will open the data set excel-style in a new window:\n\nView(winners)\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\nstr(winners)\n\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Category   : chr [1:165] \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num [1:165] 1981 1981 1982 1983 1984 ...\n $ Athlete    : chr [1:165] \"Dick Beardsley (Tie)\" \"Inge Simonsen (Tie)\" \"Hugh Jones\" \"Mike Gratton\" ...\n $ Nationality: chr [1:165] \"United States\" \"Norway\" \"United Kingdom\" \"United Kingdom\" ...\n $ ID         : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n\n\nOn the left we can see the columns of this data.frame, named Category, Year, Athlete, Nationality and ID. On the right we see the first values in each column, for example 1981, 1981, 1982 etc … in the Year-column."
  },
  {
    "objectID": "the_big_picture.html#data-wrangling",
    "href": "the_big_picture.html#data-wrangling",
    "title": "The big picture",
    "section": "",
    "text": "Now, lets do something with this data. We want to answer the question if people have gotten faster at running marathons over that last 40 years. Sadly, the finishing times are not saved in this data set, but in another one named times.rda. So we need a way to combine them both, so we can run our analysis on the data.\nExercise: Download the second data set called “times.rda” and load it into R on your own.\n\n\nLet’s take a quick look at that one as well:\n\nstr(times)\n\ntibble [165 × 5] (S3: tbl_df/tbl/data.frame)\n $ Time   : 'times' num [1:165] 0.0915 0.0915 0.0899 0.0901 0.0902 ...\n  ..- attr(*, \"format\")= chr \"h:m:s\"\n $ Hours  : num [1:165] 2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes: num [1:165] 11 11 9 9 9 8 10 9 10 9 ...\n $ Seconds: num [1:165] 48 48 24 43 57 16 2 50 20 3 ...\n $ ID     : int [1:165] 1 NA 3 4 5 6 7 8 9 10 ...\n\n\nThe only column both data sets seem to have in commonn is the ID one. This means we have to merge our two data sets on that column, so rows which have the same value in that column will be merged together. However, we have a slight problem: the ID column contains missing values (called NA). We will not be able to match these rows over both data sets, so we have to remove them. But first, let’s take a look at how many those are:\n\nsum(is.na(times$ID))\n\n[1] 5\n\nsum(is.na(winners$ID))\n\n[1] 5\n\n\nDon’t worry to much about what that code is doing right now, we will take a closer look later on. We seem to have five NAs in both data sets. This isn’t a whole lot, so we will just remove them, but keep in mind dealing with NAs is a broad topic for itself with many different possible approaches.\n\ntimes &lt;- drop_na(data = times, ID)\nwinners &lt;- drop_na(data = winners, ID)\n\nHere, we use a function from the tidyr package (which we installed among others when we installed the tidyverse) that removes all rows from the data that contain a NA in the ID column.\n\n\n\nNow we can merge:\n\nwinners_merged &lt;- merge(x = winners, \n                        y = times,\n                        by = \"ID\")\n\nWhat happens here? We take our two data sets, called winers and times and combine them on the column ID. Let’s take a look at the finished product:\n\nstr(winners_merged)\n\n'data.frame':   160 obs. of  9 variables:\n $ ID         : int  1 3 4 5 6 7 8 9 10 11 ...\n $ Category   : chr  \"Men\" \"Men\" \"Men\" \"Men\" ...\n $ Year       : num  1981 1982 1983 1984 1985 ...\n $ Athlete    : chr  \"Dick Beardsley (Tie)\" \"Hugh Jones\" \"Mike Gratton\" \"Charlie Spedding\" ...\n $ Nationality: chr  \"United States\" \"United Kingdom\" \"United Kingdom\" \"United Kingdom\" ...\n $ Time       : num  0.0915 0.0899 0.0901 0.0902 0.0891 ...\n $ Hours      : num  2 2 2 2 2 2 2 2 2 2 ...\n $ Minutes    : num  11 9 9 9 8 10 9 10 9 10 ...\n $ Seconds    : num  48 24 43 57 16 2 50 20 3 10 ...\n\n\nWe have merged the columns of the times data set onto the right the winners data.\n\n\n\nOne very important part of working with data in R is the subsetting of data. This means we select specific values from a data set.\nDivide by Category (Wheelchar vs. no wheelchair)\n\n\n\n\nwomen &lt;- winners[winners$Category == \"Women\", ]\n\n\nlm_rs &lt;- lm(Minutes_total ~ Year, women)\nsummary(lm_rs)\n\n# 614 min bei Year = 0, für jedes Jahr -0.23 Min weniger:\n# 614 + 2020 * -0.236\n\n\nplot(lm_rs)\n\n\nwinners$Minutes_total &lt;- winners$Hours * 60 + winners$Minutes"
  },
  {
    "objectID": "the_big_picture.html#plot-the-data",
    "href": "the_big_picture.html#plot-the-data",
    "title": "The big picture",
    "section": "",
    "text": "library(ggplot2)\nwinners %&gt;%\n  filter(Category %in% c(\"Men\", \"Women\")) %&gt;%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\nwinners %&gt;%\n  filter(Category %in% c(\"Wheelchair Men\", \"Wheelchair Women\")) %&gt;%\nggplot(data = ., aes(x = Year,\n                            y = Minutes_total,\n                     colour = Nationality,\n                     shape = Category)) +\n  geom_point()\n\n\n# Für die Übung. \n#install.packages(\"tidytuesdayR\")\nlibrary(tidytuesdayR)\ntuesdata &lt;- tidytuesdayR::tt_load('2022-08-16')"
  },
  {
    "objectID": "the_big_picture.html#conclusion",
    "href": "the_big_picture.html#conclusion",
    "title": "The big picture",
    "section": "",
    "text": "In this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in."
  },
  {
    "objectID": "setup.html#r",
    "href": "setup.html#r",
    "title": "What is R?",
    "section": "R",
    "text": "R"
  },
  {
    "objectID": "setup.html#rstudio",
    "href": "setup.html#rstudio",
    "title": "What is R?",
    "section": "RStudio",
    "text": "RStudio\n\nOptional: posit Cloud\nIn case you don’t use a notebook where you can install R and RStudio, or you don’t want to, you can use the posit Cloud service. It can be run in you browser, and provides the same functions and interface as if you were working with your own RStudio installation. And it’s free as well (at least 25 hours per month, but that should be more than enough for this workshop and probably for the following week).\n\nGo to posit Cloud.\nClick on GET STARTED.\nCreate an account (it’s free) and login.\nOn the upper right, click on New Project. This will create a new RStudio project, which you can use the same way as described in this tutorial.\n\n\n\nStructure of the RStudio interface\n\nScript Pane\n\n\nConsole\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n\nTadaa, we just wrote our first line of code."
  },
  {
    "objectID": "setup.html#workflow",
    "href": "setup.html#workflow",
    "title": "What is R?",
    "section": "Workflow",
    "text": "Workflow\n\nScripts\nWhen only coding in our console we quickly run into the question where to save our code for further evaluation. Therefore, we want to write all our code that is worth saving into a script.\n\n\nRStudio Projects\nOver time, it will become increasingly hard to organize all your files, working directories and workspaces in a reasonable manner. For this, RStudio Projects can be used (highly recommended).\n\n\nExercises\n\nCreate a new folder for this tutorial, where all your files will go.\nCreate a new RStudio project and open it. Got to File - New Project - Existing Directory and select the path of the folder you created in step 1.\nCreate a new R Script by clicking on File - New File - R Script. Save it in you folder.\nTipp: Within your project folder create a folder named R, where all your R Scripts will go. You can do the same for data, plots etc. later on. This will help you to structure your working directory."
  },
  {
    "objectID": "setup.html#about-this-workshop",
    "href": "setup.html#about-this-workshop",
    "title": "What is R?",
    "section": "About this workshop",
    "text": "About this workshop\nThis workshop will use a tutorial package (you will learn more about packages later) that can be run from within R and will provide interactive exercises. For now, please install that tutorial package by typing (and evaluating) the following code into your newly created R Script:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\n\nFor each chapter, there will be a short theory part. Most of the exercises can be run interactively with the tutoR package, but some will encourage you to use the RStudio environment, to get more familiar with it.\nFeel free to use any resources at you disposal to solve the exercises. That’s how you would also do it in real live. Just make sure you understand why your solution works (or why it doesn’t)."
  },
  {
    "objectID": "subsetting.html",
    "href": "subsetting.html",
    "title": "Subsetting data",
    "section": "",
    "text": "Please take a look at the different data structures in R if you are not familiar with them, before you start with this chapter.\nNow that we know how to store data in different formats, we also need to talk about how we can extract data from our data structures.\n\n\nExtracting elements from vectors is pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets:\n\nvec_char &lt;- c(\"Jess\", \"Jane\", \"Joe\", \"Alex\")\nvec_char[2]\n\n[1] \"Jane\"\n\n\nOf course we can also do that for multiple elements:\n\nvec_char[c(2,3,4)]\n\n[1] \"Jane\" \"Joe\"  \"Alex\"\n\n## Or, less to write:\nvec_char[2:4]\n\n[1] \"Jane\" \"Joe\"  \"Alex\"\n\n\nAnother way would be to provide a logical vector, which defines for each position, if we want to extract the element or not:\n\nvec_char[c(TRUE, FALSE, TRUE, FALSE)]\n\n[1] \"Jess\" \"Joe\" \n\n\nThis will come in handy later on, when we want to extract rows from data frames by different conditions, so let’s take a closer look in Logical comparisons\n\n\n\nWe will look at two ways to extract rows by conditions from data frames."
  },
  {
    "objectID": "subsetting.html#vectors",
    "href": "subsetting.html#vectors",
    "title": "Subsetting data",
    "section": "",
    "text": "Extracting elements from vectors is pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets:\n\nvec_char &lt;- c(\"Jess\", \"Jane\", \"Joe\", \"Alex\")\nvec_char[2]\n\n[1] \"Jane\"\n\n\nOf course we can also do that for multiple elements:\n\nvec_char[c(2,3,4)]\n\n[1] \"Jane\" \"Joe\"  \"Alex\"\n\n## Or, less to write:\nvec_char[2:4]\n\n[1] \"Jane\" \"Joe\"  \"Alex\"\n\n\nAnother way would be to provide a logical vector, which defines for each position, if we want to extract the element or not:\n\nvec_char[c(TRUE, FALSE, TRUE, FALSE)]\n\n[1] \"Jess\" \"Joe\" \n\n\nThis will come in handy later on, when we want to extract rows from data frames by different conditions, so let’s take a closer look in Logical comparisons"
  },
  {
    "objectID": "subsetting.html#data-frames",
    "href": "subsetting.html#data-frames",
    "title": "Subsetting data",
    "section": "",
    "text": "We will look at two ways to extract rows by conditions from data frames."
  },
  {
    "objectID": "data_structures.html",
    "href": "data_structures.html",
    "title": "Data structures",
    "section": "",
    "text": "Please take a look at the different data types that exist in R, if you are not familiar with them, before continuing with this chapter.\nThere are five main data structures in R which differ on their dimensions (one dimension, two dimensions, n dimensions) and the type of the elements they are containing (same type, different types):1\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1d\natomic vector\nlist\n\n\n2d\nmatrix\ndata.frame\n\n\nnd\narray\n\n\n\n\n\nLet’s take a closer look at each one of them:\n\n\nAtomic vectors (from hereon only called vectors) contain elements of only the same type:\n\nnum_vec &lt;- c(2023, 8, 8)\nnum_vec\n\n[1] 2023    8    8\n\nchar_vec &lt;- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n\nlog_vec &lt;- c(TRUE, FALSE)\nlog_vec\n\n[1]  TRUE FALSE\n\n\nThe c() stands for combine, or concatenate, and is the basic function for building a vector out of single elements.\n\n\n\nA matrix can, similar to a vector, only contain elements of the same type. But, unlike a vector, it has two dimensions:\n\nnum_matrix &lt;- matrix(c(1, 2, 3, 3, 4, 1), nrow = 2)\nnum_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    3    4\n[2,]    2    3    1\n\nchar_matrix &lt;- matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)\nchar_matrix\n\n     [,1] [,2]\n[1,] \"a\"  \"c\" \n[2,] \"b\"  \"d\" \n\n\n\n\n\n\n\n\nA data frame is, like a matrix, two dimensional, but, unlike a matrix, it can store elements of different types. It is the closest to data tables you might know from excel. One important point: In each column, we can only store data of the same type.\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extra = c(3.5, 2, 4.5, 4.2)\n                      )\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n\nA special type of data frames are the so called tibbles. Tibbles are a modern version of data frames and the standard data frame type of the tidyverse, as they have some advantageous characteristics. So don’t be confused if you run into them, in general they behave like data frames.\n\n\n\n\nA list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\npersonality_rating &lt;- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n\n\nHere, we define the list personality_rating, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type."
  },
  {
    "objectID": "data_structures.html#vector",
    "href": "data_structures.html#vector",
    "title": "Data structures",
    "section": "",
    "text": "Atomic vectors (from hereon only called vectors) contain elements of only the same type:\n\nnum_vec &lt;- c(2023, 8, 8)\nnum_vec\n\n[1] 2023    8    8\n\nchar_vec &lt;- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n\nlog_vec &lt;- c(TRUE, FALSE)\nlog_vec\n\n[1]  TRUE FALSE\n\n\nThe c() stands for combine, or concatenate, and is the basic function for building a vector out of single elements."
  },
  {
    "objectID": "data_structures.html#matrix",
    "href": "data_structures.html#matrix",
    "title": "Data structures",
    "section": "",
    "text": "A matrix can, similar to a vector, only contain elements of the same type. But, unlike a vector, it has two dimensions:\n\nnum_matrix &lt;- matrix(c(1, 2, 3, 3, 4, 1), nrow = 2)\nnum_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    3    4\n[2,]    2    3    1\n\nchar_matrix &lt;- matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2)\nchar_matrix\n\n     [,1] [,2]\n[1,] \"a\"  \"c\" \n[2,] \"b\"  \"d\""
  },
  {
    "objectID": "data_structures.html#data-frame",
    "href": "data_structures.html#data-frame",
    "title": "Data structures",
    "section": "",
    "text": "A data frame is, like a matrix, two dimensional, but, unlike a matrix, it can store elements of different types. It is the closest to data tables you might know from excel. One important point: In each column, we can only store data of the same type.\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extra = c(3.5, 2, 4.5, 4.2)\n                      )\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n\nA special type of data frames are the so called tibbles. Tibbles are a modern version of data frames and the standard data frame type of the tidyverse, as they have some advantageous characteristics. So don’t be confused if you run into them, in general they behave like data frames."
  },
  {
    "objectID": "data_structures.html#list",
    "href": "data_structures.html#list",
    "title": "Data structures",
    "section": "",
    "text": "A list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\npersonality_rating &lt;- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n\n\nHere, we define the list personality_rating, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type."
  },
  {
    "objectID": "data_structures.html#footnotes",
    "href": "data_structures.html#footnotes",
    "title": "Data structures",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTable from Advanced R.↩︎"
  }
]