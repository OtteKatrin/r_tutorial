[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "In case you don’t use a notebook where you can install R and RStudio, or you don’t want to, you can use the posit Cloud service. It can be run in you browser, and provides the same functions and interface as if you were working with your own RStudio installation. And it’s free as well (at least 25 hours per month, but that should be more than enough for this workshop and probably for the following week).\n\nGo to posit Cloud.\nClick on GET STARTED.\nCreate an account (it’s free) and login.\nOn the upper right, click on New Project. This will create a new RStudio project, which you can use the same way as described in this tutorial.\n\n\n\n\n\n\n\n\n\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n\nTadaa, we just wrote our first line of code."
  },
  {
    "objectID": "setup.html#rstudio",
    "href": "setup.html#rstudio",
    "title": "Setup",
    "section": "",
    "text": "In case you don’t use a notebook where you can install R and RStudio, or you don’t want to, you can use the posit Cloud service. It can be run in you browser, and provides the same functions and interface as if you were working with your own RStudio installation. And it’s free as well (at least 25 hours per month, but that should be more than enough for this workshop and probably for the following week).\n\nGo to posit Cloud.\nClick on GET STARTED.\nCreate an account (it’s free) and login.\nOn the upper right, click on New Project. This will create a new RStudio project, which you can use the same way as described in this tutorial.\n\n\n\n\n\n\n\n\n\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n\nTadaa, we just wrote our first line of code."
  },
  {
    "objectID": "setup.html#workflow",
    "href": "setup.html#workflow",
    "title": "Setup",
    "section": "Workflow",
    "text": "Workflow\n\nScripts\nWhen only coding in our console we quickly run into the question where to save our code for further evaluation. Therefore, we want to write all our code that is worth saving into a script.\n\n\nRStudio Projects\nOver time, it will become increasingly hard to organize all your files, working directories and workspaces in a reasonable manner. For this, RStudio Projects can be used (highly recommended).\n\n\nExercises\n\nCreate a new folder for this tutorial, where all your files will go.\nCreate a new RStudio project and open it. Got to File - New Project - Existing Directory and select the path of the folder you created in step 1.\nCreate a new R Script by clicking on File - New File - R Script. Save it in you folder.\nTipp: Within your project folder create a folder named R, where all your R Scripts will go. You can do the same for data, plots etc. later on. This will help you to structure your working directory."
  },
  {
    "objectID": "setup.html#about-this-workshop",
    "href": "setup.html#about-this-workshop",
    "title": "Setup",
    "section": "About this workshop",
    "text": "About this workshop\nThis workshop will use a tutorial package (you will learn more about packages later) that can be run from within R and will provide interactive exercises. For now, please install that tutorial package by typing (and evaluating) the following code into your newly created R Script:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"nickhaf/tutoR\")\n\nFor each chapter, there will be a short theory part. Most of the exercises can be run interactively with the tutoR package, but some will encourage you to use the RStudio environment, to get more familiar with it.\nFeel free to use any resources at you disposal to solve the exercises. That’s how you would also do it in real live. Just make sure you understand why your solution works (or why it doesn’t)."
  },
  {
    "objectID": "the_big_picture.html",
    "href": "the_big_picture.html",
    "title": "The big picture",
    "section": "",
    "text": "Now that we have completed our set up, let’s dive right into programming with R. In this chapter, we will go through a “mini-project”, which follows a typical workflow when working with data in R. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters, we will go into a little bit more depth for each topic. If you want to have more in depth information instead of following the whole workflow first, you can also skip this chapter and jump to the chapters and exercises you are interested in. But make sure to do the final exercise, to test you R proficiency in the end.\n\n\nPackages are extensions to the base R you get by default. We already installed our first packages in About this workshop. Let’s keep doing that and install the following package as well:\n\ninstall.packages(\"tidyverse\")\n\nThe tidyverse is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the tidyverse.\nJust by installing the packages, we can’t use them. We also have to load them into our R session:\n\nlibrary(tidyverse)\n\n\n\n\nData is loaded into R so you can work with it. For this chapter, we are going to use the data set babynames, which we can find on the tidytuesday site. Because it is a .csv file, we have to install the additional package readr before we can read it:\n\ninstall.packages(\"readr\")\nlibrary(readr)\n\nNo we can load the data:\n\nbabynames &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-22/babynames.csv')\nbabynames &lt;- as.data.frame(babynames)\n\nYes, we can read in .csv data simply by using an URL if provided. There are many different data formats and ways to load data, refer to load data for more information.\nThe above code will load the data into R and assigning it the name babynames by using the &lt;-. You can see the data popping up in your Environment pane on the upper right. Don’t worry about as.data.frame() function. It’s not really relevant right now.\n\n\n\nNow that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be View(), which will open the data set excel-style in a new window:\n\nView(babynames)\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\nstr(babynames)\n\nOn the left we can see the columns of this data.frame, named year, sex, names, n and prop. On the right we see the first values in each column, for example 1880, 1980, 1980 etc … in the year-column.\n\n\n\nNow, lets do something with this data. We want to look at the most common name in every year and make a nice plot out of it. Sadly the data is not complete. The n is missing (ok, i split it up for illustrational purposes). When starting to work with data it is always a good idea to look at missing values, so let’s do that quickly:\n\n\n\n\n\n\nSplit data name and n by an ID.\n\n\nOne very important part of working with data in R is the subsetting of data. This means we select specific values from a data set.\n\n\n\n\n\n\n\nThis section is more additional and not really necessary for the other workshops. However, i think it is a great way to show you the beauty of plotting in R, so here it goes (make sure you worked on the other concepts first).\n\n\n\nIn this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in.\nFoto von Mick Haupt auf Unsplash\n\n\n\n\n# Für die Übung. \n#install.packages(\"tidytuesdayR\")\nlibrary(tidytuesdayR)\ntuesdata &lt;- tidytuesdayR::tt_load('2022-08-16')"
  },
  {
    "objectID": "the_big_picture.html#packages",
    "href": "the_big_picture.html#packages",
    "title": "The big picture",
    "section": "",
    "text": "Packages are extensions to the base R you get by default. We already installed our first packages in About this workshop. Let’s keep doing that and install the following package as well:\n\ninstall.packages(\"tidyverse\")\n\nThe tidyverse is a collection of packages following a common philosophy, and facilitate many aspects of coding in R, for example data wrangling and plotting. We will use both functions from base R and from the tidyverse.\nJust by installing the packages, we can’t use them. We also have to load them into our R session:\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "the_big_picture.html#load-data",
    "href": "the_big_picture.html#load-data",
    "title": "The big picture",
    "section": "",
    "text": "Data is loaded into R so you can work with it. For this chapter, we are going to use the data set babynames, which we can find on the tidytuesday site. Because it is a .csv file, we have to install the additional package readr before we can read it:\n\ninstall.packages(\"readr\")\nlibrary(readr)\n\nNo we can load the data:\n\nbabynames &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-22/babynames.csv')\nbabynames &lt;- as.data.frame(babynames)\n\nYes, we can read in .csv data simply by using an URL if provided. There are many different data formats and ways to load data, refer to load data for more information.\nThe above code will load the data into R and assigning it the name babynames by using the &lt;-. You can see the data popping up in your Environment pane on the upper right. Don’t worry about as.data.frame() function. It’s not really relevant right now."
  },
  {
    "objectID": "the_big_picture.html#take-a-look",
    "href": "the_big_picture.html#take-a-look",
    "title": "The big picture",
    "section": "",
    "text": "Now that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be View(), which will open the data set excel-style in a new window:\n\nView(babynames)\n\nEspecially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:\n\nstr(babynames)\n\nOn the left we can see the columns of this data.frame, named year, sex, names, n and prop. On the right we see the first values in each column, for example 1880, 1980, 1980 etc … in the year-column."
  },
  {
    "objectID": "the_big_picture.html#data-wrangling",
    "href": "the_big_picture.html#data-wrangling",
    "title": "The big picture",
    "section": "",
    "text": "Now, lets do something with this data. We want to look at the most common name in every year and make a nice plot out of it. Sadly the data is not complete. The n is missing (ok, i split it up for illustrational purposes). When starting to work with data it is always a good idea to look at missing values, so let’s do that quickly:"
  },
  {
    "objectID": "the_big_picture.html#merging",
    "href": "the_big_picture.html#merging",
    "title": "The big picture",
    "section": "",
    "text": "Split data name and n by an ID.\n\n\nOne very important part of working with data in R is the subsetting of data. This means we select specific values from a data set."
  },
  {
    "objectID": "the_big_picture.html#plot-the-data",
    "href": "the_big_picture.html#plot-the-data",
    "title": "The big picture",
    "section": "",
    "text": "This section is more additional and not really necessary for the other workshops. However, i think it is a great way to show you the beauty of plotting in R, so here it goes (make sure you worked on the other concepts first)."
  },
  {
    "objectID": "the_big_picture.html#conclusion",
    "href": "the_big_picture.html#conclusion",
    "title": "The big picture",
    "section": "",
    "text": "In this tutorial we learned, that R is a flexible tool for editing and plotting data. Of course, we barely scratched the surface. Therefore, we want to dive a bit deeper into each step. Either follow the course, or navigate to the chapters you are most interested in.\nFoto von Mick Haupt auf Unsplash"
  },
  {
    "objectID": "the_big_picture.html#final-exercise",
    "href": "the_big_picture.html#final-exercise",
    "title": "The big picture",
    "section": "",
    "text": "# Für die Übung. \n#install.packages(\"tidytuesdayR\")\nlibrary(tidytuesdayR)\ntuesdata &lt;- tidytuesdayR::tt_load('2022-08-16')"
  },
  {
    "objectID": "Manipulation.html",
    "href": "Manipulation.html",
    "title": "Merging",
    "section": "",
    "text": "Merging\nSuppose we want to look at the winners by continent (see last chapter for the data set). In this case, we will have to add a list assigning each Nationality a continent. We can easily find such a list online, for example at ourworldindata.org. I have already downloaded the .csv, and we have already loaded it into R in the exercise of load data:\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\ncontinents &lt;- read.csv(\n  file = \"./raw_data/continents.csv\",\n  sep = \";\"\n)\n\nTo merge two data frames that include information that belongs together, we need a common column, on which we can combine them. In our case, this is the column containing the country, but they are named differently. No problem, we can define which columns should be taken from which data frame for merging:\n\nwinners_continents &lt;- merge(\n  x = winners,\n  y = continents,\n  by.x = \"Nationality\",\n  by.y = \"Entity\"\n)\nhead(winners_continents)\n\n  Nationality         Category Year.x            Athlete Hours Minutes Seconds\n1   Australia   Wheelchair Men   2009      Kurt Fearnley     1      28      57\n2   Australia   Wheelchair Men   2013      Kurt Fearnley     1      31      29\n3   Australia Wheelchair Women   2018 Madison de Rozario     1      42      58\n4     Belgium   Wheelchair Men   1993    George Vandamme     1      44      10\n5      Canada   Wheelchair Men   1988          Ted Vince     2       1      37\n6      Canada   Wheelchair Men   2010       Josh Cassidy     1      35      21\n  Code Year.y     Continent\n1  AUS   2015       Oceania\n2  AUS   2015       Oceania\n3  AUS   2015       Oceania\n4  BEL   2015        Europe\n5  CAN   2015 North America\n6  CAN   2015 North America\n\n\nGreat! Now the information that belongs together is stored together.\nIf the merging column(s) had the same name in both data sets, we wouldn’t have to specify them at all, the function can compare the column names automatically.\n\n\nNew columns\nAdding new columns to a data frame is pretty straight forward. We just define the column name, and then assign it some input. For example, we could be interested in calculating the seconds each person needed to finish, and add that as a new column:\n\nwinners_continents$Seconds_total &lt;- winners_continents$Hours * 60^2 + winners_continents$Minutes * 60 + winners_continents$Seconds\nhead(winners_continents)\n\n  Nationality         Category Year.x            Athlete Hours Minutes Seconds\n1   Australia   Wheelchair Men   2009      Kurt Fearnley     1      28      57\n2   Australia   Wheelchair Men   2013      Kurt Fearnley     1      31      29\n3   Australia Wheelchair Women   2018 Madison de Rozario     1      42      58\n4     Belgium   Wheelchair Men   1993    George Vandamme     1      44      10\n5      Canada   Wheelchair Men   1988          Ted Vince     2       1      37\n6      Canada   Wheelchair Men   2010       Josh Cassidy     1      35      21\n  Code Year.y     Continent Seconds_total\n1  AUS   2015       Oceania          5337\n2  AUS   2015       Oceania          5489\n3  AUS   2015       Oceania          6178\n4  BEL   2015        Europe          6250\n5  CAN   2015 North America          7297\n6  CAN   2015 North America          5721\n\n\nOr, using the tidyverse with the help of mutate():\n\n\nlibrary(dplyr)\n\nwinners_continents &lt;- winners_continents %&gt;%\n  mutate(Minutes_total = winners_continents$Hours * 60 + winners_continents$Minutes * winners_continents$Seconds / 60)\nhead(winners_continents)\n\n  Nationality         Category Year.x            Athlete Hours Minutes Seconds\n1   Australia   Wheelchair Men   2009      Kurt Fearnley     1      28      57\n2   Australia   Wheelchair Men   2013      Kurt Fearnley     1      31      29\n3   Australia Wheelchair Women   2018 Madison de Rozario     1      42      58\n4     Belgium   Wheelchair Men   1993    George Vandamme     1      44      10\n5      Canada   Wheelchair Men   1988          Ted Vince     2       1      37\n6      Canada   Wheelchair Men   2010       Josh Cassidy     1      35      21\n  Code Year.y     Continent Seconds_total Minutes_total\n1  AUS   2015       Oceania          5337      86.60000\n2  AUS   2015       Oceania          5489      74.98333\n3  AUS   2015       Oceania          6178     100.60000\n4  BEL   2015        Europe          6250      67.33333\n5  CAN   2015 North America          7297     120.61667\n6  CAN   2015 North America          5721      72.25000\n\n\n\nHold on! Both new columns seem to have missing values, which is an important concept which we haven’t talked about yet. So let’s do that quickly, and then merge!\n\n\nMissing values\nMissing values are denoted in R by NA (or NaN in some cases). They pretty strongly nullify a calculation - if one missing value is found somewhere along the line, the result will also be NA (if not specified otherwise):\n\nsum(c(4, 5, NA))\n\n[1] NA\n\n\nThat’s why our newly build columns include NAs: The column Hours already had some, and by adding with NAs we just produced new ones.\nTo check if values are NA, we can use is.na():\n\nis.na(winners_continents$Hours)\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n\n\nSome TRUEs, so there are missing values here. Let’s count them (Summing an logical vector counts the number of TRUE values.):\n\nsum(is.na(winners_continents$Hours))\n\n[1] 5\n\n\nWe seem to have 5 missings in this column. There are multiple different ways to deal with missings. For this tutorial, we just remove cases with missing values on the Hours variable:\n\nwinners_continents_na &lt;- winners_continents[!is.na(winners_continents$Hours), ]\n\nWhat happens here? Like always when filtering specific rows, we define a logical vector, which has a TRUE for all rows that have a missing on ID and a FALSE for all others (by using the ! operator, which inverts the boolean values - otherwise we would extract all rows with missing values in the Hours column):\n\n!is.na(winners_continents$Hours)\n\n  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [61] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [97] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[145]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[157]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n\n\nWe also assign a new name to the resulting data frame.\n\n\nifelse\nWe can also add new values conditionally, for example by using the ifelse() function. For example, let’s build a composite variable which summarizes whether the category was Whelchair or not:\n\nwinners_continents$Wheelchair &lt;- ifelse(\n  winners_continents$Category %in% c(\"Wheelchair Men\", \"Wheelchair Women\"),\n  yes = TRUE,\n  no = FALSE\n)\n\n\n\nwinners_continents &lt;- winners_continents %&gt;%\n  mutate(over_3_h = ifelse(\n    winners_continents$Hours &lt; 2,\n    yes = \"below\",\n    no  = \"over\"\n  ))\n\nwinners_continents\n\n       Nationality         Category Year.x                    Athlete Hours\n1        Australia   Wheelchair Men   2009              Kurt Fearnley     1\n2        Australia   Wheelchair Men   2013              Kurt Fearnley     1\n3        Australia Wheelchair Women   2018         Madison de Rozario     1\n4          Belgium   Wheelchair Men   1993            George Vandamme     1\n5           Canada   Wheelchair Men   1988                  Ted Vince     2\n6           Canada   Wheelchair Men   2010               Josh Cassidy     1\n7           Canada   Wheelchair Men   2020              Brent Lakatos     1\n8           Canada   Wheelchair Men   1992              Daniel Wesley     1\n9            China            Women   2007               Zhou Chunxiu     2\n10         Denmark Wheelchair Women   1990              Connie Hansen     2\n11         Denmark Wheelchair Women   1991              Connie Hansen     2\n12         Denmark              Men   1988           Henrik Jørgensen     2\n13        Ethiopia              Men   2020          Shura Kitata Tola     2\n14        Ethiopia              Men   2021                Sisay Lemma     2\n15        Ethiopia            Women   2022         Yalemzerf Yehualaw     2\n16        Ethiopia            Women   2015                Tigist Tufa     2\n17        Ethiopia              Men   2013             Tsegaye Kebede     2\n18        Ethiopia            Women   2010           Aselefech Mergia     2\n19        Ethiopia              Men   2010             Tsegaye Kebede     2\n20        Ethiopia            Women   2001               Derartu Tulu     2\n21        Ethiopia              Men   2003            Gezahegne Abera    NA\n22          France   Wheelchair Men   2003               Joël Jeannot     1\n23          France   Wheelchair Men   1991            Farid Amarouche     1\n24          France   Wheelchair Men   2001            Denis Lemeunier     1\n25         Germany            Women   2008            Irina Mikitenko     2\n26         Germany            Women   1993        Katrin Dörre-Heinig     2\n27         Germany            Women   1994        Katrin Dörre-Heinig     2\n28         Germany            Women   2009            Irina Mikitenko     2\n29         Germany            Women   1992        Katrin Dörre-Heinig     2\n30         Ireland Wheelchair Women   1985                Kay McShane     2\n31         Ireland            Women   1998        Catherina McKiernan     2\n32         Ireland   Wheelchair Men   1984                Kevin Breen     2\n33         Ireland Wheelchair Women   1984                Kay McShane     3\n34         Ireland Wheelchair Women   1986                Kay McShane     3\n35         Ireland   Wheelchair Men   1986             Gerry O'Rourke     2\n36           Italy Wheelchair Women   2005       Francesca Porcellato     1\n37           Italy Wheelchair Women   2006       Francesca Porcellato     1\n38           Italy Wheelchair Women   2003       Francesca Porcellato     2\n39           Italy Wheelchair Women   2004       Francesca Porcellato     2\n40           Japan              Men   1986             Toshihiko Seko     2\n41           Japan Wheelchair Women   2010            Wakako Tsuchida     1\n42           Japan              Men   1987           Hiromi Taniguchi     2\n43           Kenya              Men   2008                 Martin Lel     2\n44           Kenya            Women   2004             Margaret Okayo     2\n45           Kenya              Men   2009             Samuel Wanjiru     2\n46           Kenya              Men   2011 Emmanuel Kipchirchir Mutai     2\n47           Kenya            Women   2018           Vivian Cheruiyot     2\n48           Kenya              Men   2022               Amos Kipruto     2\n49           Kenya            Women   1999           Joyce Chepchumba     2\n50           Kenya            Women   2000              Tegla Loroupe     2\n51           Kenya            Women   1997           Joyce Chepchumba     2\n52           Kenya              Men   2023              Kelvin Kiptum     2\n53           Kenya              Men   2007                 Martin Lel     2\n54           Kenya              Men   2006                 Felix Limo     2\n55           Kenya            Women   2016             Jemima Sumgong     2\n56           Kenya              Men   2012   Wilson Kipsang Kiprotich     2\n57           Kenya            Women   2019              Brigid Kosgei     2\n58           Kenya            Women   2021        Joyciline Jepkosgei     2\n59           Kenya              Men   1989          Douglas Wakiihuri     2\n60           Kenya              Men   2017             Daniel Wanjiru     2\n61           Kenya              Men   2014   Wilson Kipsang Kiprotich    NA\n62           Kenya            Women   2011     Mary Jepkosgei Keitany     2\n63           Kenya              Men   2019             Eliud Kipchoge     2\n64           Kenya              Men   2015             Eliud Kipchoge     2\n65           Kenya              Men   2018             Eliud Kipchoge     2\n66           Kenya            Women   2017     Mary Jepkosgei Keitany     2\n67           Kenya            Women   2020              Brigid Kosgei     2\n68           Kenya            Women   2013             Priscah Jeptoo     2\n69           Kenya              Men   2016             Eliud Kipchoge     2\n70           Kenya              Men   2004                Evans Rutto     2\n71           Kenya              Men   2005                 Martin Lel     2\n72           Kenya            Women   2012     Mary Jepkosgei Keitany     2\n73           Kenya            Women   2014              Edna Kiplagat     2\n74          Mexico   Wheelchair Men   2004               Saúl Mendoza     1\n75          Mexico              Men   1994             Dionicio Cerón     2\n76          Mexico   Wheelchair Men   2005               Saúl Mendoza     1\n77          Mexico              Men   1996             Dionicio Cerón     2\n78          Mexico              Men   1995             Dionicio Cerón     2\n79         Morocco              Men   1999      Abdelkader El Mouaziz     2\n80         Morocco              Men   2001      Abdelkader El Mouaziz     2\n81     Netherlands Wheelchair Women   2020            Nikita den Boer     1\n82     Netherlands            Women   2023               Sifan Hassan     2\n83          Norway              Men   1981        Inge Simonsen (Tie)    NA\n84          Norway            Women   1984         Ingrid Kristiansen     2\n85          Norway            Women   1985         Ingrid Kristiansen     2\n86          Norway            Women   1986                Grete Waitz     2\n87          Norway            Women   1983                Grete Waitz     2\n88          Norway            Women   1988         Ingrid Kristiansen     2\n89          Norway            Women   1987         Ingrid Kristiansen     2\n90          Poland            Women   1990               Wanda Panfil     2\n91          Poland            Women   1995        Małgorzata Sobańska     2\n92        Portugal            Women   1991                  Rosa Mota     2\n93        Portugal              Men   1992              António Pinto     2\n94        Portugal              Men   1997              António Pinto     2\n95        Portugal              Men   2000              António Pinto     2\n96           Spain              Men   1998                 Abel Antón     2\n97          Sweden   Wheelchair Men   1990             Håkan Ericsson    NA\n98          Sweden Wheelchair Women   1997         Monica Wetterström     1\n99          Sweden Wheelchair Women   1999         Monica Wetterström     1\n100    Switzerland   Wheelchair Men   1995                 Heinz Frei     1\n101    Switzerland Wheelchair Women   2019              Manuela Schär     1\n102    Switzerland   Wheelchair Men   2021                 Marcel Hug     1\n103    Switzerland Wheelchair Women   2017              Manuela Schär     1\n104    Switzerland   Wheelchair Men   1999                 Heinz Frei     1\n105    Switzerland   Wheelchair Men   2016                 Marcel Hug     1\n106    Switzerland Wheelchair Women   2008                Sandra Graf     1\n107    Switzerland Wheelchair Women   2021              Manuela Schär     1\n108    Switzerland   Wheelchair Men   2014                 Marcel Hug     1\n109    Switzerland   Wheelchair Men   1998                 Heinz Frei     1\n110 United Kingdom              Men   1982                 Hugh Jones     2\n111 United Kingdom              Men   1984           Charlie Spedding     2\n112 United Kingdom              Men   1985                Steve Jones     2\n113 United Kingdom   Wheelchair Men   1994              David Holding     1\n114 United Kingdom Wheelchair Women   1992        Tanni Grey-Thompson     2\n115 United Kingdom   Wheelchair Men   1996              David Holding     1\n116 United Kingdom Wheelchair Women   1994        Tanni Grey-Thompson     2\n117 United Kingdom              Men   1993              Eamonn Martin     2\n118 United Kingdom   Wheelchair Men   1989              David Holding     1\n119 United Kingdom            Women   2005            Paula Radcliffe     2\n120 United Kingdom Wheelchair Women   1993                  Rose Hill     2\n121 United Kingdom   Wheelchair Men   2006                 David Weir     1\n122 United Kingdom   Wheelchair Men   2007                 David Weir     1\n123 United Kingdom            Women   1996               Liz McColgan     2\n124 United Kingdom Wheelchair Women   1983               Denise Smith     4\n125 United Kingdom   Wheelchair Men   1997              David Holding     1\n126 United Kingdom   Wheelchair Men   2011                 David Weir     1\n127 United Kingdom Wheelchair Women   2000               Sarah Piercy     2\n128 United Kingdom   Wheelchair Men   2000             Kevin Papworth     1\n129 United Kingdom            Women   1989            Véronique Marot     2\n130 United Kingdom            Women   2003            Paula Radcliffe     2\n131 United Kingdom   Wheelchair Men   2002                 David Weir     1\n132 United Kingdom   Wheelchair Men   2017                 David Weir     1\n133 United Kingdom   Wheelchair Men   2018                 David Weir     1\n134 United Kingdom              Men   1983               Mike Gratton     2\n135 United Kingdom            Women   1981                Joyce Smith     2\n136 United Kingdom            Women   1982                Joyce Smith     2\n137 United Kingdom Wheelchair Women   1996        Tanni Grey-Thompson     2\n138 United Kingdom   Wheelchair Men   1983               Gordon Perry     3\n139 United Kingdom Wheelchair Women   1998        Tanni Grey-Thompson     2\n140 United Kingdom   Wheelchair Men   1985               Chris Hallam     2\n141 United Kingdom              Men   1990            Allister Hutton     2\n142 United Kingdom            Women   2002            Paula Radcliffe     2\n143 United Kingdom Wheelchair Women   1989            Josie Cichockyj     3\n144 United Kingdom Wheelchair Women   1988             Karen Davidson     2\n145 United Kingdom Wheelchair Women   1995                  Rose Hill     2\n146 United Kingdom   Wheelchair Men   2008                 David Weir     1\n147 United Kingdom Wheelchair Women   2001        Tanni Grey-Thompson     2\n148 United Kingdom Wheelchair Women   2007               Shelly Woods     1\n149 United Kingdom Wheelchair Women   2012               Shelly Woods     1\n150 United Kingdom   Wheelchair Men   2012                 David Weir     1\n151 United Kingdom Wheelchair Women   2002        Tanni Grey-Thompson     2\n152 United Kingdom   Wheelchair Men   1987               Chris Hallam     2\n153 United Kingdom Wheelchair Women   1987             Karen Davidson     2\n154  United States              Men   1981       Dick Beardsley (Tie)     2\n155  United States Wheelchair Women   2016           Tatyana McFadden     1\n156  United States Wheelchair Women   2009             Amanda McGrory     1\n157  United States Wheelchair Women   2011             Amanda McGrory     1\n158  United States              Men   2002          Khalid Khannouchi     2\n159  United States Wheelchair Women   2013           Tatyana McFadden     1\n160  United States   Wheelchair Men   2019           Daniel Romanchuk     1\n161  United States Wheelchair Women   2015           Tatyana McFadden     1\n162  United States   Wheelchair Men   2015                Josh George     1\n163  United States            Women   2006               Deena Kastor     2\n164  United States Wheelchair Women   2014           Tatyana McFadden    NA\n    Minutes Seconds Code Year.y     Continent Seconds_total Minutes_total\n1        28      57  AUS   2015       Oceania          5337      86.60000\n2        31      29  AUS   2015       Oceania          5489      74.98333\n3        42      58  AUS   2015       Oceania          6178     100.60000\n4        44      10  BEL   2015        Europe          6250      67.33333\n5         1      37  CAN   2015 North America          7297     120.61667\n6        35      21  CAN   2015 North America          5721      72.25000\n7        36       4  CAN   2015 North America          5764      62.40000\n8        51      42  CAN   2015 North America          6702      95.70000\n9        20      38  CHN   2015          Asia          8438     132.66667\n10       10      25  DNK   2015        Europe          7825     124.16667\n11        4      40  DNK   2015        Europe          7480     122.66667\n12       10      20  DNK   2015        Europe          7820     123.33333\n13        5      58  ETH   2015        Africa          7558     124.83333\n14        4       1  ETH   2015        Africa          7441     120.06667\n15       17      26  ETH   2015        Africa          8246     127.36667\n16       23      21  ETH   2015        Africa          8601     128.05000\n17        6       4  ETH   2015        Africa          7564     120.40000\n18       22      38  ETH   2015        Africa          8558     133.93333\n19        5      19  ETH   2015        Africa          7519     121.58333\n20       23      57  ETH   2015        Africa          8637     141.85000\n21        7      56  ETH   2015        Africa            NA            NA\n22       32       2  FRA   2015        Europe          5522      61.06667\n23       52      52  FRA   2015        Europe          6772     105.06667\n24       42      37  FRA   2015        Europe          6157      85.90000\n25       24      14  DEU   2015        Europe          8654     125.60000\n26       27       9  DEU   2015        Europe          8829     124.05000\n27       32      34  DEU   2015        Europe          9154     138.13333\n28       22      11  DEU   2015        Europe          8531     124.03333\n29       29      39  DEU   2015        Europe          8979     138.85000\n30       47      12  IRL   2015        Europe         10032     129.40000\n31       26      26  IRL   2015        Europe          8786     131.26667\n32       38      40  IRL   2015        Europe          9520     145.33333\n33       10       4  IRL   2015        Europe         11404     180.66667\n34        2      40  IRL   2015        Europe         10960     181.33333\n35       26      38  IRL   2015        Europe          8798     136.46667\n36       57       0  ITA   2015        Europe          7020      60.00000\n37       59      57  ITA   2015        Europe          7197     116.05000\n38        4      21  ITA   2015        Europe          7461     121.40000\n39        4      58  ITA   2015        Europe          7498     123.86667\n40       10       2  JPN   2015          Asia          7802     120.33333\n41       52      33  JPN   2015          Asia          6753      88.60000\n42        9      50  JPN   2015          Asia          7790     127.50000\n43        5      15  KEN   2015        Africa          7515     121.25000\n44       22      35  KEN   2015        Africa          8555     132.83333\n45        5      10  KEN   2015        Africa          7510     120.83333\n46        4      40  KEN   2015        Africa          7480     122.66667\n47       18      31  KEN   2015        Africa          8311     129.30000\n48        4      39  KEN   2015        Africa          7479     122.60000\n49       23      22  KEN   2015        Africa          8602     128.43333\n50       24      33  KEN   2015        Africa          8673     133.20000\n51       26      51  KEN   2015        Africa          8811     142.10000\n52        1      25  KEN   2015        Africa          7285     120.41667\n53        7      41  KEN   2015        Africa          7661     124.78333\n54        6      39  KEN   2015        Africa          7599     123.90000\n55       22      58  KEN   2015        Africa          8578     141.26667\n56        4      44  KEN   2015        Africa          7484     122.93333\n57       18      20  KEN   2015        Africa          8300     126.00000\n58       17      43  KEN   2015        Africa          8263     132.18333\n59        9       3  KEN   2015        Africa          7743     120.45000\n60        5      48  KEN   2015        Africa          7548     124.00000\n61        4      29  KEN   2015        Africa            NA            NA\n62       19      19  KEN   2015        Africa          8359     126.01667\n63        2      37  KEN   2015        Africa          7357     121.23333\n64        4      42  KEN   2015        Africa          7482     122.80000\n65        4      17  KEN   2015        Africa          7457     121.13333\n66       17       1  KEN   2015        Africa          8221     120.28333\n67       18      58  KEN   2015        Africa          8338     137.40000\n68       20      15  KEN   2015        Africa          8415     125.00000\n69        3       5  KEN   2015        Africa          7385     120.25000\n70        6      18  KEN   2015        Africa          7578     121.80000\n71        7      35  KEN   2015        Africa          7655     124.08333\n72       18      37  KEN   2015        Africa          8317     131.10000\n73       20      21  KEN   2015        Africa          8421     127.00000\n74       36      56  MEX   2015 North America          5816      93.60000\n75        8      53  MEX   2015 North America          7733     127.06667\n76       35      51  MEX   2015 North America          5751      89.75000\n77       10       0  MEX   2015 North America          7800     120.00000\n78        8      30  MEX   2015 North America          7710     124.00000\n79        7      57  MAR   2015        Africa          7677     126.65000\n80        7       9  MAR   2015        Africa          7629     121.05000\n81       40       7  NLD   2015        Europe          6007      64.66667\n82       18      33  NLD   2015        Europe          8313     129.90000\n83       11      48  NOR   2015        Europe            NA            NA\n84       24      26  NOR   2015        Europe          8666     130.40000\n85       21       6  NOR   2015        Europe          8466     122.10000\n86       24      54  NOR   2015        Europe          8694     141.60000\n87       25      29  NOR   2015        Europe          8729     132.08333\n88       25      41  NOR   2015        Europe          8741     137.08333\n89       22      48  NOR   2015        Europe          8568     137.60000\n90       26      31  POL   2015        Europe          8791     133.43333\n91       27      43  POL   2015        Europe          8863     139.35000\n92       26      14  PRT   2015        Europe          8774     126.06667\n93       10       2  PRT   2015        Europe          7802     120.33333\n94        7      55  PRT   2015        Europe          7675     126.41667\n95        6      36  PRT   2015        Europe          7596     123.60000\n96        7      57  ESP   2015        Europe          7677     126.65000\n97       57      12  SWE   2015        Europe            NA            NA\n98       49       9  SWE   2015        Europe          6549      67.35000\n99       57      38  SWE   2015        Europe          7058      96.10000\n100      39      14  CHE   2015        Europe          5954      69.10000\n101      44       9  CHE   2015        Europe          6249      66.60000\n102      26      27  CHE   2015        Europe          5187      71.70000\n103      39      57  CHE   2015        Europe          5997      97.05000\n104      35      27  CHE   2015        Europe          5727      75.75000\n105      35      19  CHE   2015        Europe          5719      71.08333\n106      48       4  CHE   2015        Europe          6484      63.20000\n107      39      52  CHE   2015        Europe          5992      93.80000\n108      32      41  CHE   2015        Europe          5561      81.86667\n109      35      18  CHE   2015        Europe          5718      70.50000\n110       9      24  GBR   2015        Europe          7764     123.60000\n111       9      57  GBR   2015        Europe          7797     128.55000\n112       8      16  GBR   2015        Europe          7696     122.13333\n113      46       6  GBR   2015        Europe          6366      64.60000\n114      17      23  GBR   2015        Europe          8243     126.51667\n115      43      48  GBR   2015        Europe          6228      94.40000\n116       8      26  GBR   2015        Europe          7706     123.46667\n117      10      50  GBR   2015        Europe          7850     128.33333\n118      59      31  GBR   2015        Europe          7171      90.48333\n119      17      42  GBR   2015        Europe          8262     131.90000\n120       3       5  GBR   2015        Europe          7385     120.25000\n121      29      48  GBR   2015        Europe          5388      83.20000\n122      30      51  GBR   2015        Europe          5451      85.50000\n123      27      54  GBR   2015        Europe          8874     144.30000\n124      29       3  GBR   2015        Europe         16143     241.45000\n125      42      15  GBR   2015        Europe          6135      70.50000\n126      30       5  GBR   2015        Europe          5405      62.50000\n127      23      30  GBR   2015        Europe          8610     131.50000\n128      41      50  GBR   2015        Europe          6110      94.16667\n129      25      56  GBR   2015        Europe          8756     143.33333\n130      15      25  GBR   2015        Europe          8125     126.25000\n131      39      44  GBR   2015        Europe          5984      88.60000\n132      31       6  GBR   2015        Europe          5466      63.10000\n133      31      15  GBR   2015        Europe          5475      67.75000\n134       9      43  GBR   2015        Europe          7783     126.45000\n135      29      57  GBR   2015        Europe          8997     147.55000\n136      29      43  GBR   2015        Europe          8983     140.78333\n137       0      10  GBR   2015        Europe          7210     120.00000\n138      20       7  GBR   2015        Europe         12007     182.33333\n139       2       1  GBR   2015        Europe          7321     120.03333\n140      19      53  GBR   2015        Europe          8393     136.78333\n141      10      10  GBR   2015        Europe          7810     121.66667\n142      18      56  GBR   2015        Europe          8336     136.80000\n143       3      54  GBR   2015        Europe         11034     182.70000\n144      41      45  GBR   2015        Europe          9705     150.75000\n145      17       2  GBR   2015        Europe          8222     120.56667\n146      33      56  GBR   2015        Europe          5636      90.80000\n147      13      55  GBR   2015        Europe          8035     131.91667\n148      50      40  GBR   2015        Europe          6640      93.33333\n149      49      10  GBR   2015        Europe          6550      68.16667\n150      32      26  GBR   2015        Europe          5546      73.86667\n151      22      51  GBR   2015        Europe          8571     138.70000\n152       8      34  GBR   2015        Europe          7714     124.53333\n153      45      30  GBR   2015        Europe          9930     142.50000\n154      11      48  USA   2015 North America          7908     128.80000\n155      44      14  USA   2015 North America          6254      70.26667\n156      50      39  USA   2015 North America          6639      92.50000\n157      46      31  USA   2015 North America          6391      83.76667\n158       5      38  USA   2015 North America          7538     123.16667\n159      46       2  USA   2015 North America          6362      61.53333\n160      33      37  USA   2015 North America          5617      80.35000\n161      41      14  USA   2015 North America          6074      69.56667\n162      31      31  USA   2015 North America          5491      76.01667\n163      19      35  USA   2015 North America          8375     131.08333\n164      45      12  USA   2015 North America            NA            NA\n    Wheelchair over_3_h\n1         TRUE    below\n2         TRUE    below\n3         TRUE    below\n4         TRUE    below\n5         TRUE     over\n6         TRUE    below\n7         TRUE    below\n8         TRUE    below\n9        FALSE     over\n10        TRUE     over\n11        TRUE     over\n12       FALSE     over\n13       FALSE     over\n14       FALSE     over\n15       FALSE     over\n16       FALSE     over\n17       FALSE     over\n18       FALSE     over\n19       FALSE     over\n20       FALSE     over\n21       FALSE     &lt;NA&gt;\n22        TRUE    below\n23        TRUE    below\n24        TRUE    below\n25       FALSE     over\n26       FALSE     over\n27       FALSE     over\n28       FALSE     over\n29       FALSE     over\n30        TRUE     over\n31       FALSE     over\n32        TRUE     over\n33        TRUE     over\n34        TRUE     over\n35        TRUE     over\n36        TRUE    below\n37        TRUE    below\n38        TRUE     over\n39        TRUE     over\n40       FALSE     over\n41        TRUE    below\n42       FALSE     over\n43       FALSE     over\n44       FALSE     over\n45       FALSE     over\n46       FALSE     over\n47       FALSE     over\n48       FALSE     over\n49       FALSE     over\n50       FALSE     over\n51       FALSE     over\n52       FALSE     over\n53       FALSE     over\n54       FALSE     over\n55       FALSE     over\n56       FALSE     over\n57       FALSE     over\n58       FALSE     over\n59       FALSE     over\n60       FALSE     over\n61       FALSE     &lt;NA&gt;\n62       FALSE     over\n63       FALSE     over\n64       FALSE     over\n65       FALSE     over\n66       FALSE     over\n67       FALSE     over\n68       FALSE     over\n69       FALSE     over\n70       FALSE     over\n71       FALSE     over\n72       FALSE     over\n73       FALSE     over\n74        TRUE    below\n75       FALSE     over\n76        TRUE    below\n77       FALSE     over\n78       FALSE     over\n79       FALSE     over\n80       FALSE     over\n81        TRUE    below\n82       FALSE     over\n83       FALSE     &lt;NA&gt;\n84       FALSE     over\n85       FALSE     over\n86       FALSE     over\n87       FALSE     over\n88       FALSE     over\n89       FALSE     over\n90       FALSE     over\n91       FALSE     over\n92       FALSE     over\n93       FALSE     over\n94       FALSE     over\n95       FALSE     over\n96       FALSE     over\n97        TRUE     &lt;NA&gt;\n98        TRUE    below\n99        TRUE    below\n100       TRUE    below\n101       TRUE    below\n102       TRUE    below\n103       TRUE    below\n104       TRUE    below\n105       TRUE    below\n106       TRUE    below\n107       TRUE    below\n108       TRUE    below\n109       TRUE    below\n110      FALSE     over\n111      FALSE     over\n112      FALSE     over\n113       TRUE    below\n114       TRUE     over\n115       TRUE    below\n116       TRUE     over\n117      FALSE     over\n118       TRUE    below\n119      FALSE     over\n120       TRUE     over\n121       TRUE    below\n122       TRUE    below\n123      FALSE     over\n124       TRUE     over\n125       TRUE    below\n126       TRUE    below\n127       TRUE     over\n128       TRUE    below\n129      FALSE     over\n130      FALSE     over\n131       TRUE    below\n132       TRUE    below\n133       TRUE    below\n134      FALSE     over\n135      FALSE     over\n136      FALSE     over\n137       TRUE     over\n138       TRUE     over\n139       TRUE     over\n140       TRUE     over\n141      FALSE     over\n142      FALSE     over\n143       TRUE     over\n144       TRUE     over\n145       TRUE     over\n146       TRUE    below\n147       TRUE     over\n148       TRUE    below\n149       TRUE    below\n150       TRUE    below\n151       TRUE     over\n152       TRUE     over\n153       TRUE     over\n154      FALSE     over\n155       TRUE    below\n156       TRUE    below\n157       TRUE    below\n158      FALSE     over\n159       TRUE    below\n160       TRUE    below\n161       TRUE    below\n162       TRUE    below\n163      FALSE     over\n164       TRUE     &lt;NA&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to this R workshop!\n\nWhat is R?\n\nR is a popular programming language for data manipulation, statistical data analyses and plotting of data.\nIt is open source, and has a big community, which facilitates the development of additional software packages for multiple different applications, but also makes it easy to get help if you are stuck at a paticular problem.\nThis is one of the reasons why R is great for doing statistical analyses with it - there are packages for almost every use case.\nIt has great tools for making beautiful plots.\nThis is not R specific, but because you can write programs for your specific use cases, it facilitates many workflow related tasks like automation, tracking changes with git, result preperation with markdown/latex and many more.\n\nThere are many reasons to learn R and this workshop will hopefully help you with that.\n\n\nAbout the structure of this workshop\nThis workshop will teach you the basics of R. It’s modular structure is meant to support different levels of R expertise and interests: already know the basics and want to learn how to plot? Want to freshen up your R skills? Go over the first chapter, do the final [exercise] and deepen topics of interest you find on the way. If you are a beginner in working with R, i would recommend to just follow the outline you can find on the left side. So don’t worry if you don’t finish the whole workshop in time, or the material seems a bit overwhelming. It is designed to provide additional information for self studying and looking up topics of interest. The main objective of this workshop is to get you fit in the basics of programming in R as it needed for the rest of the Open Research Summer School. To do that, we will repeat and try out the main concepts multiple times, so you get to work with them as much and as from many different perspectives as possible in the next 3 h. Please install the necessary software before the workshop, so we can concentrate on the content during the workshop. Of course, feel free to ask by opening a new issue if you run into problems on the way."
  },
  {
    "objectID": "data_structures.html",
    "href": "data_structures.html",
    "title": "Data structures",
    "section": "",
    "text": "There are five main data structures in R which differ on their dimensions (one dimension, two dimensions, n dimensions) and the type of the elements they are containing (same type, different types):1\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1d\natomic vector\nlist\n\n\n2d\nmatrix\ndata.frame\n\n\nnd\narray\n\n\n\n\n\nLet’s take a closer look at the two we will use mostly throughout this workshop:\n\n\nAtomic vectors (from hereon only called vectors) contain elements of only the same type:\n\nnum_vec &lt;- c(2023, 8, 8)\nnum_vec\n\n[1] 2023    8    8\n\nchar_vec &lt;- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n\nlog_vec &lt;- c(TRUE, FALSE)\nlog_vec\n\n[1]  TRUE FALSE\n\n\nThe c() stands for combine, or concatenate, and is the basic function for building a vector out of single elements.\n\n\nIf we take a look at the structure of the vectors we have just created, we see se a short description of the data type we are dealing with in front of the vector:\n\nstr(num_vec)\n\n num [1:3] 2023 8 8\n\nstr(char_vec)\n\n chr [1:5] \"This\" \"is\" \"a\" \"vec\" \".\"\n\nstr(log_vec)\n\n logi [1:2] TRUE FALSE\n\n\nThe first one is num (numeric) so it only stores numeric values. The second one is char (character), so it only can contain strings. And last but not least we have logi (logical) for boolean values. Why is that important? Well, some functions only make sense for specific data types. For example:\n\nmean(char_vec)\n\nWarning in mean.default(char_vec): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\ngives us a warning, because the input has the wrong format.\n\n\n\n\nA data frame is two dimensional and can store elements of different types. It is the closest to data tables we are probably most used to working with.\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extro = c(3.5, 2, 4.5, 4.2)\n                      )\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n\nA special type of data frames are the so called tibbles. Tibbles are a modern version of data frames and the standard data frame type of the tidyverse, as they have some advantageous characteristics (e.g., note the prettier printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames.\n\npersons_tibble &lt;- tibble::tibble(\n  name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n  age = c(19, 17, 18, 18),\n  birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n  big5_extro = c(3.5, 2, 4.5, 4.2)\n)\npersons_tibble\n\n# A tibble: 4 × 4\n  name    age birth_month big5_extro\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1 Anna     19 Jan                3.5\n2 Alex     17 Sep                2  \n3 John     18 Oct                4.5\n4 Jessi    18 Mar                4.2\n\n\n\n\n\n\nA list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\npersonality_rating &lt;- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n\n\nHere, we define the list personality_rating, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type. We won’t use it any more in this workshop, but keep in mind it exists, as it quickly becomes necessary for managing more complex tasks.\nInstead, we are now well equipped to get started with some data manipulation and transformation."
  },
  {
    "objectID": "data_structures.html#vector",
    "href": "data_structures.html#vector",
    "title": "Data structures",
    "section": "",
    "text": "Atomic vectors (from hereon only called vectors) contain elements of only the same type:\n\nnum_vec &lt;- c(2023, 8, 8)\nnum_vec\n\n[1] 2023    8    8\n\nchar_vec &lt;- c(\"This\", \"is\", \"a\", \"vec\", \".\")\nchar_vec\n\n[1] \"This\" \"is\"   \"a\"    \"vec\"  \".\"   \n\nlog_vec &lt;- c(TRUE, FALSE)\nlog_vec\n\n[1]  TRUE FALSE\n\n\nThe c() stands for combine, or concatenate, and is the basic function for building a vector out of single elements.\n\n\nIf we take a look at the structure of the vectors we have just created, we see se a short description of the data type we are dealing with in front of the vector:\n\nstr(num_vec)\n\n num [1:3] 2023 8 8\n\nstr(char_vec)\n\n chr [1:5] \"This\" \"is\" \"a\" \"vec\" \".\"\n\nstr(log_vec)\n\n logi [1:2] TRUE FALSE\n\n\nThe first one is num (numeric) so it only stores numeric values. The second one is char (character), so it only can contain strings. And last but not least we have logi (logical) for boolean values. Why is that important? Well, some functions only make sense for specific data types. For example:\n\nmean(char_vec)\n\nWarning in mean.default(char_vec): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\ngives us a warning, because the input has the wrong format."
  },
  {
    "objectID": "data_structures.html#data-frame",
    "href": "data_structures.html#data-frame",
    "title": "Data structures",
    "section": "",
    "text": "A data frame is two dimensional and can store elements of different types. It is the closest to data tables we are probably most used to working with.\n\npersons &lt;- data.frame(name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n                      age = c(19, 17, 18, 18),\n                      birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n                      big5_extro = c(3.5, 2, 4.5, 4.2)\n                      )\n\nNote that we do nothing else here than combining vectors to a data frame. Each vector will be one column.\n\n\nA special type of data frames are the so called tibbles. Tibbles are a modern version of data frames and the standard data frame type of the tidyverse, as they have some advantageous characteristics (e.g., note the prettier printing of the data frame). So don’t be confused if you run into them, in general they behave like data frames.\n\npersons_tibble &lt;- tibble::tibble(\n  name = c(\"Anna\", \"Alex\", \"John\", \"Jessi\"),\n  age = c(19, 17, 18, 18),\n  birth_month = c(\"Jan\", \"Sep\", \"Oct\", \"Mar\"),\n  big5_extro = c(3.5, 2, 4.5, 4.2)\n)\npersons_tibble\n\n# A tibble: 4 × 4\n  name    age birth_month big5_extro\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1 Anna     19 Jan                3.5\n2 Alex     17 Sep                2  \n3 John     18 Oct                4.5\n4 Jessi    18 Mar                4.2"
  },
  {
    "objectID": "data_structures.html#honorable-mention-list",
    "href": "data_structures.html#honorable-mention-list",
    "title": "Data structures",
    "section": "",
    "text": "A list is a one dimensional object, which can, unlike like a vector, contain elements of different types, but also of different lengths. For example, we can store a vectors of different lengths and data frames in a list, which makes it the most versatile data structure:\n\npersonality_rating &lt;- list(\n     big5 = data.frame(name = c(\"Jessi\", \"John\"),\n                       extraversion = c(4.3, 2), \n                       openness = c(3.8, 4)),\n     rating_type = \"self_rating\"\n     )\npersonality_rating\n\n$big5\n   name extraversion openness\n1 Jessi          4.3      3.8\n2  John          2.0      4.0\n\n$rating_type\n[1] \"self_rating\"\n\n\nHere, we define the list personality_rating, which includes a data frame with the personality rating, and some meta information in the form of a character vector, describing the rating type. We won’t use it any more in this workshop, but keep in mind it exists, as it quickly becomes necessary for managing more complex tasks.\nInstead, we are now well equipped to get started with some data manipulation and transformation."
  },
  {
    "objectID": "data_structures.html#footnotes",
    "href": "data_structures.html#footnotes",
    "title": "Data structures",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTable from Advanced R.↩︎"
  },
  {
    "objectID": "subsetting.html",
    "href": "subsetting.html",
    "title": "Subsetting data",
    "section": "",
    "text": "Please take a look at the different data structures in R if you are not familiar with them, before you start with this chapter.\n\n\n1\nLoad the data set, which lies within the folder raw_data in my working directory:\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\n\nLet’s take a quick look:\n\nhead(winners)\n\n  Category Year              Athlete    Nationality Hours Minutes Seconds\n1      Men 1981 Dick Beardsley (Tie)  United States     2      11      48\n2      Men 1981  Inge Simonsen (Tie)         Norway    NA      11      48\n3      Men 1982           Hugh Jones United Kingdom     2       9      24\n4      Men 1983         Mike Gratton United Kingdom     2       9      43\n5      Men 1984     Charlie Spedding United Kingdom     2       9      57\n6      Men 1985          Steve Jones United Kingdom     2       8      16\n\n\nSo, this data frame seems to hold the winners of the london marathon, but their finishing times are missing. They are stored in another data set, but we will deal with that later. For now we want to look at how we can extract data from our data structures, so we can work with it.\n\n\n\nWe will look at two ways to extract rows and columns from data frames.\n\n\nIn Base R, we use square brackets [,]. In front of the , we write the rows we want to extract:\n\n# Extract the first and the fourth row\nwinners[c(1, 4), ]\n\n  Category Year              Athlete    Nationality Hours Minutes Seconds\n1      Men 1981 Dick Beardsley (Tie)  United States     2      11      48\n4      Men 1983         Mike Gratton United Kingdom     2       9      43\n\n\nBehind it the columns:\n\n# Extract the second and the fourth column:\nwinners[, c(2, 4)]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Extract the columns by name:\nwinners[, c(\"Year\", \"Nationality\")]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Or only the column Year (and turn it into a vector right away):\nwinners$Year\n\n  [1] 1981 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994\n [16] 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n [31] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1981\n [46] 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996\n [61] 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011\n [76] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1983 1984 1985\n [91] 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000\n[106] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015\n[121] 2016 2017 2018 2019 2020 2021 1983 1984 1985 1986 1987 1988 1989 1990 1991\n[136] 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006\n[151] 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021\n\n\nAnd of course we can combine both calls:\n\nwinners[c(1, 4), c(2, 4)]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\nwinners[c(1, 4), c(\"Year\", \"Nationality\")]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\n\nWe can also use Boolean values (every row/column must get a value here, so we extract the first 100 rows by repeating TRUE 100 times, and than add FALSE for the remaining rows:\n\nwinners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n\n          Category    Nationality Hours Minutes\n1              Men  United States     2      11\n2              Men         Norway    NA      11\n3              Men United Kingdom     2       9\n4              Men United Kingdom     2       9\n5              Men United Kingdom     2       9\n6              Men United Kingdom     2       8\n7              Men          Japan     2      10\n8              Men          Japan     2       9\n9              Men        Denmark     2      10\n10             Men          Kenya     2       9\n11             Men United Kingdom     2      10\n12             Men   Soviet Union     2       9\n13             Men       Portugal     2      10\n14             Men United Kingdom     2      10\n15             Men         Mexico     2       8\n16             Men         Mexico     2       8\n17             Men         Mexico     2      10\n18             Men       Portugal     2       7\n19             Men          Spain     2       7\n20             Men        Morocco     2       7\n21             Men       Portugal     2       6\n22             Men        Morocco     2       7\n23             Men  United States     2       5\n24             Men       Ethiopia    NA       7\n25             Men          Kenya     2       6\n26             Men          Kenya     2       7\n27             Men          Kenya     2       6\n28             Men          Kenya     2       7\n29             Men          Kenya     2       5\n30             Men          Kenya     2       5\n31             Men       Ethiopia     2       5\n32             Men          Kenya     2       4\n33             Men          Kenya     2       4\n34             Men       Ethiopia     2       6\n35             Men          Kenya    NA       4\n36             Men          Kenya     2       4\n37             Men          Kenya     2       3\n38             Men          Kenya     2       5\n39             Men          Kenya     2       4\n40             Men          Kenya     2       2\n41             Men       Ethiopia     2       5\n42             Men       Ethiopia     2       4\n43             Men          Kenya     2       4\n44             Men          Kenya     2       1\n45           Women United Kingdom     2      29\n46           Women United Kingdom     2      29\n47           Women         Norway     2      25\n48           Women         Norway     2      24\n49           Women         Norway     2      21\n50           Women         Norway     2      24\n51           Women         Norway     2      22\n52           Women         Norway     2      25\n53           Women United Kingdom     2      25\n54           Women         Poland     2      26\n55           Women       Portugal     2      26\n56           Women        Germany     2      29\n57           Women        Germany     2      27\n58           Women        Germany     2      32\n59           Women         Poland     2      27\n60           Women United Kingdom     2      27\n61           Women          Kenya     2      26\n62           Women        Ireland     2      26\n63           Women          Kenya     2      23\n64           Women          Kenya     2      24\n65           Women       Ethiopia     2      23\n66           Women United Kingdom     2      18\n67           Women United Kingdom     2      15\n68           Women          Kenya     2      22\n69           Women United Kingdom     2      17\n70           Women  United States     2      19\n71           Women          China     2      20\n72           Women        Germany     2      24\n73           Women        Germany     2      22\n74           Women       Ethiopia     2      22\n75           Women          Kenya     2      19\n76           Women          Kenya     2      18\n77           Women          Kenya     2      20\n78           Women          Kenya     2      20\n79           Women       Ethiopia     2      23\n80           Women          Kenya     2      22\n81           Women          Kenya     2      17\n82           Women          Kenya     2      18\n83           Women          Kenya     2      18\n84           Women          Kenya     2      18\n85           Women          Kenya     2      17\n86           Women       Ethiopia     2      17\n87           Women    Netherlands     2      18\n88  Wheelchair Men United Kingdom     3      20\n89  Wheelchair Men        Ireland     2      38\n90  Wheelchair Men United Kingdom     2      19\n91  Wheelchair Men        Ireland     2      26\n92  Wheelchair Men United Kingdom     2       8\n93  Wheelchair Men         Canada     2       1\n94  Wheelchair Men United Kingdom     1      59\n95  Wheelchair Men         Sweden    NA      57\n96  Wheelchair Men         France     1      52\n97  Wheelchair Men         Canada     1      51\n98  Wheelchair Men        Belgium     1      44\n99  Wheelchair Men United Kingdom     1      46\n100 Wheelchair Men    Switzerland     1      39\n\n\nNow the stuff we looked at in logical operators comes in handy! We can filter rows which match some condition. For example, we might want to look at all winners from Kenya:\n\nwinners[winners$Nationality == \"Kenya\", ]\n\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n27      Men 2006                 Felix Limo       Kenya     2       6      39\n28      Men 2007                 Martin Lel       Kenya     2       7      41\n29      Men 2008                 Martin Lel       Kenya     2       5      15\n30      Men 2009             Samuel Wanjiru       Kenya     2       5      10\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya     2       4      40\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya     2       4      44\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya    NA       4      29\n36      Men 2015             Eliud Kipchoge       Kenya     2       4      42\n37      Men 2016             Eliud Kipchoge       Kenya     2       3       5\n38      Men 2017             Daniel Wanjiru       Kenya     2       5      48\n39      Men 2018             Eliud Kipchoge       Kenya     2       4      17\n40      Men 2019             Eliud Kipchoge       Kenya     2       2      37\n43      Men 2022               Amos Kipruto       Kenya     2       4      39\n44      Men 2023              Kelvin Kiptum       Kenya     2       1      25\n61    Women 1997           Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999           Joyce Chepchumba       Kenya     2      23      22\n64    Women 2000              Tegla Loroupe       Kenya     2      24      33\n68    Women 2004             Margaret Okayo       Kenya     2      22      35\n75    Women 2011     Mary Jepkosgei Keitany       Kenya     2      19      19\n76    Women 2012     Mary Jepkosgei Keitany       Kenya     2      18      37\n77    Women 2013             Priscah Jeptoo       Kenya     2      20      15\n78    Women 2014              Edna Kiplagat       Kenya     2      20      21\n80    Women 2016             Jemima Sumgong       Kenya     2      22      58\n81    Women 2017     Mary Jepkosgei Keitany       Kenya     2      17       1\n82    Women 2018           Vivian Cheruiyot       Kenya     2      18      31\n83    Women 2019              Brigid Kosgei       Kenya     2      18      20\n84    Women 2020              Brigid Kosgei       Kenya     2      18      58\n85    Women 2021        Joyciline Jepkosgei       Kenya     2      17      43\n\n\nTake a close look at the comparison before the ,:\n\nwinners$Nationality == \"Kenya\"\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n [85]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nwinners$Nationality is a vector, so comparing its values to a specified value yields a logical vector with the respective TRUE and FALSE values. We can insert this logical vector in front of the , to extract all rows corresponding to that condition.\nIf we want to extract multiple nationalities at once, we need the %in% operator:\n\nwinners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\n\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n2       Men 1981        Inge Simonsen (Tie)      Norway    NA      11      48\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n27      Men 2006                 Felix Limo       Kenya     2       6      39\n28      Men 2007                 Martin Lel       Kenya     2       7      41\n29      Men 2008                 Martin Lel       Kenya     2       5      15\n30      Men 2009             Samuel Wanjiru       Kenya     2       5      10\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya     2       4      40\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya     2       4      44\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya    NA       4      29\n36      Men 2015             Eliud Kipchoge       Kenya     2       4      42\n37      Men 2016             Eliud Kipchoge       Kenya     2       3       5\n38      Men 2017             Daniel Wanjiru       Kenya     2       5      48\n39      Men 2018             Eliud Kipchoge       Kenya     2       4      17\n40      Men 2019             Eliud Kipchoge       Kenya     2       2      37\n43      Men 2022               Amos Kipruto       Kenya     2       4      39\n44      Men 2023              Kelvin Kiptum       Kenya     2       1      25\n47    Women 1983                Grete Waitz      Norway     2      25      29\n48    Women 1984         Ingrid Kristiansen      Norway     2      24      26\n49    Women 1985         Ingrid Kristiansen      Norway     2      21       6\n50    Women 1986                Grete Waitz      Norway     2      24      54\n51    Women 1987         Ingrid Kristiansen      Norway     2      22      48\n52    Women 1988         Ingrid Kristiansen      Norway     2      25      41\n56    Women 1992        Katrin Dörre-Heinig     Germany     2      29      39\n57    Women 1993        Katrin Dörre-Heinig     Germany     2      27       9\n58    Women 1994        Katrin Dörre-Heinig     Germany     2      32      34\n61    Women 1997           Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999           Joyce Chepchumba       Kenya     2      23      22\n64    Women 2000              Tegla Loroupe       Kenya     2      24      33\n68    Women 2004             Margaret Okayo       Kenya     2      22      35\n72    Women 2008            Irina Mikitenko     Germany     2      24      14\n73    Women 2009            Irina Mikitenko     Germany     2      22      11\n75    Women 2011     Mary Jepkosgei Keitany       Kenya     2      19      19\n76    Women 2012     Mary Jepkosgei Keitany       Kenya     2      18      37\n77    Women 2013             Priscah Jeptoo       Kenya     2      20      15\n78    Women 2014              Edna Kiplagat       Kenya     2      20      21\n80    Women 2016             Jemima Sumgong       Kenya     2      22      58\n81    Women 2017     Mary Jepkosgei Keitany       Kenya     2      17       1\n82    Women 2018           Vivian Cheruiyot       Kenya     2      18      31\n83    Women 2019              Brigid Kosgei       Kenya     2      18      20\n84    Women 2020              Brigid Kosgei       Kenya     2      18      58\n85    Women 2021        Joyciline Jepkosgei       Kenya     2      17      43\n\n\nBy the way, if we want to save our extracted data frame, we can assign it a new name (otherwise it will only get printed into the console, but you cant work further with it):\n\nwinners_nat &lt;- winners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\nwinners_nat\n\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n2       Men 1981        Inge Simonsen (Tie)      Norway    NA      11      48\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n27      Men 2006                 Felix Limo       Kenya     2       6      39\n28      Men 2007                 Martin Lel       Kenya     2       7      41\n29      Men 2008                 Martin Lel       Kenya     2       5      15\n30      Men 2009             Samuel Wanjiru       Kenya     2       5      10\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya     2       4      40\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya     2       4      44\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya    NA       4      29\n36      Men 2015             Eliud Kipchoge       Kenya     2       4      42\n37      Men 2016             Eliud Kipchoge       Kenya     2       3       5\n38      Men 2017             Daniel Wanjiru       Kenya     2       5      48\n39      Men 2018             Eliud Kipchoge       Kenya     2       4      17\n40      Men 2019             Eliud Kipchoge       Kenya     2       2      37\n43      Men 2022               Amos Kipruto       Kenya     2       4      39\n44      Men 2023              Kelvin Kiptum       Kenya     2       1      25\n47    Women 1983                Grete Waitz      Norway     2      25      29\n48    Women 1984         Ingrid Kristiansen      Norway     2      24      26\n49    Women 1985         Ingrid Kristiansen      Norway     2      21       6\n50    Women 1986                Grete Waitz      Norway     2      24      54\n51    Women 1987         Ingrid Kristiansen      Norway     2      22      48\n52    Women 1988         Ingrid Kristiansen      Norway     2      25      41\n56    Women 1992        Katrin Dörre-Heinig     Germany     2      29      39\n57    Women 1993        Katrin Dörre-Heinig     Germany     2      27       9\n58    Women 1994        Katrin Dörre-Heinig     Germany     2      32      34\n61    Women 1997           Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999           Joyce Chepchumba       Kenya     2      23      22\n64    Women 2000              Tegla Loroupe       Kenya     2      24      33\n68    Women 2004             Margaret Okayo       Kenya     2      22      35\n72    Women 2008            Irina Mikitenko     Germany     2      24      14\n73    Women 2009            Irina Mikitenko     Germany     2      22      11\n75    Women 2011     Mary Jepkosgei Keitany       Kenya     2      19      19\n76    Women 2012     Mary Jepkosgei Keitany       Kenya     2      18      37\n77    Women 2013             Priscah Jeptoo       Kenya     2      20      15\n78    Women 2014              Edna Kiplagat       Kenya     2      20      21\n80    Women 2016             Jemima Sumgong       Kenya     2      22      58\n81    Women 2017     Mary Jepkosgei Keitany       Kenya     2      17       1\n82    Women 2018           Vivian Cheruiyot       Kenya     2      18      31\n83    Women 2019              Brigid Kosgei       Kenya     2      18      20\n84    Women 2020              Brigid Kosgei       Kenya     2      18      58\n85    Women 2021        Joyciline Jepkosgei       Kenya     2      17      43\n\n\nWe can also combine multiple logical vectors using & (“and”) and | (“or”). For example, we might want to look at all Kenyan winners before the year 2000:\n\nwinners[winners$Nationality == \"Kenya\" & winners$Year &lt; 2000, ]\n\n   Category Year           Athlete Nationality Hours Minutes Seconds\n10      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n61    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n\n\nOr at all women winners from Australia in the wheelchair category, and the male winners from the United States in the wheelchair category:\n\nwinners[(winners$Category == \"Wheelchair Women\" & winners$Nationality == \"Australia\") | (winners$Category == \"Wheelchair Men\" & winners$Nationality == \"United States\"), ]\n\n            Category Year            Athlete   Nationality Hours Minutes\n120   Wheelchair Men 2015        Josh George United States     1      31\n124   Wheelchair Men 2019   Daniel Romanchuk United States     1      33\n162 Wheelchair Women 2018 Madison de Rozario     Australia     1      42\n    Seconds\n120      31\n124      37\n162      58\n\n\nIn the long run, always having to define the data frame multiple time in each row can become a bit annoying and clutters the code. Enter, the filter() function:\n\n\n\nThe dplyr package is part of the tidyverse and provides a grammar of data manipulation. We can use filter() to subset rows from a data frame:\n\n\nlibrary(dplyr)\n\nfilter(winners, Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality Hours Minutes Seconds\n1      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n2    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n3    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n\n\n\nNote how we can just write our conditions without connecting them with & (filter() does that automatically for us). Also, we don’t have to put the column names into \"\", because filter() knows that this are column names of the winners data frame, which makes coding a bit more pleasant.\nFor extracting columns, we need select():\n\n\nselect(winners, Year, Athlete)\n\n    Year                    Athlete\n1   1981       Dick Beardsley (Tie)\n2   1981        Inge Simonsen (Tie)\n3   1982                 Hugh Jones\n4   1983               Mike Gratton\n5   1984           Charlie Spedding\n6   1985                Steve Jones\n7   1986             Toshihiko Seko\n8   1987           Hiromi Taniguchi\n9   1988           Henrik Jørgensen\n10  1989          Douglas Wakiihuri\n11  1990            Allister Hutton\n12  1991            Yakov Tolstikov\n13  1992              António Pinto\n14  1993              Eamonn Martin\n15  1994             Dionicio Cerón\n16  1995             Dionicio Cerón\n17  1996             Dionicio Cerón\n18  1997              António Pinto\n19  1998                 Abel Antón\n20  1999      Abdelkader El Mouaziz\n21  2000              António Pinto\n22  2001      Abdelkader El Mouaziz\n23  2002          Khalid Khannouchi\n24  2003            Gezahegne Abera\n25  2004                Evans Rutto\n26  2005                 Martin Lel\n27  2006                 Felix Limo\n28  2007                 Martin Lel\n29  2008                 Martin Lel\n30  2009             Samuel Wanjiru\n31  2010             Tsegaye Kebede\n32  2011 Emmanuel Kipchirchir Mutai\n33  2012   Wilson Kipsang Kiprotich\n34  2013             Tsegaye Kebede\n35  2014   Wilson Kipsang Kiprotich\n36  2015             Eliud Kipchoge\n37  2016             Eliud Kipchoge\n38  2017             Daniel Wanjiru\n39  2018             Eliud Kipchoge\n40  2019             Eliud Kipchoge\n41  2020          Shura Kitata Tola\n42  2021                Sisay Lemma\n43  2022               Amos Kipruto\n44  2023              Kelvin Kiptum\n45  1981                Joyce Smith\n46  1982                Joyce Smith\n47  1983                Grete Waitz\n48  1984         Ingrid Kristiansen\n49  1985         Ingrid Kristiansen\n50  1986                Grete Waitz\n51  1987         Ingrid Kristiansen\n52  1988         Ingrid Kristiansen\n53  1989            Véronique Marot\n54  1990               Wanda Panfil\n55  1991                  Rosa Mota\n56  1992        Katrin Dörre-Heinig\n57  1993        Katrin Dörre-Heinig\n58  1994        Katrin Dörre-Heinig\n59  1995        Małgorzata Sobańska\n60  1996               Liz McColgan\n61  1997           Joyce Chepchumba\n62  1998        Catherina McKiernan\n63  1999           Joyce Chepchumba\n64  2000              Tegla Loroupe\n65  2001               Derartu Tulu\n66  2002            Paula Radcliffe\n67  2003            Paula Radcliffe\n68  2004             Margaret Okayo\n69  2005            Paula Radcliffe\n70  2006               Deena Kastor\n71  2007               Zhou Chunxiu\n72  2008            Irina Mikitenko\n73  2009            Irina Mikitenko\n74  2010           Aselefech Mergia\n75  2011     Mary Jepkosgei Keitany\n76  2012     Mary Jepkosgei Keitany\n77  2013             Priscah Jeptoo\n78  2014              Edna Kiplagat\n79  2015                Tigist Tufa\n80  2016             Jemima Sumgong\n81  2017     Mary Jepkosgei Keitany\n82  2018           Vivian Cheruiyot\n83  2019              Brigid Kosgei\n84  2020              Brigid Kosgei\n85  2021        Joyciline Jepkosgei\n86  2022         Yalemzerf Yehualaw\n87  2023               Sifan Hassan\n88  1983               Gordon Perry\n89  1984                Kevin Breen\n90  1985               Chris Hallam\n91  1986             Gerry O'Rourke\n92  1987               Chris Hallam\n93  1988                  Ted Vince\n94  1989              David Holding\n95  1990             Håkan Ericsson\n96  1991            Farid Amarouche\n97  1992              Daniel Wesley\n98  1993            George Vandamme\n99  1994              David Holding\n100 1995                 Heinz Frei\n101 1996              David Holding\n102 1997              David Holding\n103 1998                 Heinz Frei\n104 1999                 Heinz Frei\n105 2000             Kevin Papworth\n106 2001            Denis Lemeunier\n107 2002                 David Weir\n108 2003               Joël Jeannot\n109 2004               Saúl Mendoza\n110 2005               Saúl Mendoza\n111 2006                 David Weir\n112 2007                 David Weir\n113 2008                 David Weir\n114 2009              Kurt Fearnley\n115 2010               Josh Cassidy\n116 2011                 David Weir\n117 2012                 David Weir\n118 2013              Kurt Fearnley\n119 2014                 Marcel Hug\n120 2015                Josh George\n121 2016                 Marcel Hug\n122 2017                 David Weir\n123 2018                 David Weir\n124 2019           Daniel Romanchuk\n125 2020              Brent Lakatos\n126 2021                 Marcel Hug\n127 1983               Denise Smith\n128 1984                Kay McShane\n129 1985                Kay McShane\n130 1986                Kay McShane\n131 1987             Karen Davidson\n132 1988             Karen Davidson\n133 1989            Josie Cichockyj\n134 1990              Connie Hansen\n135 1991              Connie Hansen\n136 1992        Tanni Grey-Thompson\n137 1993                  Rose Hill\n138 1994        Tanni Grey-Thompson\n139 1995                  Rose Hill\n140 1996        Tanni Grey-Thompson\n141 1997         Monica Wetterström\n142 1998        Tanni Grey-Thompson\n143 1999         Monica Wetterström\n144 2000               Sarah Piercy\n145 2001        Tanni Grey-Thompson\n146 2002        Tanni Grey-Thompson\n147 2003       Francesca Porcellato\n148 2004       Francesca Porcellato\n149 2005       Francesca Porcellato\n150 2006       Francesca Porcellato\n151 2007               Shelly Woods\n152 2008                Sandra Graf\n153 2009             Amanda McGrory\n154 2010            Wakako Tsuchida\n155 2011             Amanda McGrory\n156 2012               Shelly Woods\n157 2013           Tatyana McFadden\n158 2014           Tatyana McFadden\n159 2015           Tatyana McFadden\n160 2016           Tatyana McFadden\n161 2017              Manuela Schär\n162 2018         Madison de Rozario\n163 2019              Manuela Schär\n164 2020            Nikita den Boer\n165 2021              Manuela Schär\n\n\n\n\n\nHold on! Normally, we wouldn’t write tidyverse code like that. Instead, we would use the pipe operator %&gt;% (than do), which makes it easy to connect multiple function calls:\n\n\nwinners %&gt;%\n  filter(Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality Hours Minutes Seconds\n1      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n2    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n3    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n\n\n\nHere, we first input the data frame we want to manipulate. Than we filter, as specified by the pipe operator. Like this, we can easily connect multiple function calls instead of nesting them within multiple brackets, which increases the readability:\n\nwinners[winners$Year &gt; 2000 & winners$Category == \"Women\", c(\"Category\", \"Year\")]\n\n   Category Year\n65    Women 2001\n66    Women 2002\n67    Women 2003\n68    Women 2004\n69    Women 2005\n70    Women 2006\n71    Women 2007\n72    Women 2008\n73    Women 2009\n74    Women 2010\n75    Women 2011\n76    Women 2012\n77    Women 2013\n78    Women 2014\n79    Women 2015\n80    Women 2016\n81    Women 2017\n82    Women 2018\n83    Women 2019\n84    Women 2020\n85    Women 2021\n86    Women 2022\n87    Women 2023\n\n\nbecomes:\n\n\nwinners %&gt;%\n  filter(Year &gt; 2000, Category == \"Women\") %&gt;%\n  select(Category, Year)\n\n   Category Year\n1     Women 2001\n2     Women 2002\n3     Women 2003\n4     Women 2004\n5     Women 2005\n6     Women 2006\n7     Women 2007\n8     Women 2008\n9     Women 2009\n10    Women 2010\n11    Women 2011\n12    Women 2012\n13    Women 2013\n14    Women 2014\n15    Women 2015\n16    Women 2016\n17    Women 2017\n18    Women 2018\n19    Women 2019\n20    Women 2020\n21    Women 2021\n22    Women 2022\n23    Women 2023\n\n\n\nMuch nicer to read, right?\nSome notes on this syntax: If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets. The pipe operator will give the result of the last function as input into the next function. If we want to clearly state which of the function arguments should receive the input, we can write a ., which can be read as output of the previous function call.\n\n\n\n\n\nFinally, let’s take a quick look at how to extract elements from a vector. It’s pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets:\n\nvec_athlete &lt;- winners$Athlete # remember: `$` returns a vector\nvec_athlete[2]\n\n[1] \"Inge Simonsen (Tie)\"\n\n\nOf course we can also do that for multiple elements:\n\nvec_athlete[c(2,3,4)]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n## Or, less to write:\nvec_athlete[2:4]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n\nAnother way would be to provide a logical vector, which defines for each position, if we want to extract the element or not (like we already did for data frames):\n\nvec_athlete[c(rep(TRUE, 100), rep(FALSE, 65))]\n\n  [1] \"Dick Beardsley (Tie)\"       \"Inge Simonsen (Tie)\"       \n  [3] \"Hugh Jones\"                 \"Mike Gratton\"              \n  [5] \"Charlie Spedding\"           \"Steve Jones\"               \n  [7] \"Toshihiko Seko\"             \"Hiromi Taniguchi\"          \n  [9] \"Henrik Jørgensen\"           \"Douglas Wakiihuri\"         \n [11] \"Allister Hutton\"            \"Yakov Tolstikov\"           \n [13] \"António Pinto\"              \"Eamonn Martin\"             \n [15] \"Dionicio Cerón\"             \"Dionicio Cerón\"            \n [17] \"Dionicio Cerón\"             \"António Pinto\"             \n [19] \"Abel Antón\"                 \"Abdelkader El Mouaziz\"     \n [21] \"António Pinto\"              \"Abdelkader El Mouaziz\"     \n [23] \"Khalid Khannouchi\"          \"Gezahegne Abera\"           \n [25] \"Evans Rutto\"                \"Martin Lel\"                \n [27] \"Felix Limo\"                 \"Martin Lel\"                \n [29] \"Martin Lel\"                 \"Samuel Wanjiru\"            \n [31] \"Tsegaye Kebede\"             \"Emmanuel Kipchirchir Mutai\"\n [33] \"Wilson Kipsang Kiprotich\"   \"Tsegaye Kebede\"            \n [35] \"Wilson Kipsang Kiprotich\"   \"Eliud Kipchoge\"            \n [37] \"Eliud Kipchoge\"             \"Daniel Wanjiru\"            \n [39] \"Eliud Kipchoge\"             \"Eliud Kipchoge\"            \n [41] \"Shura Kitata Tola\"          \"Sisay Lemma\"               \n [43] \"Amos Kipruto\"               \"Kelvin Kiptum\"             \n [45] \"Joyce Smith\"                \"Joyce Smith\"               \n [47] \"Grete Waitz\"                \"Ingrid Kristiansen\"        \n [49] \"Ingrid Kristiansen\"         \"Grete Waitz\"               \n [51] \"Ingrid Kristiansen\"         \"Ingrid Kristiansen\"        \n [53] \"Véronique Marot\"            \"Wanda Panfil\"              \n [55] \"Rosa Mota\"                  \"Katrin Dörre-Heinig\"       \n [57] \"Katrin Dörre-Heinig\"        \"Katrin Dörre-Heinig\"       \n [59] \"Małgorzata Sobańska\"        \"Liz McColgan\"              \n [61] \"Joyce Chepchumba\"           \"Catherina McKiernan\"       \n [63] \"Joyce Chepchumba\"           \"Tegla Loroupe\"             \n [65] \"Derartu Tulu\"               \"Paula Radcliffe\"           \n [67] \"Paula Radcliffe\"            \"Margaret Okayo\"            \n [69] \"Paula Radcliffe\"            \"Deena Kastor\"              \n [71] \"Zhou Chunxiu\"               \"Irina Mikitenko\"           \n [73] \"Irina Mikitenko\"            \"Aselefech Mergia\"          \n [75] \"Mary Jepkosgei Keitany\"     \"Mary Jepkosgei Keitany\"    \n [77] \"Priscah Jeptoo\"             \"Edna Kiplagat\"             \n [79] \"Tigist Tufa\"                \"Jemima Sumgong\"            \n [81] \"Mary Jepkosgei Keitany\"     \"Vivian Cheruiyot\"          \n [83] \"Brigid Kosgei\"              \"Brigid Kosgei\"             \n [85] \"Joyciline Jepkosgei\"        \"Yalemzerf Yehualaw\"        \n [87] \"Sifan Hassan\"               \"Gordon Perry\"              \n [89] \"Kevin Breen\"                \"Chris Hallam\"              \n [91] \"Gerry O'Rourke\"             \"Chris Hallam\"              \n [93] \"Ted Vince\"                  \"David Holding\"             \n [95] \"Håkan Ericsson\"             \"Farid Amarouche\"           \n [97] \"Daniel Wesley\"              \"George Vandamme\"           \n [99] \"David Holding\"              \"Heinz Frei\"                \n\n\n\n\n\n\nLoad the tutoR package and start the exercise by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"subsetting\", package = \"tutoR\")"
  },
  {
    "objectID": "subsetting.html#data-set",
    "href": "subsetting.html#data-set",
    "title": "Subsetting data",
    "section": "",
    "text": "1\nLoad the data set, which lies within the folder raw_data in my working directory:\n\nwinners &lt;- readRDS(file = \"./raw_data/winners.rds\")\n\nLet’s take a quick look:\n\nhead(winners)\n\n  Category Year              Athlete    Nationality Hours Minutes Seconds\n1      Men 1981 Dick Beardsley (Tie)  United States     2      11      48\n2      Men 1981  Inge Simonsen (Tie)         Norway    NA      11      48\n3      Men 1982           Hugh Jones United Kingdom     2       9      24\n4      Men 1983         Mike Gratton United Kingdom     2       9      43\n5      Men 1984     Charlie Spedding United Kingdom     2       9      57\n6      Men 1985          Steve Jones United Kingdom     2       8      16\n\n\nSo, this data frame seems to hold the winners of the london marathon, but their finishing times are missing. They are stored in another data set, but we will deal with that later. For now we want to look at how we can extract data from our data structures, so we can work with it."
  },
  {
    "objectID": "subsetting.html#data-frames",
    "href": "subsetting.html#data-frames",
    "title": "Subsetting data",
    "section": "",
    "text": "We will look at two ways to extract rows and columns from data frames.\n\n\nIn Base R, we use square brackets [,]. In front of the , we write the rows we want to extract:\n\n# Extract the first and the fourth row\nwinners[c(1, 4), ]\n\n  Category Year              Athlete    Nationality Hours Minutes Seconds\n1      Men 1981 Dick Beardsley (Tie)  United States     2      11      48\n4      Men 1983         Mike Gratton United Kingdom     2       9      43\n\n\nBehind it the columns:\n\n# Extract the second and the fourth column:\nwinners[, c(2, 4)]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Extract the columns by name:\nwinners[, c(\"Year\", \"Nationality\")]\n\n    Year    Nationality\n1   1981  United States\n2   1981         Norway\n3   1982 United Kingdom\n4   1983 United Kingdom\n5   1984 United Kingdom\n6   1985 United Kingdom\n7   1986          Japan\n8   1987          Japan\n9   1988        Denmark\n10  1989          Kenya\n11  1990 United Kingdom\n12  1991   Soviet Union\n13  1992       Portugal\n14  1993 United Kingdom\n15  1994         Mexico\n16  1995         Mexico\n17  1996         Mexico\n18  1997       Portugal\n19  1998          Spain\n20  1999        Morocco\n21  2000       Portugal\n22  2001        Morocco\n23  2002  United States\n24  2003       Ethiopia\n25  2004          Kenya\n26  2005          Kenya\n27  2006          Kenya\n28  2007          Kenya\n29  2008          Kenya\n30  2009          Kenya\n31  2010       Ethiopia\n32  2011          Kenya\n33  2012          Kenya\n34  2013       Ethiopia\n35  2014          Kenya\n36  2015          Kenya\n37  2016          Kenya\n38  2017          Kenya\n39  2018          Kenya\n40  2019          Kenya\n41  2020       Ethiopia\n42  2021       Ethiopia\n43  2022          Kenya\n44  2023          Kenya\n45  1981 United Kingdom\n46  1982 United Kingdom\n47  1983         Norway\n48  1984         Norway\n49  1985         Norway\n50  1986         Norway\n51  1987         Norway\n52  1988         Norway\n53  1989 United Kingdom\n54  1990         Poland\n55  1991       Portugal\n56  1992        Germany\n57  1993        Germany\n58  1994        Germany\n59  1995         Poland\n60  1996 United Kingdom\n61  1997          Kenya\n62  1998        Ireland\n63  1999          Kenya\n64  2000          Kenya\n65  2001       Ethiopia\n66  2002 United Kingdom\n67  2003 United Kingdom\n68  2004          Kenya\n69  2005 United Kingdom\n70  2006  United States\n71  2007          China\n72  2008        Germany\n73  2009        Germany\n74  2010       Ethiopia\n75  2011          Kenya\n76  2012          Kenya\n77  2013          Kenya\n78  2014          Kenya\n79  2015       Ethiopia\n80  2016          Kenya\n81  2017          Kenya\n82  2018          Kenya\n83  2019          Kenya\n84  2020          Kenya\n85  2021          Kenya\n86  2022       Ethiopia\n87  2023    Netherlands\n88  1983 United Kingdom\n89  1984        Ireland\n90  1985 United Kingdom\n91  1986        Ireland\n92  1987 United Kingdom\n93  1988         Canada\n94  1989 United Kingdom\n95  1990         Sweden\n96  1991         France\n97  1992         Canada\n98  1993        Belgium\n99  1994 United Kingdom\n100 1995    Switzerland\n101 1996 United Kingdom\n102 1997 United Kingdom\n103 1998    Switzerland\n104 1999    Switzerland\n105 2000 United Kingdom\n106 2001         France\n107 2002 United Kingdom\n108 2003         France\n109 2004         Mexico\n110 2005         Mexico\n111 2006 United Kingdom\n112 2007 United Kingdom\n113 2008 United Kingdom\n114 2009      Australia\n115 2010         Canada\n116 2011 United Kingdom\n117 2012 United Kingdom\n118 2013      Australia\n119 2014    Switzerland\n120 2015  United States\n121 2016    Switzerland\n122 2017 United Kingdom\n123 2018 United Kingdom\n124 2019  United States\n125 2020         Canada\n126 2021    Switzerland\n127 1983 United Kingdom\n128 1984        Ireland\n129 1985        Ireland\n130 1986        Ireland\n131 1987 United Kingdom\n132 1988 United Kingdom\n133 1989 United Kingdom\n134 1990        Denmark\n135 1991        Denmark\n136 1992 United Kingdom\n137 1993 United Kingdom\n138 1994 United Kingdom\n139 1995 United Kingdom\n140 1996 United Kingdom\n141 1997         Sweden\n142 1998 United Kingdom\n143 1999         Sweden\n144 2000 United Kingdom\n145 2001 United Kingdom\n146 2002 United Kingdom\n147 2003          Italy\n148 2004          Italy\n149 2005          Italy\n150 2006          Italy\n151 2007 United Kingdom\n152 2008    Switzerland\n153 2009  United States\n154 2010          Japan\n155 2011  United States\n156 2012 United Kingdom\n157 2013  United States\n158 2014  United States\n159 2015  United States\n160 2016  United States\n161 2017    Switzerland\n162 2018      Australia\n163 2019    Switzerland\n164 2020    Netherlands\n165 2021    Switzerland\n\n# Or only the column Year (and turn it into a vector right away):\nwinners$Year\n\n  [1] 1981 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994\n [16] 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009\n [31] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1981\n [46] 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996\n [61] 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011\n [76] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 1983 1984 1985\n [91] 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000\n[106] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015\n[121] 2016 2017 2018 2019 2020 2021 1983 1984 1985 1986 1987 1988 1989 1990 1991\n[136] 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006\n[151] 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021\n\n\nAnd of course we can combine both calls:\n\nwinners[c(1, 4), c(2, 4)]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\nwinners[c(1, 4), c(\"Year\", \"Nationality\")]\n\n  Year    Nationality\n1 1981  United States\n4 1983 United Kingdom\n\n\nWe can also use Boolean values (every row/column must get a value here, so we extract the first 100 rows by repeating TRUE 100 times, and than add FALSE for the remaining rows:\n\nwinners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]\n\n          Category    Nationality Hours Minutes\n1              Men  United States     2      11\n2              Men         Norway    NA      11\n3              Men United Kingdom     2       9\n4              Men United Kingdom     2       9\n5              Men United Kingdom     2       9\n6              Men United Kingdom     2       8\n7              Men          Japan     2      10\n8              Men          Japan     2       9\n9              Men        Denmark     2      10\n10             Men          Kenya     2       9\n11             Men United Kingdom     2      10\n12             Men   Soviet Union     2       9\n13             Men       Portugal     2      10\n14             Men United Kingdom     2      10\n15             Men         Mexico     2       8\n16             Men         Mexico     2       8\n17             Men         Mexico     2      10\n18             Men       Portugal     2       7\n19             Men          Spain     2       7\n20             Men        Morocco     2       7\n21             Men       Portugal     2       6\n22             Men        Morocco     2       7\n23             Men  United States     2       5\n24             Men       Ethiopia    NA       7\n25             Men          Kenya     2       6\n26             Men          Kenya     2       7\n27             Men          Kenya     2       6\n28             Men          Kenya     2       7\n29             Men          Kenya     2       5\n30             Men          Kenya     2       5\n31             Men       Ethiopia     2       5\n32             Men          Kenya     2       4\n33             Men          Kenya     2       4\n34             Men       Ethiopia     2       6\n35             Men          Kenya    NA       4\n36             Men          Kenya     2       4\n37             Men          Kenya     2       3\n38             Men          Kenya     2       5\n39             Men          Kenya     2       4\n40             Men          Kenya     2       2\n41             Men       Ethiopia     2       5\n42             Men       Ethiopia     2       4\n43             Men          Kenya     2       4\n44             Men          Kenya     2       1\n45           Women United Kingdom     2      29\n46           Women United Kingdom     2      29\n47           Women         Norway     2      25\n48           Women         Norway     2      24\n49           Women         Norway     2      21\n50           Women         Norway     2      24\n51           Women         Norway     2      22\n52           Women         Norway     2      25\n53           Women United Kingdom     2      25\n54           Women         Poland     2      26\n55           Women       Portugal     2      26\n56           Women        Germany     2      29\n57           Women        Germany     2      27\n58           Women        Germany     2      32\n59           Women         Poland     2      27\n60           Women United Kingdom     2      27\n61           Women          Kenya     2      26\n62           Women        Ireland     2      26\n63           Women          Kenya     2      23\n64           Women          Kenya     2      24\n65           Women       Ethiopia     2      23\n66           Women United Kingdom     2      18\n67           Women United Kingdom     2      15\n68           Women          Kenya     2      22\n69           Women United Kingdom     2      17\n70           Women  United States     2      19\n71           Women          China     2      20\n72           Women        Germany     2      24\n73           Women        Germany     2      22\n74           Women       Ethiopia     2      22\n75           Women          Kenya     2      19\n76           Women          Kenya     2      18\n77           Women          Kenya     2      20\n78           Women          Kenya     2      20\n79           Women       Ethiopia     2      23\n80           Women          Kenya     2      22\n81           Women          Kenya     2      17\n82           Women          Kenya     2      18\n83           Women          Kenya     2      18\n84           Women          Kenya     2      18\n85           Women          Kenya     2      17\n86           Women       Ethiopia     2      17\n87           Women    Netherlands     2      18\n88  Wheelchair Men United Kingdom     3      20\n89  Wheelchair Men        Ireland     2      38\n90  Wheelchair Men United Kingdom     2      19\n91  Wheelchair Men        Ireland     2      26\n92  Wheelchair Men United Kingdom     2       8\n93  Wheelchair Men         Canada     2       1\n94  Wheelchair Men United Kingdom     1      59\n95  Wheelchair Men         Sweden    NA      57\n96  Wheelchair Men         France     1      52\n97  Wheelchair Men         Canada     1      51\n98  Wheelchair Men        Belgium     1      44\n99  Wheelchair Men United Kingdom     1      46\n100 Wheelchair Men    Switzerland     1      39\n\n\nNow the stuff we looked at in logical operators comes in handy! We can filter rows which match some condition. For example, we might want to look at all winners from Kenya:\n\nwinners[winners$Nationality == \"Kenya\", ]\n\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n27      Men 2006                 Felix Limo       Kenya     2       6      39\n28      Men 2007                 Martin Lel       Kenya     2       7      41\n29      Men 2008                 Martin Lel       Kenya     2       5      15\n30      Men 2009             Samuel Wanjiru       Kenya     2       5      10\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya     2       4      40\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya     2       4      44\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya    NA       4      29\n36      Men 2015             Eliud Kipchoge       Kenya     2       4      42\n37      Men 2016             Eliud Kipchoge       Kenya     2       3       5\n38      Men 2017             Daniel Wanjiru       Kenya     2       5      48\n39      Men 2018             Eliud Kipchoge       Kenya     2       4      17\n40      Men 2019             Eliud Kipchoge       Kenya     2       2      37\n43      Men 2022               Amos Kipruto       Kenya     2       4      39\n44      Men 2023              Kelvin Kiptum       Kenya     2       1      25\n61    Women 1997           Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999           Joyce Chepchumba       Kenya     2      23      22\n64    Women 2000              Tegla Loroupe       Kenya     2      24      33\n68    Women 2004             Margaret Okayo       Kenya     2      22      35\n75    Women 2011     Mary Jepkosgei Keitany       Kenya     2      19      19\n76    Women 2012     Mary Jepkosgei Keitany       Kenya     2      18      37\n77    Women 2013             Priscah Jeptoo       Kenya     2      20      15\n78    Women 2014              Edna Kiplagat       Kenya     2      20      21\n80    Women 2016             Jemima Sumgong       Kenya     2      22      58\n81    Women 2017     Mary Jepkosgei Keitany       Kenya     2      17       1\n82    Women 2018           Vivian Cheruiyot       Kenya     2      18      31\n83    Women 2019              Brigid Kosgei       Kenya     2      18      20\n84    Women 2020              Brigid Kosgei       Kenya     2      18      58\n85    Women 2021        Joyciline Jepkosgei       Kenya     2      17      43\n\n\nTake a close look at the comparison before the ,:\n\nwinners$Nationality == \"Kenya\"\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n [85]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nwinners$Nationality is a vector, so comparing its values to a specified value yields a logical vector with the respective TRUE and FALSE values. We can insert this logical vector in front of the , to extract all rows corresponding to that condition.\nIf we want to extract multiple nationalities at once, we need the %in% operator:\n\nwinners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\n\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n2       Men 1981        Inge Simonsen (Tie)      Norway    NA      11      48\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n27      Men 2006                 Felix Limo       Kenya     2       6      39\n28      Men 2007                 Martin Lel       Kenya     2       7      41\n29      Men 2008                 Martin Lel       Kenya     2       5      15\n30      Men 2009             Samuel Wanjiru       Kenya     2       5      10\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya     2       4      40\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya     2       4      44\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya    NA       4      29\n36      Men 2015             Eliud Kipchoge       Kenya     2       4      42\n37      Men 2016             Eliud Kipchoge       Kenya     2       3       5\n38      Men 2017             Daniel Wanjiru       Kenya     2       5      48\n39      Men 2018             Eliud Kipchoge       Kenya     2       4      17\n40      Men 2019             Eliud Kipchoge       Kenya     2       2      37\n43      Men 2022               Amos Kipruto       Kenya     2       4      39\n44      Men 2023              Kelvin Kiptum       Kenya     2       1      25\n47    Women 1983                Grete Waitz      Norway     2      25      29\n48    Women 1984         Ingrid Kristiansen      Norway     2      24      26\n49    Women 1985         Ingrid Kristiansen      Norway     2      21       6\n50    Women 1986                Grete Waitz      Norway     2      24      54\n51    Women 1987         Ingrid Kristiansen      Norway     2      22      48\n52    Women 1988         Ingrid Kristiansen      Norway     2      25      41\n56    Women 1992        Katrin Dörre-Heinig     Germany     2      29      39\n57    Women 1993        Katrin Dörre-Heinig     Germany     2      27       9\n58    Women 1994        Katrin Dörre-Heinig     Germany     2      32      34\n61    Women 1997           Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999           Joyce Chepchumba       Kenya     2      23      22\n64    Women 2000              Tegla Loroupe       Kenya     2      24      33\n68    Women 2004             Margaret Okayo       Kenya     2      22      35\n72    Women 2008            Irina Mikitenko     Germany     2      24      14\n73    Women 2009            Irina Mikitenko     Germany     2      22      11\n75    Women 2011     Mary Jepkosgei Keitany       Kenya     2      19      19\n76    Women 2012     Mary Jepkosgei Keitany       Kenya     2      18      37\n77    Women 2013             Priscah Jeptoo       Kenya     2      20      15\n78    Women 2014              Edna Kiplagat       Kenya     2      20      21\n80    Women 2016             Jemima Sumgong       Kenya     2      22      58\n81    Women 2017     Mary Jepkosgei Keitany       Kenya     2      17       1\n82    Women 2018           Vivian Cheruiyot       Kenya     2      18      31\n83    Women 2019              Brigid Kosgei       Kenya     2      18      20\n84    Women 2020              Brigid Kosgei       Kenya     2      18      58\n85    Women 2021        Joyciline Jepkosgei       Kenya     2      17      43\n\n\nBy the way, if we want to save our extracted data frame, we can assign it a new name (otherwise it will only get printed into the console, but you cant work further with it):\n\nwinners_nat &lt;- winners[winners$Nationality %in% c(\"Kenya\", \"Germany\", \"Norway\"), ]\nwinners_nat\n\n   Category Year                    Athlete Nationality Hours Minutes Seconds\n2       Men 1981        Inge Simonsen (Tie)      Norway    NA      11      48\n10      Men 1989          Douglas Wakiihuri       Kenya     2       9       3\n25      Men 2004                Evans Rutto       Kenya     2       6      18\n26      Men 2005                 Martin Lel       Kenya     2       7      35\n27      Men 2006                 Felix Limo       Kenya     2       6      39\n28      Men 2007                 Martin Lel       Kenya     2       7      41\n29      Men 2008                 Martin Lel       Kenya     2       5      15\n30      Men 2009             Samuel Wanjiru       Kenya     2       5      10\n32      Men 2011 Emmanuel Kipchirchir Mutai       Kenya     2       4      40\n33      Men 2012   Wilson Kipsang Kiprotich       Kenya     2       4      44\n35      Men 2014   Wilson Kipsang Kiprotich       Kenya    NA       4      29\n36      Men 2015             Eliud Kipchoge       Kenya     2       4      42\n37      Men 2016             Eliud Kipchoge       Kenya     2       3       5\n38      Men 2017             Daniel Wanjiru       Kenya     2       5      48\n39      Men 2018             Eliud Kipchoge       Kenya     2       4      17\n40      Men 2019             Eliud Kipchoge       Kenya     2       2      37\n43      Men 2022               Amos Kipruto       Kenya     2       4      39\n44      Men 2023              Kelvin Kiptum       Kenya     2       1      25\n47    Women 1983                Grete Waitz      Norway     2      25      29\n48    Women 1984         Ingrid Kristiansen      Norway     2      24      26\n49    Women 1985         Ingrid Kristiansen      Norway     2      21       6\n50    Women 1986                Grete Waitz      Norway     2      24      54\n51    Women 1987         Ingrid Kristiansen      Norway     2      22      48\n52    Women 1988         Ingrid Kristiansen      Norway     2      25      41\n56    Women 1992        Katrin Dörre-Heinig     Germany     2      29      39\n57    Women 1993        Katrin Dörre-Heinig     Germany     2      27       9\n58    Women 1994        Katrin Dörre-Heinig     Germany     2      32      34\n61    Women 1997           Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999           Joyce Chepchumba       Kenya     2      23      22\n64    Women 2000              Tegla Loroupe       Kenya     2      24      33\n68    Women 2004             Margaret Okayo       Kenya     2      22      35\n72    Women 2008            Irina Mikitenko     Germany     2      24      14\n73    Women 2009            Irina Mikitenko     Germany     2      22      11\n75    Women 2011     Mary Jepkosgei Keitany       Kenya     2      19      19\n76    Women 2012     Mary Jepkosgei Keitany       Kenya     2      18      37\n77    Women 2013             Priscah Jeptoo       Kenya     2      20      15\n78    Women 2014              Edna Kiplagat       Kenya     2      20      21\n80    Women 2016             Jemima Sumgong       Kenya     2      22      58\n81    Women 2017     Mary Jepkosgei Keitany       Kenya     2      17       1\n82    Women 2018           Vivian Cheruiyot       Kenya     2      18      31\n83    Women 2019              Brigid Kosgei       Kenya     2      18      20\n84    Women 2020              Brigid Kosgei       Kenya     2      18      58\n85    Women 2021        Joyciline Jepkosgei       Kenya     2      17      43\n\n\nWe can also combine multiple logical vectors using & (“and”) and | (“or”). For example, we might want to look at all Kenyan winners before the year 2000:\n\nwinners[winners$Nationality == \"Kenya\" & winners$Year &lt; 2000, ]\n\n   Category Year           Athlete Nationality Hours Minutes Seconds\n10      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n61    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n63    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n\n\nOr at all women winners from Australia in the wheelchair category, and the male winners from the United States in the wheelchair category:\n\nwinners[(winners$Category == \"Wheelchair Women\" & winners$Nationality == \"Australia\") | (winners$Category == \"Wheelchair Men\" & winners$Nationality == \"United States\"), ]\n\n            Category Year            Athlete   Nationality Hours Minutes\n120   Wheelchair Men 2015        Josh George United States     1      31\n124   Wheelchair Men 2019   Daniel Romanchuk United States     1      33\n162 Wheelchair Women 2018 Madison de Rozario     Australia     1      42\n    Seconds\n120      31\n124      37\n162      58\n\n\nIn the long run, always having to define the data frame multiple time in each row can become a bit annoying and clutters the code. Enter, the filter() function:\n\n\n\nThe dplyr package is part of the tidyverse and provides a grammar of data manipulation. We can use filter() to subset rows from a data frame:\n\n\nlibrary(dplyr)\n\nfilter(winners, Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality Hours Minutes Seconds\n1      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n2    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n3    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n\n\n\nNote how we can just write our conditions without connecting them with & (filter() does that automatically for us). Also, we don’t have to put the column names into \"\", because filter() knows that this are column names of the winners data frame, which makes coding a bit more pleasant.\nFor extracting columns, we need select():\n\n\nselect(winners, Year, Athlete)\n\n    Year                    Athlete\n1   1981       Dick Beardsley (Tie)\n2   1981        Inge Simonsen (Tie)\n3   1982                 Hugh Jones\n4   1983               Mike Gratton\n5   1984           Charlie Spedding\n6   1985                Steve Jones\n7   1986             Toshihiko Seko\n8   1987           Hiromi Taniguchi\n9   1988           Henrik Jørgensen\n10  1989          Douglas Wakiihuri\n11  1990            Allister Hutton\n12  1991            Yakov Tolstikov\n13  1992              António Pinto\n14  1993              Eamonn Martin\n15  1994             Dionicio Cerón\n16  1995             Dionicio Cerón\n17  1996             Dionicio Cerón\n18  1997              António Pinto\n19  1998                 Abel Antón\n20  1999      Abdelkader El Mouaziz\n21  2000              António Pinto\n22  2001      Abdelkader El Mouaziz\n23  2002          Khalid Khannouchi\n24  2003            Gezahegne Abera\n25  2004                Evans Rutto\n26  2005                 Martin Lel\n27  2006                 Felix Limo\n28  2007                 Martin Lel\n29  2008                 Martin Lel\n30  2009             Samuel Wanjiru\n31  2010             Tsegaye Kebede\n32  2011 Emmanuel Kipchirchir Mutai\n33  2012   Wilson Kipsang Kiprotich\n34  2013             Tsegaye Kebede\n35  2014   Wilson Kipsang Kiprotich\n36  2015             Eliud Kipchoge\n37  2016             Eliud Kipchoge\n38  2017             Daniel Wanjiru\n39  2018             Eliud Kipchoge\n40  2019             Eliud Kipchoge\n41  2020          Shura Kitata Tola\n42  2021                Sisay Lemma\n43  2022               Amos Kipruto\n44  2023              Kelvin Kiptum\n45  1981                Joyce Smith\n46  1982                Joyce Smith\n47  1983                Grete Waitz\n48  1984         Ingrid Kristiansen\n49  1985         Ingrid Kristiansen\n50  1986                Grete Waitz\n51  1987         Ingrid Kristiansen\n52  1988         Ingrid Kristiansen\n53  1989            Véronique Marot\n54  1990               Wanda Panfil\n55  1991                  Rosa Mota\n56  1992        Katrin Dörre-Heinig\n57  1993        Katrin Dörre-Heinig\n58  1994        Katrin Dörre-Heinig\n59  1995        Małgorzata Sobańska\n60  1996               Liz McColgan\n61  1997           Joyce Chepchumba\n62  1998        Catherina McKiernan\n63  1999           Joyce Chepchumba\n64  2000              Tegla Loroupe\n65  2001               Derartu Tulu\n66  2002            Paula Radcliffe\n67  2003            Paula Radcliffe\n68  2004             Margaret Okayo\n69  2005            Paula Radcliffe\n70  2006               Deena Kastor\n71  2007               Zhou Chunxiu\n72  2008            Irina Mikitenko\n73  2009            Irina Mikitenko\n74  2010           Aselefech Mergia\n75  2011     Mary Jepkosgei Keitany\n76  2012     Mary Jepkosgei Keitany\n77  2013             Priscah Jeptoo\n78  2014              Edna Kiplagat\n79  2015                Tigist Tufa\n80  2016             Jemima Sumgong\n81  2017     Mary Jepkosgei Keitany\n82  2018           Vivian Cheruiyot\n83  2019              Brigid Kosgei\n84  2020              Brigid Kosgei\n85  2021        Joyciline Jepkosgei\n86  2022         Yalemzerf Yehualaw\n87  2023               Sifan Hassan\n88  1983               Gordon Perry\n89  1984                Kevin Breen\n90  1985               Chris Hallam\n91  1986             Gerry O'Rourke\n92  1987               Chris Hallam\n93  1988                  Ted Vince\n94  1989              David Holding\n95  1990             Håkan Ericsson\n96  1991            Farid Amarouche\n97  1992              Daniel Wesley\n98  1993            George Vandamme\n99  1994              David Holding\n100 1995                 Heinz Frei\n101 1996              David Holding\n102 1997              David Holding\n103 1998                 Heinz Frei\n104 1999                 Heinz Frei\n105 2000             Kevin Papworth\n106 2001            Denis Lemeunier\n107 2002                 David Weir\n108 2003               Joël Jeannot\n109 2004               Saúl Mendoza\n110 2005               Saúl Mendoza\n111 2006                 David Weir\n112 2007                 David Weir\n113 2008                 David Weir\n114 2009              Kurt Fearnley\n115 2010               Josh Cassidy\n116 2011                 David Weir\n117 2012                 David Weir\n118 2013              Kurt Fearnley\n119 2014                 Marcel Hug\n120 2015                Josh George\n121 2016                 Marcel Hug\n122 2017                 David Weir\n123 2018                 David Weir\n124 2019           Daniel Romanchuk\n125 2020              Brent Lakatos\n126 2021                 Marcel Hug\n127 1983               Denise Smith\n128 1984                Kay McShane\n129 1985                Kay McShane\n130 1986                Kay McShane\n131 1987             Karen Davidson\n132 1988             Karen Davidson\n133 1989            Josie Cichockyj\n134 1990              Connie Hansen\n135 1991              Connie Hansen\n136 1992        Tanni Grey-Thompson\n137 1993                  Rose Hill\n138 1994        Tanni Grey-Thompson\n139 1995                  Rose Hill\n140 1996        Tanni Grey-Thompson\n141 1997         Monica Wetterström\n142 1998        Tanni Grey-Thompson\n143 1999         Monica Wetterström\n144 2000               Sarah Piercy\n145 2001        Tanni Grey-Thompson\n146 2002        Tanni Grey-Thompson\n147 2003       Francesca Porcellato\n148 2004       Francesca Porcellato\n149 2005       Francesca Porcellato\n150 2006       Francesca Porcellato\n151 2007               Shelly Woods\n152 2008                Sandra Graf\n153 2009             Amanda McGrory\n154 2010            Wakako Tsuchida\n155 2011             Amanda McGrory\n156 2012               Shelly Woods\n157 2013           Tatyana McFadden\n158 2014           Tatyana McFadden\n159 2015           Tatyana McFadden\n160 2016           Tatyana McFadden\n161 2017              Manuela Schär\n162 2018         Madison de Rozario\n163 2019              Manuela Schär\n164 2020            Nikita den Boer\n165 2021              Manuela Schär\n\n\n\n\n\nHold on! Normally, we wouldn’t write tidyverse code like that. Instead, we would use the pipe operator %&gt;% (than do), which makes it easy to connect multiple function calls:\n\n\nwinners %&gt;%\n  filter(Nationality == \"Kenya\", Year &lt; 2000)\n\n  Category Year           Athlete Nationality Hours Minutes Seconds\n1      Men 1989 Douglas Wakiihuri       Kenya     2       9       3\n2    Women 1997  Joyce Chepchumba       Kenya     2      26      51\n3    Women 1999  Joyce Chepchumba       Kenya     2      23      22\n\n\n\nHere, we first input the data frame we want to manipulate. Than we filter, as specified by the pipe operator. Like this, we can easily connect multiple function calls instead of nesting them within multiple brackets, which increases the readability:\n\nwinners[winners$Year &gt; 2000 & winners$Category == \"Women\", c(\"Category\", \"Year\")]\n\n   Category Year\n65    Women 2001\n66    Women 2002\n67    Women 2003\n68    Women 2004\n69    Women 2005\n70    Women 2006\n71    Women 2007\n72    Women 2008\n73    Women 2009\n74    Women 2010\n75    Women 2011\n76    Women 2012\n77    Women 2013\n78    Women 2014\n79    Women 2015\n80    Women 2016\n81    Women 2017\n82    Women 2018\n83    Women 2019\n84    Women 2020\n85    Women 2021\n86    Women 2022\n87    Women 2023\n\n\nbecomes:\n\n\nwinners %&gt;%\n  filter(Year &gt; 2000, Category == \"Women\") %&gt;%\n  select(Category, Year)\n\n   Category Year\n1     Women 2001\n2     Women 2002\n3     Women 2003\n4     Women 2004\n5     Women 2005\n6     Women 2006\n7     Women 2007\n8     Women 2008\n9     Women 2009\n10    Women 2010\n11    Women 2011\n12    Women 2012\n13    Women 2013\n14    Women 2014\n15    Women 2015\n16    Women 2016\n17    Women 2017\n18    Women 2018\n19    Women 2019\n20    Women 2020\n21    Women 2021\n22    Women 2022\n23    Women 2023\n\n\n\nMuch nicer to read, right?\nSome notes on this syntax: If we don’t have any additional arguments we want to put into the function, we can just write the function name without any brackets. The pipe operator will give the result of the last function as input into the next function. If we want to clearly state which of the function arguments should receive the input, we can write a ., which can be read as output of the previous function call."
  },
  {
    "objectID": "subsetting.html#vectors",
    "href": "subsetting.html#vectors",
    "title": "Subsetting data",
    "section": "",
    "text": "Finally, let’s take a quick look at how to extract elements from a vector. It’s pretty straight forward: we just put the position of the element we want to extract behind the vector in square brackets:\n\nvec_athlete &lt;- winners$Athlete # remember: `$` returns a vector\nvec_athlete[2]\n\n[1] \"Inge Simonsen (Tie)\"\n\n\nOf course we can also do that for multiple elements:\n\nvec_athlete[c(2,3,4)]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n## Or, less to write:\nvec_athlete[2:4]\n\n[1] \"Inge Simonsen (Tie)\" \"Hugh Jones\"          \"Mike Gratton\"       \n\n\nAnother way would be to provide a logical vector, which defines for each position, if we want to extract the element or not (like we already did for data frames):\n\nvec_athlete[c(rep(TRUE, 100), rep(FALSE, 65))]\n\n  [1] \"Dick Beardsley (Tie)\"       \"Inge Simonsen (Tie)\"       \n  [3] \"Hugh Jones\"                 \"Mike Gratton\"              \n  [5] \"Charlie Spedding\"           \"Steve Jones\"               \n  [7] \"Toshihiko Seko\"             \"Hiromi Taniguchi\"          \n  [9] \"Henrik Jørgensen\"           \"Douglas Wakiihuri\"         \n [11] \"Allister Hutton\"            \"Yakov Tolstikov\"           \n [13] \"António Pinto\"              \"Eamonn Martin\"             \n [15] \"Dionicio Cerón\"             \"Dionicio Cerón\"            \n [17] \"Dionicio Cerón\"             \"António Pinto\"             \n [19] \"Abel Antón\"                 \"Abdelkader El Mouaziz\"     \n [21] \"António Pinto\"              \"Abdelkader El Mouaziz\"     \n [23] \"Khalid Khannouchi\"          \"Gezahegne Abera\"           \n [25] \"Evans Rutto\"                \"Martin Lel\"                \n [27] \"Felix Limo\"                 \"Martin Lel\"                \n [29] \"Martin Lel\"                 \"Samuel Wanjiru\"            \n [31] \"Tsegaye Kebede\"             \"Emmanuel Kipchirchir Mutai\"\n [33] \"Wilson Kipsang Kiprotich\"   \"Tsegaye Kebede\"            \n [35] \"Wilson Kipsang Kiprotich\"   \"Eliud Kipchoge\"            \n [37] \"Eliud Kipchoge\"             \"Daniel Wanjiru\"            \n [39] \"Eliud Kipchoge\"             \"Eliud Kipchoge\"            \n [41] \"Shura Kitata Tola\"          \"Sisay Lemma\"               \n [43] \"Amos Kipruto\"               \"Kelvin Kiptum\"             \n [45] \"Joyce Smith\"                \"Joyce Smith\"               \n [47] \"Grete Waitz\"                \"Ingrid Kristiansen\"        \n [49] \"Ingrid Kristiansen\"         \"Grete Waitz\"               \n [51] \"Ingrid Kristiansen\"         \"Ingrid Kristiansen\"        \n [53] \"Véronique Marot\"            \"Wanda Panfil\"              \n [55] \"Rosa Mota\"                  \"Katrin Dörre-Heinig\"       \n [57] \"Katrin Dörre-Heinig\"        \"Katrin Dörre-Heinig\"       \n [59] \"Małgorzata Sobańska\"        \"Liz McColgan\"              \n [61] \"Joyce Chepchumba\"           \"Catherina McKiernan\"       \n [63] \"Joyce Chepchumba\"           \"Tegla Loroupe\"             \n [65] \"Derartu Tulu\"               \"Paula Radcliffe\"           \n [67] \"Paula Radcliffe\"            \"Margaret Okayo\"            \n [69] \"Paula Radcliffe\"            \"Deena Kastor\"              \n [71] \"Zhou Chunxiu\"               \"Irina Mikitenko\"           \n [73] \"Irina Mikitenko\"            \"Aselefech Mergia\"          \n [75] \"Mary Jepkosgei Keitany\"     \"Mary Jepkosgei Keitany\"    \n [77] \"Priscah Jeptoo\"             \"Edna Kiplagat\"             \n [79] \"Tigist Tufa\"                \"Jemima Sumgong\"            \n [81] \"Mary Jepkosgei Keitany\"     \"Vivian Cheruiyot\"          \n [83] \"Brigid Kosgei\"              \"Brigid Kosgei\"             \n [85] \"Joyciline Jepkosgei\"        \"Yalemzerf Yehualaw\"        \n [87] \"Sifan Hassan\"               \"Gordon Perry\"              \n [89] \"Kevin Breen\"                \"Chris Hallam\"              \n [91] \"Gerry O'Rourke\"             \"Chris Hallam\"              \n [93] \"Ted Vince\"                  \"David Holding\"             \n [95] \"Håkan Ericsson\"             \"Farid Amarouche\"           \n [97] \"Daniel Wesley\"              \"George Vandamme\"           \n [99] \"David Holding\"              \"Heinz Frei\""
  },
  {
    "objectID": "subsetting.html#exercises",
    "href": "subsetting.html#exercises",
    "title": "Subsetting data",
    "section": "",
    "text": "Load the tutoR package and start the exercise by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"subsetting\", package = \"tutoR\")"
  },
  {
    "objectID": "subsetting.html#footnotes",
    "href": "subsetting.html#footnotes",
    "title": "Subsetting data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nImage by Miguel A Amutio on Unsplash.↩︎"
  },
  {
    "objectID": "plotting.html",
    "href": "plotting.html",
    "title": "R - Open Research Summer School",
    "section": "",
    "text": "This is Zusatz. Plot world map with the winning countries, the more the darker. Same colours for same continents."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Basic operations",
    "section": "",
    "text": "Let’s take a quick look at the most important basic operations in R.\n\n\nWe can use R as a calculator:\n\n(1 + 2) * 3^2\n2 - 3/log(8)\n\n\n\n\nWe can create objects in R by using the assignment operator &lt;-, which assigns a value to an object:\n\n## Assign the result of 1 + 1 to the object 'result':\nresult &lt;- 1 + 1\nresult\n\n[1] 2\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result &lt;- !(10 &gt; 1)\nlog_result\n\n[1] FALSE\n\n\n\n\n\nThe boolean variables in R are TRUE and FALSE. Comparison operators return either TRUE or FALSE:\n\n1 &lt; 2\n\n[1] TRUE\n\n# But:\n2 &lt; 1\n\n[1] FALSE\n\n\nThese are the comparison operators you will typically use:\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;=\nless or equal\n\n\n&gt;=\ngreater or equal\n\n\n\n\n\nMainly we will use these logical operation to check which elements in a vector satisfy some requirements:\n\n# Build a vector of numbers ranging from 1 to 10\nvec_num &lt;- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined.\n\n\n\nWe can invert boolean values by using !:\n\n!TRUE\n\n[1] FALSE\n\n!(1 &gt; 100)\n\n[1] TRUE\n\n!(1:10 != c(1, 2))\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n\nEverything that does something in R is a function. A function call has the form: functionname(argument1 = value, argument2 = value, ...). One basic example for a function is the function that can calculate the square root:\n\nsqrt(4)\n\n[1] 2\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don’t rely on the order of the function arguments:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nwill rep 4 10 times. If we swap the arguments, the 10 will be repeat 4 times:\n\nrep(10, 4)\n\n[1] 10 10 10 10\n\n\nBut if we specify which value belongs to which function argument, the order doesn’t matter:\n\nrep(times = 10, x = 4)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nHow do we know which arguments a function has?:\n\n\n\nOne of the most important functions in R is the help-function ?:\n\n?rep\n\nwill open the documentation for the function with the description of its usage, details about the arguments … In the next chapter we will take a very quick look at R’s data types.\n\n\n\n\nLoad the tutoR package and start the exercises about the basic operations by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"basics\", package = \"tutoR\")"
  },
  {
    "objectID": "basics.html#basic-mathematical-operations",
    "href": "basics.html#basic-mathematical-operations",
    "title": "Basic operations",
    "section": "",
    "text": "We can use R as a calculator:\n\n(1 + 2) * 3^2\n2 - 3/log(8)"
  },
  {
    "objectID": "basics.html#assignment-operator",
    "href": "basics.html#assignment-operator",
    "title": "Basic operations",
    "section": "",
    "text": "We can create objects in R by using the assignment operator &lt;-, which assigns a value to an object:\n\n## Assign the result of 1 + 1 to the object 'result':\nresult &lt;- 1 + 1\nresult\n\n[1] 2\n\n## Assign the result of the comparison to the object 'log_result':\nlog_result &lt;- !(10 &gt; 1)\nlog_result\n\n[1] FALSE"
  },
  {
    "objectID": "basics.html#comparisons-and-logical-operators",
    "href": "basics.html#comparisons-and-logical-operators",
    "title": "Basic operations",
    "section": "",
    "text": "The boolean variables in R are TRUE and FALSE. Comparison operators return either TRUE or FALSE:\n\n1 &lt; 2\n\n[1] TRUE\n\n# But:\n2 &lt; 1\n\n[1] FALSE\n\n\nThese are the comparison operators you will typically use:\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;=\nless or equal\n\n\n&gt;=\ngreater or equal\n\n\n\n\n\nMainly we will use these logical operation to check which elements in a vector satisfy some requirements:\n\n# Build a vector of numbers ranging from 1 to 10\nvec_num &lt;- 1:10\n\n# Check which of these numbers are smaller than 5\nvec_num &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nThis will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined."
  },
  {
    "objectID": "basics.html#section",
    "href": "basics.html#section",
    "title": "Basic operations",
    "section": "",
    "text": "We can invert boolean values by using !:\n\n!TRUE\n\n[1] FALSE\n\n!(1 &gt; 100)\n\n[1] TRUE\n\n!(1:10 != c(1, 2))\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "basics.html#functions",
    "href": "basics.html#functions",
    "title": "Basic operations",
    "section": "",
    "text": "Everything that does something in R is a function. A function call has the form: functionname(argument1 = value, argument2 = value, ...). One basic example for a function is the function that can calculate the square root:\n\nsqrt(4)\n\n[1] 2\n\n\nWe can also assign the name of the function argument to our value. This is clearer, as we don’t rely on the order of the function arguments:\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nwill rep 4 10 times. If we swap the arguments, the 10 will be repeat 4 times:\n\nrep(10, 4)\n\n[1] 10 10 10 10\n\n\nBut if we specify which value belongs to which function argument, the order doesn’t matter:\n\nrep(times = 10, x = 4)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\nHow do we know which arguments a function has?:"
  },
  {
    "objectID": "basics.html#help",
    "href": "basics.html#help",
    "title": "Basic operations",
    "section": "",
    "text": "One of the most important functions in R is the help-function ?:\n\n?rep\n\nwill open the documentation for the function with the description of its usage, details about the arguments … In the next chapter we will take a very quick look at R’s data types."
  },
  {
    "objectID": "basics.html#exercise",
    "href": "basics.html#exercise",
    "title": "Basic operations",
    "section": "",
    "text": "Load the tutoR package and start the exercises about the basic operations by typing the following code into your console:\n\n\nlearnr::run_tutorial(name = \"basics\", package = \"tutoR\")"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "Packages are extensions to the base R you get by default. Most times they provide many new functions, bundled around a specific use case. When working with R you will have to rely heavily on packages developed by others. There are many, many great packages out there facilitating your work with R and making possible many different analyses, visualizations and many more.\nWe can compare them somewhat to apps in an appstore:\n1 First, we have to install the package: install.packages(\"packagename\"). - Most of the openly available packages lie on CRAN (Comprehensive R Archive Network). But you can also download packages form other sources, for example GitHub. This is what you did when downloading the tutoR package in About this workshop.\n2 Then, we have to load them in each session where we want to use them (like tipping on the app icon): library(packagename).\n\nNote that in install.packages(\"packagename\") we have to put the package into quotation marks, when calling library(packagename) not.\n\n\n\nBefore we can use packages we have to install them once. Most packages are hosted via the Comprehensive R Archive Network (CRAN), to install a package from there, we can use:\n\ninstall.packages(\"aRtsy\")\n\nBut often packages are only (or as well) provided via GitHub. To install a package from there, use:\n\ndevtools::install_github(\"cutterkom/generativeart\")\n\n\n\n\nAfter installing a package, we have to load it into our R session:\n\n#library(aRtsy)\n\nNow we are free to use it, in this case to generate some artwork:\n\n#set.seed(1)\n#canvas_collatz(colors = colorPalette(\"lava\"))\n\n\n\n\nOf course it can happen that different packages include functions with the same name. For example, look at the warnings we get when installing and then loading the packages ggplot2 and psych:\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"psych\")\n\n\nlibrary(ggplot2)\nlibrary(psych)\n\n\nAttaching package: 'psych'\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n\n\nThere seems to be a function named alpha which is included in both packages (but not the same function, just the same name). The warning message notifies us that the object alpha from ggplot2 is masked, so if we call it, the alpha function from the psych package is used. To solve that quandary, we can use the :: operator. In front we write the package name, and behind it the name of the function we want to use from that package:\n\nggplot2::alpha()\npsych::alpha()\n\n\n\n\nFinally, a quick note on package management and reproducability of your code. R versions and package versions will change over time, in which case also the output of your code might change. Therefore, it is good practice to save the R version and package versions, so your code stays (kind of) reproducable for a longer period of time. The most straight forward thing to do is to just write down your R-version and the package versions at the top of your script. Call the versions you use with:\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] psych_2.3.6   ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       nlme_3.1-162      cli_3.6.1         knitr_1.43       \n [5] rlang_1.1.1       xfun_0.39         generics_0.1.3    renv_1.0.0       \n [9] jsonlite_1.8.7    glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5  \n[13] scales_1.2.1      fansi_1.0.4       rmarkdown_2.23    grid_4.3.1       \n[17] evaluate_0.21     munsell_0.5.0     tibble_3.2.1      fastmap_1.1.1    \n[21] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2      \n[25] pkgconfig_2.0.3   rstudioapi_0.15.0 lattice_0.21-8    digest_0.6.32    \n[29] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3        parallel_4.3.1   \n[33] mnormt_2.1.1      pillar_1.9.0      magrittr_2.0.3    withr_2.5.0      \n[37] tools_4.3.1       gtable_0.3.3     \n\n\nA more elegant approach to manage your packages is to use a dedicated package like renv, which will make it a lot easier to manage your package versions. But this is past the scope of this workshop, just keep in mind it might be something rewarding to look at, if you should start to programm more with R. Instead, let’s look at how to get data into R in the next chapter, so we can actually get to work with it."
  },
  {
    "objectID": "packages.html#install-packages",
    "href": "packages.html#install-packages",
    "title": "Packages",
    "section": "",
    "text": "Before we can use packages we have to install them once. Most packages are hosted via the Comprehensive R Archive Network (CRAN), to install a package from there, we can use:\n\ninstall.packages(\"aRtsy\")\n\nBut often packages are only (or as well) provided via GitHub. To install a package from there, use:\n\ndevtools::install_github(\"cutterkom/generativeart\")"
  },
  {
    "objectID": "packages.html#load-packages",
    "href": "packages.html#load-packages",
    "title": "Packages",
    "section": "",
    "text": "After installing a package, we have to load it into our R session:\n\n#library(aRtsy)\n\nNow we are free to use it, in this case to generate some artwork:\n\n#set.seed(1)\n#canvas_collatz(colors = colorPalette(\"lava\"))"
  },
  {
    "objectID": "packages.html#conflicts",
    "href": "packages.html#conflicts",
    "title": "Packages",
    "section": "",
    "text": "Of course it can happen that different packages include functions with the same name. For example, look at the warnings we get when installing and then loading the packages ggplot2 and psych:\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"psych\")\n\n\nlibrary(ggplot2)\nlibrary(psych)\n\n\nAttaching package: 'psych'\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n\n\nThere seems to be a function named alpha which is included in both packages (but not the same function, just the same name). The warning message notifies us that the object alpha from ggplot2 is masked, so if we call it, the alpha function from the psych package is used. To solve that quandary, we can use the :: operator. In front we write the package name, and behind it the name of the function we want to use from that package:\n\nggplot2::alpha()\npsych::alpha()"
  },
  {
    "objectID": "packages.html#deliberate-package-management",
    "href": "packages.html#deliberate-package-management",
    "title": "Packages",
    "section": "",
    "text": "Finally, a quick note on package management and reproducability of your code. R versions and package versions will change over time, in which case also the output of your code might change. Therefore, it is good practice to save the R version and package versions, so your code stays (kind of) reproducable for a longer period of time. The most straight forward thing to do is to just write down your R-version and the package versions at the top of your script. Call the versions you use with:\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] psych_2.3.6   ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       nlme_3.1-162      cli_3.6.1         knitr_1.43       \n [5] rlang_1.1.1       xfun_0.39         generics_0.1.3    renv_1.0.0       \n [9] jsonlite_1.8.7    glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5  \n[13] scales_1.2.1      fansi_1.0.4       rmarkdown_2.23    grid_4.3.1       \n[17] evaluate_0.21     munsell_0.5.0     tibble_3.2.1      fastmap_1.1.1    \n[21] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2      \n[25] pkgconfig_2.0.3   rstudioapi_0.15.0 lattice_0.21-8    digest_0.6.32    \n[29] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3        parallel_4.3.1   \n[33] mnormt_2.1.1      pillar_1.9.0      magrittr_2.0.3    withr_2.5.0      \n[37] tools_4.3.1       gtable_0.3.3     \n\n\nA more elegant approach to manage your packages is to use a dedicated package like renv, which will make it a lot easier to manage your package versions. But this is past the scope of this workshop, just keep in mind it might be something rewarding to look at, if you should start to programm more with R. Instead, let’s look at how to get data into R in the next chapter, so we can actually get to work with it."
  },
  {
    "objectID": "packages.html#footnotes",
    "href": "packages.html#footnotes",
    "title": "Packages",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIcons from icons8.de.↩︎\nIcons from icons8.de.↩︎"
  },
  {
    "objectID": "load_data.html",
    "href": "load_data.html",
    "title": "Load data",
    "section": "",
    "text": "There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly readxl and haven.\n\n\n\n\n\n\n\n\n\nData.type\nImport\nExport\n\n\n\n\nR objects (.Rdata, .rda)\nload()\nsave()\n\n\nsingle R object (.Rds)\nreadRDS()\nsaveRDS()\n\n\ntext-files (.txt)\nread.table()\nwrite.table()\n\n\n.csv-files (.csv)\nread.csv()\nwrite.csv()\n\n\nExcel-files (.xlsx)\nreadxl::read_excel()\nwritexl::write_xlsx()\n\n\nSPSS-files (.sav)\nhaven::read_sav()\nhaven::write_sav()\n\n\nSAS-files (.sas)\nhaven::read_sas()\nhaven::write_sas()\n\n\nStata-files (.stata)\nhaven::read_dta()\nhaven::write_dta()\n\n\n\n\n\n\n\nYou can head to a specific file by using the full path (absolute path): \"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\". This approach has some disadvantages: it will only work on my notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use relative paths if possible: \".\\raw_data\\winners.rda\". This will always work independently of the device i am working on, as long as i am in the correct working directory.\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\ngetwd()\n\n[1] \"/home/runner/work/r_tutorial/r_tutorial\"\n\n\nLuckily, as long as we work with RStudio projects, we don’t have to deal with that, as the working directory is set automatically by the project.\nNow take a look at the working directory and the relative path i used for loading the winners.rda. Notice something? Correct, both paths combined equal the absolute path to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is."
  },
  {
    "objectID": "load_data.html#data-types",
    "href": "load_data.html#data-types",
    "title": "Load data",
    "section": "",
    "text": "There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly readxl and haven.\n\n\n\n\n\n\n\n\n\nData.type\nImport\nExport\n\n\n\n\nR objects (.Rdata, .rda)\nload()\nsave()\n\n\nsingle R object (.Rds)\nreadRDS()\nsaveRDS()\n\n\ntext-files (.txt)\nread.table()\nwrite.table()\n\n\n.csv-files (.csv)\nread.csv()\nwrite.csv()\n\n\nExcel-files (.xlsx)\nreadxl::read_excel()\nwritexl::write_xlsx()\n\n\nSPSS-files (.sav)\nhaven::read_sav()\nhaven::write_sav()\n\n\nSAS-files (.sas)\nhaven::read_sas()\nhaven::write_sas()\n\n\nStata-files (.stata)\nhaven::read_dta()\nhaven::write_dta()"
  },
  {
    "objectID": "load_data.html#absolute-paths-vs.-relative-paths",
    "href": "load_data.html#absolute-paths-vs.-relative-paths",
    "title": "Load data",
    "section": "",
    "text": "You can head to a specific file by using the full path (absolute path): \"C:\\Users\\hafiznij\\Documents\\GitHub\\r_tutorial\\raw_data\\winners.rda\". This approach has some disadvantages: it will only work on my notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use relative paths if possible: \".\\raw_data\\winners.rda\". This will always work independently of the device i am working on, as long as i am in the correct working directory.\nThe working directory is the path R is currently working in. I can obtain it by typing:\n\ngetwd()\n\n[1] \"/home/runner/work/r_tutorial/r_tutorial\"\n\n\nLuckily, as long as we work with RStudio projects, we don’t have to deal with that, as the working directory is set automatically by the project.\nNow take a look at the working directory and the relative path i used for loading the winners.rda. Notice something? Correct, both paths combined equal the absolute path to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is."
  }
]