# Basic operations

Let's take a quick look at the most important basic operations in R. You can also use a [cheat sheet](https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf) to keep an overview during the course.

## Basic mathematical operations

We can use R as a calculator:

```{r, eval = FALSE}
(1 + 2) * 3^2
2 - 3/log(8)
```

## Assignment operator

We can create objects in R by using the assignment operator `<-`, which assigns a value to an object:

```{r}
## Assign the result of 1 + 1 to the object 'result':
result <- 1 + 1
result

## Assign the result of the comparison to the object 'log_result':
log_result <- !(10 > 1)
log_result
```

## Comparisons and Logical operators

The boolean variables in R are `TRUE` and `FALSE`. Comparison operators return either `TRUE` or `FALSE`:

```{r}
1 < 2

# But:
2 < 1

```

These are the comparison operators you will typically use:

```{r, echo = FALSE}
dat_structs <- data.frame("Operator" = c("<", ">", "==", "!=", "<=", ">="),
                          "Description" = c("less than", "greater than", "equal to", "not equal to", "less or equal", "greater or equal")
)

knitr::kable(dat_structs, "pipe",
             col.names = c("Operator", "Description")
             ) 
```

Mainly we will use these logical operation to check which elements in a [vector](data_structures.qmd#vector) satisfy some requirements:

```{r}
# Build a vector of numbers ranging from 1 to 10
vec_num <- 1:10

# Check which of these numbers are smaller than 5
vec_num < 5
```

This will become important later on, when we want to subset vectors and data frames to extract only those values that satisfy some requirements we defined.

## !

We can invert boolean values by using `!`:

```{r}
!TRUE

!(1 > 100)

!(1:10 != c(1, 2))
```

## Functions

Everything that **does** something in R is a function. A function call has the form: `functionname(argument1 = value, argument2 = value, ...)`. One basic example for a function is the function that can calculate the square root:

```{r}
sqrt(4)
```

We can also assign the name of the function argument to our value. This is clearer, as we don't rely on the order of the function arguments:

```{r}
rep(4, 10)
```

will rep `4` `10` times. If we swap the arguments, the `10` will be repeat `4` times:

```{r}
rep(10, 4)
```

But if we specify which value belongs to which function argument, the order doesn't matter:

```{r}
rep(times = 10, x = 4)
```

How do we know which arguments a function has?:

## HELP!

One of the most important functions in R is the help-function `?`:

```{r}
?rep
```

will open the documentation for the function with the description of its usage, details about the arguments ... In the next chapter we will take a very quick look at R's data types.

## Exercise

1.  Load the `tutoR` package and start the exercises about the `basic operations` by typing the following code into your console:

```{r, eval = FALSE}
learnr::run_tutorial(name = "basics", package = "tutoR")
```
