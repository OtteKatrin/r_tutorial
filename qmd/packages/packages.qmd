# Packages

Packages are extensions to the `base R` you get by default. Most times they provide many new functions, bundled around a specific use case. When working with R you will have to rely heavily on packages developed by others. There are many, many great packages out there facilitating your work with R and making possible many different analyses, visualizations and many more.

We can compare them somewhat to apps in an appstore:

![](./pictures/playstore.png){width="19"}[^packages-1] First, we have to install the package: `install.packages("packagename")`. - Most of the openly available packages lie on [CRAN](https://cran.r-project.org/) (Comprehensive R Archive Network). But you can also download packages form other sources, for example [GitHub](https://github.com/). This is what you did when downloading the `tutoR` package in [About this workshop](setup.qmd#about-this-workshop).

[^packages-1]: Icons from [icons8.de](https://icons8.de).

![](./pictures/app.png){width="19"}[^packages-2] Then, we have to load them in each session where we want to use them (like tipping on the app icon): `library(packagename)`.

[^packages-2]: Icons from [icons8.de](https://icons8.de).

-   Note that in `install.packages("packagename")` we have to put the package into quotation marks, when calling `library(packagename)` not.

## Install packages

Before we can use packages we have to install them once. Most packages are hosted via the Comprehensive R Archive Network (CRAN), to install a package from there, we can use:

```{r, eval = FALSE}
install.packages("aRtsy")
```

But often packages are only (or as well) provided via GitHub. To install a package from there, use:

```{r, eval = FALSE}
devtools::install_github("cutterkom/generativeart")
```

## Load packages

After installing a package, we have to load it into our R session:

```{r}
#library(aRtsy)
```

Now we are free to use it, in this case to generate some artwork:

```{r}
#set.seed(1)
#canvas_collatz(colors = colorPalette("lava"))
```



## Function conflicts


::: {.callout-note collapse="true"}

## Expand to learn about dealing with identical function names from different packages

Of course it can happen that different packages include functions with the same name. 
For example, look at the warnings we get when installing and then loading the packages `ggplot2` and `psych`:

```{r, eval = FALSE}
install.packages("ggplot2")
install.packages("psych")
```

```{r}
library(ggplot2)
library(psych)
```

There seems to be a function named `alpha` which is included in both packages (but not the same function, just the same name). The warning message notifies us that the object `alpha` from `ggplot2` is masked, so if we call it, the `alpha` function from the `psych` package is used. To solve that quandary, we can use the `::` operator. In front we write the package name, and behind it the name of the function we want to use from that package:

```{r, eval = FALSE}
ggplot2::alpha()
psych::alpha()
```
:::

## Deliberate package management

::: {.callout-note collapse="true"}
## Expand to learn about managing package versions

Finally, a quick note on package management and reproducability of your code. 
R versions and package versions **will** change over time, in which case also the output of your code might change. Therefore, it is good practice to save the R version and package versions, so your code stays (kind of) reproducable for a longer period of time. The most straight forward thing to do is to just write down your R-version and the package versions at the top of your script. Call the versions you use with:

```{r}
sessionInfo()
```

A more elegant approach to manage your packages is to use a dedicated package like [`renv`](https://rstudio.github.io/renv/articles/renv.html), which will make it a lot easier to manage your package versions. But this is past the scope of this workshop, just keep in mind it might be something rewarding to look at, if you should start to programm more with R. Instead, let's look at how to get data into R in the next chapter, so we can actually get to work with it.
:::
