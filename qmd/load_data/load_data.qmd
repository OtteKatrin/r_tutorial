# Load data

## Data types

There are many different data types out there, of which many can be loaded into R. Depending on the type, different commands are used within R. Sometimes, we will have to use additional packages to get access to that function, mainly `readxl` and `haven`.

```{r, results = 'asis', echo = FALSE}
formats_dat <- data.frame("Data type" = c("R objects (.Rdata, .rda)", 
                                       "single R object (.Rds)", 
                                       "text-files (.txt)",
                                       ".csv-files (.csv)",
                                       "Excel-files (.xlsx)",
                                       "SPSS-files (.sav)", 
                                       "SAS-files (.sas)", 
                                       "Stata-files (.stata)"
                                       ),
                          Import = c("````load()````",
                                       "````readRDS()````",
                                       "````read.table()````",
                                       "````read.csv()````",
                                       "````readxl::read_excel()````",
                                       "````haven::read_sav()````",
                                       "````haven::read_sas()````",
                                       "````haven::read_dta()````"),
                          Export = c("````save()````",
                                       "````saveRDS()````",
                                       "````write.table()````",
                                       "````write.csv()````",
                                       "````writexl::write_xlsx()````",
                                       "````haven::write_sav()````",
                                       "````haven::write_sas()````",
                                       "````haven::write_dta()````")
                          )

knitr::kable(formats_dat, "pipe")
```

## Absolute paths vs. relative paths

You can head to a specific file by using the full path (**absolute path**): `"C:\Users\hafiznij\Documents\GitHub\r_tutorial\raw_data\winners.rda"`. This approach has some disadvantages: it will only work on **my** notebook. If i want to continue my project on another device, i will have to change the path. The same goes for other people who want to work with my project. So, to keep these paths more reproducable, we should always use **relative paths** if possible: `".\raw_data\winners.rda"`. This will always work independently of the device i am working on, as long as i am in the correct **working directory**.

The working directory is the path R is currently working in. I can obtain it by typing:

```{r}
getwd()
```

Luckily, as long as we work with RStudio projects, we don't have to deal with that, as the working directory is set automatically by the project.

Now take a look at the working directory and the relative path i used for loading the `winners.rda`. Notice something? Correct, both paths combined equal the **absolute path** to the file. So by splitting it up, we obtain a more reproducible path, that works independent of where the current working directory is.

## The `here` package

Another great way to deal with the path confusion is to use the `here` package. It can build the paths relative to the directory where your RStudio project is saved in. For example, `".\raw_data\winners.rda"` becomes `here::here("raw_data", "winners.rda")`. This is not increadibly important right now, but I need to mention it because I have to use these path structures sometimes during the tutorial, so don't be confused! It is just another way to build file paths. Look [here](https://here.r-lib.org/) (:D) if you want to learn more about the package.
