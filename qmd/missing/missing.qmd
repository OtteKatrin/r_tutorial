---
title: "Missing values"
---

```{r, echo = FALSE}
winners <- readRDS(file = here::here("raw_data", "winners.rds"))

continents <- read.csv(
  file = here::here("raw_data", "continents.csv")
)

winners_continents <- merge(
  x = winners,
  y = continents,
  by.x = "Nationality",
  by.y = "Entity"
)
```

Now that we now how to extract values from a bigger data set, we can deal with the missing values we encountered when [taking a look](../peeking/peeking.qmd) at our `characters` data set.

Missing values are denoted in R by `NA` (or `NaN` in some cases). They nullify a calculation pretty strongly - if one missing value is found somewhere along the line, the result will also be `NA` (if not specified otherwise):

```{r}
4 + 5 + NA
```

That's why our newly build columns include `NAs`: The column `Hours` already had some, and by adding with `NAs` we just produced new ones.

To check if values are `NA`, we can use `is.na()`:

```{r, output.lines = 4}
is.na(winners$Hours)
```

Some `TRUEs`, so there are missing values here. Let's count them (Summing a [logical vector](../basics/basics.qmd#comparisons-and-logical-operators) counts the number of `TRUE` values.):

```{r}
sum(is.na(winners$Hours))
```

We seem to have `5` missings in this column. 

There are multiple different ways to deal with missings. For this tutorial, we just remove cases with missing values on the `Hours` variable, as we want to look at the finishing times, and missing times could pose a problem:

```{r, output.lines = 4}
winners_na <- winners[!is.na(winners$Hours), ]
```

What happens here? Like always when filtering specific rows, we define a logical vector, which has a `TRUE` for all rows that have a missing on `ID` and a `FALSE` for all others (by using the `!` operator, which inverts the boolean values - otherwise we would extract all rows with missing values in the `Hours` column):

```{r, output.lines = 4}
!is.na(winners$Hours)
```

We also assign the new name `winners_na` to the resulting data frame, so we don't overwrite the original one. 

As already stated, it is not always necessary to remove `NAs` manually from the data set. In other cases it might be feasible to ignore them, and many functions can deal with missing values by themselves. 

