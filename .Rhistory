renv::status()
# sum
1 + 2
# substract
2 - 4
# multiply
4 * 4
# divide
3/2
renv::install("learnr")
#Console
renv::status()
## Packages
[Packages](:doc:/packages)
library(eatPlot)
install.packages("rmarkdown")
renv::status()
renv::config
renv::config()
renv::status()
renv::install("rmarkdown")
renv::status()
renv::snapshot()
load(file = "./raw_data/london_marathon.rda")
london_marathon
load(file = "./raw_data/winners.rda")
str(london_marathon)
str(winnres)
str(winners)
marathon_final <- merge(london_marathon, winners,
by = "Year",
all = TRUE)
str(marathon_final)
?merge
View(marathon_final)
library(tutoR)
library(tidyverse)
# Chunk 2: load_packages
library(tutoR)
library(tidyverse)
# Chunk 4
load(file = "./raw_data/winners.rda")
str(winners)
load(file = "./raw_data/london_marathon.rda")
str(london_marathon)
View(london_marathon)
london_marathon$Finishers/london_marathon$Starters
str(winners)
load("https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda")
load(file = "https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda")
?load
load(url("https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda"))
ls()
load(url("https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda?raw=true"))
readRDS(url("https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda"))
source(url("https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda"))
load(url("https://github.com/nrennie/LondonMarathon/blob/main/data/winners.rda"))
here::here("raw_data", "winners.rda")
here::here("raw_data", "winners.rda")
renv::status
renv::status()
here::here("raw_data", "winners.rda")
load(here::here("raw_data", "winners.rda"))
load(here::here("raw_data", "winners_raw.rda"))
winners
save(winners, "./raw_data/winners_raw.rda")
save(winners, file = "./raw_data/winners_raw.rda")
load(here::here("raw_data", "winners_raw.rda"))
winners_raw <- winners
save(winners_raw, file = "./raw_data/winners_raw.rda")
load(here::here("raw_data", "winners_raw.rda"))
winners <- winners_raw %>%
select(-c("Time", "hours", "Minutes", "Seconds"))
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
winners
save(winners, file = here::here("raw_data", "winners.rda"))
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality"))
str(times)
times$Athlete
save(times, file = here::here("raw_data", "times.rda"))
```{r}
# Chunk 2: load_packages
library(tutoR)
library(tidyverse)
# Chunk 4
load(file = "./raw_data/winners.rda")
str(winners)
load(here::here("raw_data", "winners_raw.rda"))
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
saveRDS(winners, file = here::here("raw_data", "winners.rds"))
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality"))
saveRDS(times, file = here::here("raw_data", "times.rds"))
readRDS(file = "./raw_data/winners.rds")
winners <- readRDS(file = "./raw_data/winners.rds")
winners <- readRDS(file = "./raw_data/winners.rds")
times <- readRDS(file = "./raw_data/times.rds")
str(times)
str(winners)
duplicate(winners$Athlete)
duplicated(winners$Athlete)
table(winners$Athlete)
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
times <- winners_raw %>%
select(-c("Category", "Name", "Nationality"))
load(here::here("raw_data", "winners_raw.rda"))
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
times <- winners_raw %>%
select(-c("Category", "Name", "Nationality"))
load(here::here("raw_data", "winners_raw.rda"))
str(winners_raw)
winners_raw <- winners_raw %>%
mutate("ID" = 1:nrow(.))
select(-c("Time", "Hours", "Minutes", "Seconds"))
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
saveRDS(winners, file = here::here("raw_data", "winners.rds"))
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality"))
saveRDS(times, file = here::here("raw_data", "times.rds"))
str(times)
marathon_final <- merge(x = winners,
y = times,
by = "ID")
marathon_final
str(marathon_final)
winners_merged <- merge(x = winners,
y = times,
by = "ID")
str(winners_merged)
View(winners_merged)
na_rows <- sample(1:nrow(winners_raw), 5)
na_rows
set.seed(65)
na_rows <- sample(1:nrow(winners_raw), 5)
winners_raw[na_rows, "ID"] <- NA
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
str(winners)
saveRDS(winners, file = here::here("raw_data", "winners.rds"))
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality", "Name"))
saveRDS(times, file = here::here("raw_data", "times.rds"))
load(here::here("raw_data", "winners_raw.rda"))
winners_raw <- winners_raw %>%
mutate("ID" = 1:nrow(.))
## Introduce some NAs
set.seed(65)
na_rows <- sample(1:nrow(winners_raw), 5)
winners_raw[na_rows, "ID"] <- NA
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
saveRDS(winners, file = here::here("raw_data", "winners.rds"))
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality", "Name"))
str(winners_raw)
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality", "Athlete"))
saveRDS(times, file = here::here("raw_data", "times.rds"))
str(times)
is.na(times$ID)
sum(is.na(times$ID))
sum(is.na(winners$ID))
times <- na.omit(times)
sum(is.na(times$ID))
times <- drop_na(data = times, ID)
winners <- drop_na(data = winners, ID)
str(winners)
getwd()
`?c`
devtools::install_github("nickhaf/tutoR")
library(tutoR)
learnr::run_tutorial("Test", "tutoR")
learnr::run_tutorial("Test", "tutoR")
matrix(c(1, 2, 3, 3, 4, 1), nrow = 2)
matrix(c("a", "b", "c", "d"), nrow = 2)
list(name = c("Jessi", "John"),
big5 = data.frame(extraversion = c(4.3, 2),
openness = c(3.8, 4)),
age = c(45, 18)
)
styler:::style_selection()
library(styler)
install.packages("styler")
vec_char[2]
vec_char <- c("Jess", "Jane", "Joe")
vec_char[2]
vec_char[c(2,3)]
2:4
vec_char[c(2,3,4)]
## Or, less to write:
vec_char[2:4]
vec_char <- c("Jess", "Jane", "Joe", "Alex")
vec_char[2]
vec_char[c(2,3,4)]
## Or, less to write:
vec_char[2:4]
vec_char[c(FALSE, TRUE, TRUE, FALSE)]
penguins
library(tidyverse)
penguins
data()
install.packages("palmerpenguins")
1 < 2
2 < 1
dat_structs <- data.frame("Operator" = c("<", ">", "==", "!=", "<=", ">="),
"Description" = c("less than", "greater than", "equal to", "not equal to", "less or equal", "greater or equal")
)
knitr::kable(dat_structs, "pipe",
col.names = c("Operator", "Description")
)
!TRUE
!(1 > 100)
!TRUE
!(1 > 100)
?sqrt
`rep`
?rep
rep(x = 4, times = 10)
rep(4, 10)
rep(10, 4)
rep(times = 10, x = 4)
?rep
a:g
library(aRtsy)
library(aRtsy)
set.seed(1)
canvas_collatz(colors = colorPalette("tuscany3"))
canvas_flame(colors = colorPalette("dark2"))
set.seed(1)
canvas_mesh(color = "#000000")
canvas_mesh(colors = colorPalette("dark2"))
?canvas_mesh
canvas_function(colors = colorPalette("tuscany1"))
canvas_collatz(colors = colorPalette("tuscany3"))
canvas_collatz(colors = colorPalette("jungle"))
canvas_collatz(colors = colorPalette("origami"))
?canvas_collatz
canvas_collatz(colors = colorPalette("blackwhite"))
canvas_mesh(colors = colorPalette("blackwhite"))
canvas_mesh(colors = colorPalette("jungle"))
set.seed(1)
canvas_collatz(colors = colorPalette("tuscany3"))
canvas_collatz(colors = colorPalette("tuscany1"))
canvas_collatz(colors = colorPalette("flora"))
set.seed(1)
canvas_collatz(colors = colorPalette("lava"))
library(dplyr)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(psych)
ggplot2::alpha()
sessionInfo()
renv::status()
install.packages("igraph")
renv::snapshot()
renv::status()
renv::status()
renv::snapshot()
install.packages("aRtsy")
renv::snapshot()
options(
repos = c(
igraph = 'https://igraph.r-universe.dev',
CRAN = 'https://cloud.r-project.org'
)
)
install.packages('igraph')
renv::snapshot()
str(num_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
str(num_vec)
str(char_vec)
str(log_vec)
mean(char_vec)
loadRconsole()
Sys.setenv(LANG = "en")
mean(char_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
mean(char_vec)
Sys.setenv(LANG = "en")
mean(char_vec)
Sys.setenv(lang = "en_US")
mean(char_vec)
usethis::edit_r_profile()
mean(char_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
mean(char_vec)
usethis::edit_r_profile(scope = "project")
mean(char_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
mean(char_vec)
mean(char_vec)
persons_tibble <- tibble(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons_tibble <- dplyr::tibble(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons_tibble
?tibble
persons_tibble <- tibble::tibble(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons_tibble
styler:::style_selection()
## extract the first and the last row:
persons[c(1,4), ]
persons <- data.frame(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
## extract the first and the last row:
persons[c(1,4), ]
styler:::style_selection()
persons[ , c(2, 4) ]
styler:::style_selection()
persons[c(1, 4), c(2, 4)]
# Extract the columns by name:
persons[, c("age", "big5_extra")]
# Extract the columns by name:
persons[, c("age", "big5_extra")]
# Or only the column age:
persons$age
str(persons$age)
persons[c(TRUE, FALSE, FALSE, TRUE), c(TRUE, FALSE, FALSE, TRUE)]
persons[persons$age == 18, ]
persons
persons[persons$big5_extra & persons$big5_extra < 4.5, ]
persons[persons$age == 18 | persons$big5_extra > 3, ]
library(dplyr)
filter(persons, age == 18, big5_extra < 4.5)
persons %>%
filter(age == 18, big5_extra)
filter(persons, age == 18, big5_extra < 4.5)
persons %>%
filter(age == 18, big5_extra < 4.5)
rep(2, 4) %>%
c()
seq(1, 2) %>%
rep(2, 4) %>%
c()
seq(1, 2)
mean(rep(seq(from = 1, to = 20, by = 0.5), 4))
?sample
mean(sample(rep(seq(from = 1, to = 20, by = 0.5), 4), size = 10, replace = TRUE))
?sqrt
?mean
start_value %>%
seq(from = ., to = 20, by = 0.5)
start_value <- -8
start_value %>%
seq(from = ., to = 20, by = 0.5)
start_value %>%
seq(from = ., to = 20, by = 0.5) %>%
rep(4) %>%
abs
start_value %>%
seq(from = ., to = 20, by = 0.5) %>%
rep(4) %>%
abs %>%
mean %>%
sqrt
start_value <- -8
sqrt(mean(abs((rep(seq(from = start_value, to = 20, by = 0.5), 4)))))
start_value %>%
seq(from = ., to = 20, by = 0.5) %>%
rep(times = 4) %>%
abs %>%
mean %>%
sqrt
