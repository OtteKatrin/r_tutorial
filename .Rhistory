mean(char_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
mean(char_vec)
Sys.setenv(LANG = "en")
mean(char_vec)
Sys.setenv(lang = "en_US")
mean(char_vec)
usethis::edit_r_profile()
mean(char_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
mean(char_vec)
usethis::edit_r_profile(scope = "project")
mean(char_vec)
num_vec <- c(2023, 8, 8)
num_vec
char_vec <- c("This", "is", "a", "vec", ".")
char_vec
log_vec <- c(TRUE, FALSE)
log_vec
mean(char_vec)
mean(char_vec)
persons_tibble <- tibble(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons_tibble <- dplyr::tibble(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons_tibble
?tibble
persons_tibble <- tibble::tibble(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons_tibble
styler:::style_selection()
## extract the first and the last row:
persons[c(1,4), ]
persons <- data.frame(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
## extract the first and the last row:
persons[c(1,4), ]
styler:::style_selection()
persons[ , c(2, 4) ]
styler:::style_selection()
persons[c(1, 4), c(2, 4)]
# Extract the columns by name:
persons[, c("age", "big5_extra")]
# Extract the columns by name:
persons[, c("age", "big5_extra")]
# Or only the column age:
persons$age
str(persons$age)
persons[c(TRUE, FALSE, FALSE, TRUE), c(TRUE, FALSE, FALSE, TRUE)]
persons[persons$age == 18, ]
persons
persons[persons$big5_extra & persons$big5_extra < 4.5, ]
persons[persons$age == 18 | persons$big5_extra > 3, ]
library(dplyr)
filter(persons, age == 18, big5_extra < 4.5)
persons %>%
filter(age == 18, big5_extra)
filter(persons, age == 18, big5_extra < 4.5)
persons %>%
filter(age == 18, big5_extra < 4.5)
rep(2, 4) %>%
c()
seq(1, 2) %>%
rep(2, 4) %>%
c()
seq(1, 2)
mean(rep(seq(from = 1, to = 20, by = 0.5), 4))
?sample
mean(sample(rep(seq(from = 1, to = 20, by = 0.5), 4), size = 10, replace = TRUE))
?sqrt
?mean
start_value %>%
seq(from = ., to = 20, by = 0.5)
start_value <- -8
start_value %>%
seq(from = ., to = 20, by = 0.5)
start_value %>%
seq(from = ., to = 20, by = 0.5) %>%
rep(4) %>%
abs
start_value %>%
seq(from = ., to = 20, by = 0.5) %>%
rep(4) %>%
abs %>%
mean %>%
sqrt
start_value <- -8
sqrt(mean(abs((rep(seq(from = start_value, to = 20, by = 0.5), 4)))))
start_value %>%
seq(from = ., to = 20, by = 0.5) %>%
rep(times = 4) %>%
abs %>%
mean %>%
sqrt
# Chunk 1
vec_char <- c("Jess", "Jane", "Joe", "Alex")
vec_char[2]
# Chunk 2
vec_char[c(2,3,4)]
## Or, less to write:
vec_char[2:4]
# Chunk 3
vec_char[c(TRUE, FALSE, TRUE, FALSE)]
# Chunk 4
# Define an example data frame
persons <- data.frame(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extro = c(3.5, 2, 4.5, 4.2)
)
# Chunk 5
# Extract the first and the fourth row
persons[c(1, 4), ]
# Extract the second and the fourth column:
persons[, c(2, 4)]
# Extract the columns by name:
persons[, c("age", "big5_extra")]
str(persons)
# Extract the columns by name:
persons[, c("age", "big5_extro")]
# Extract the second and the fourth column:
persons[, c(2, 4)]
# Extract the columns by name:
persons[, c("age", "big5_extro")]
# Or only the column age (and turn it intow a vector right away):
persons$age
# Chunk 1
vec_char <- c("Jess", "Jane", "Joe", "Alex")
vec_char[2]
# Chunk 2
vec_char[c(2,3,4)]
## Or, less to write:
vec_char[2:4]
# Chunk 3
vec_char[c(TRUE, FALSE, TRUE, FALSE)]
# Chunk 4
# Define an example data frame
persons <- data.frame(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extro = c(3.5, 2, 4.5, 4.2)
)
# Chunk 5
# Extract the first and the fourth row
persons[c(1, 4), ]
# Chunk 6
# Extract the second and the fourth column:
persons[, c(2, 4)]
# Extract the columns by name:
persons[, c("age", "big5_extro")]
# Or only the column age (and turn it intow a vector right away):
persons$age
# Chunk 7
persons[c(1, 4), c(2, 4)]
persons[c(1, 4), c("age", "big5_extro")]
# Chunk 8
persons[c(TRUE, FALSE, FALSE, TRUE), c(TRUE, FALSE, FALSE, TRUE)]
# Chunk 9
persons[persons$age == 18, ]
# Chunk 10
persons$age == 18
# Chunk 11
persons[persons$age > 17 & persons$big5_extro < 4.5, ]
# Chunk 12
persons[persons$age == 18 | persons$big5_extro > 3, ]
# Chunk 13
library(dplyr)
filter(persons, age == 18, big5_extro < 4.5)
# Chunk 14
persons %>%
filter(age == 18, big5_extro < 4.5)
# Chunk 15
start_value <- -8
sqrt(mean(abs((rep(seq(from = start_value, to = 20, by = 0.5), 4)))))
persons <- data.frame(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extra = c(3.5, 2, 4.5, 4.2)
)
persons$big5_neuro <- c(3, 4, 1, 2)
persons <- persons %>%
mutate(big5_neuo = c(3, 4, 1, 2))
persons
persons_2 <- persons %>%
mutate(big5_neuo = c(3, 4, 1, 2))
persons <- persons %>%
mutate(big5_open = c(3, 4, 3, 4))
persons
persons <- data.frame(name = c("Anna", "Alex", "John", "Jessi"),
age = c(19, 17, 18, 18),
birth_month = c("Jan", "Sep", "Oct", "Mar"),
big5_extro = c(3.5, 2, 4.5, 4.2)
)
persons$big5_neuro <- c(3, 4, 1, 2)
persons <- persons %>%
mutate(big5_open = c(3, 4, 3, 4))
.badCode {
source("~/.active-rstudio-document", echo=TRUE)
?includeCSS
5/2
?ifelse
persons$big5_neuro_dichotomous <- ifelse(test = persons$big5_neuro >= 5/2,
yes = "high",
no = "low")
persons$big5_neuro_dichotomous
persons <- persons %>%
mutate(big5_extra_dichotomous = ifelse(test = persons$big5_neuro >= 5/2,
yes = "high",
no = "low")
)
install.packages("readr")
# install.packages("readr")
babynames <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-22/babynames.csv')
str(babynames)
tuesdata <- tidytuesdayR::tt_load('2022-08-16')
str(tuesdata)
str(winners)
remotes::install_github("nrennie/LondonMarathon")
data(winners, package = "LondonMarathon")
str(winners)
head(winners)
times <- readRDS(file = "./raw_data/times.rds")
times
winners <- readRDS(file = "./raw_data/winners.rds")
str(winners)
head(winners)
times <- readRDS(file = "./raw_data/times.rds")
head(times)
str(winners)
select(winners, Year, Athlete )
str(winners)
winners[winners$Year > 2000 & winners$Category == "Women", c("Category", "Year")]
winners %>%
filter(Year > 2000, Category == "women") %>%
select(Category, Year)
winners[winners$Year > 2000 & winners$Category == "Women", c("Category", "Year")]
winners %>%
filter(Year > 2000, Category == "women") %>%
select(Category, Year)
winners %>%
filter(Year > 2000, Category == "Women") %>%
select(Category, Year)
# Or only the column Year (and turn it intow a vector right away):
winners$Year
# Extract the second and the fourth column:
winners[, c(2, 4)]
# Extract the columns by name:
winners[, c("Category", "Year")]
# Extract the columns by name:
winners[, c("Year", "Nationality")]
# Or only the column Year (and turn it intow a vector right away):
winners$Year
persons[c(1, 4), c("Year", "Nationality")]
winners[c(1, 4), c(2, 4)]
winners[c(1, 4), c("Year", "Nationality")]
winners[c(TRUE, FALSE, FALSE, TRUE), c(TRUE, FALSE, FALSE, TRUE)]
winners[c(TRUE, FALSE, FALSE, TRUE), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
winners[c(TRUE), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
winners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
winners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
winners <- readRDS(file = "./raw_data/winners.rds")
str(winners)
load(here::here("raw_data", "winners_raw.rda"))
winners_raw <- winners_raw %>%
mutate("ID" = 1:nrow(.))
## Introduce some NAs
set.seed(65)
na_rows <- sample(1:nrow(winners_raw), 5)
winners_raw[na_rows, "ID"] <- NA
winners <- winners_raw %>%
select(-c("Time", "Hours", "Minutes", "Seconds"))
saveRDS(as.data.frame(winners), file = here::here("raw_data", "winners.rds"))
winners <- readRDS(file = "./raw_data/winners.rds")
str(winners)
# Or only the column Year (and turn it into a vector right away):
winners$Year
winners[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
winners[winners$Nationality == "Kenya", ]
winners$Nationality == "Kenya"
winners[winners$Nationality == "Kenya" & winners$Year > 2000, ]
winners[winners$Nationality == "Kenya" & winners$Year < 2000, ]
winners[winners$Nationality == c("Kenya", "Germany"), ]
winners[winners$Nationality %in% c("Kenya", "Germany"), ]
str(winners)
winners[winners$Nationality %in% c("Kenya", "Germany", "Norway"), ]
unique(winners$Category)
winners[(winners$Category == "Wheelchair Women" & winners$Nationality == "Germany")]
winners[(winners$Category == "Wheelchair Women" & winners$Nationality == "Germany"), ]
winners
winners[(winners$Category == "Wheelchair Women" & winners$Nationality == "Australia"), ]
winners[(winners$Category == "Wheelchair Women" & winners$Nationality == "Australia") | (winners$Category == "Wheelchair Men" & winners$Nationality == "United States"), ]
filter(winners, Nationality == "Kenya", Year < 2000)
winners_nat <- winners[winners$Nationality %in% c("Kenya", "Germany", "Norway"), ]
winners_nat <- winners[winners$Nationality %in% c("Kenya", "Germany", "Norway"), ]
winners_nat
library(dplyr)
filter(winners, Nationality == "Kenya", Year < 2000)
vec_athlete <- winners$Athlete
vec_athlete
str(vec_athlete)
vec_char[2]
vec_athlete[2]
vec_athlete[c(2,3,4)]
## Or, less to write:
vec_athlete[2:4]
vec_char[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
vec_athlete[c(rep(TRUE, 100), rep(FALSE, 65)), c(TRUE, FALSE, FALSE, TRUE, TRUE)]
vec_athlete[c(rep(TRUE, 100), rep(FALSE, 65))]
learnr::run_tutorial(name = "subsetting", package = "tutoR")
write.csv(times, file = here::here("raw_data", "times.csv"))
times <- read.csv(file = "./raw_data/times.csv")
str(times)
head(times)
?write.csv
write.csv(times, file = here::here("raw_data", "times.csv"), sep = ",")
write.csv2(times, file = here::here("raw_data", "times.csv"))
times <- read.csv(file = "./raw_data/times.csv")
str(times)
head(times)
?read.csv
times <- read.csv(file = "./raw_data/times.csv", sep = ";")
head(times)
str(times)
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality", "Athlete", "Time"))
write.csv2(times, file = here::here("raw_data", "times.csv"))
times <- read.csv(file = "./raw_data/times.csv", sep = ";")
head(times)
times <- read.csv2(file = "./raw_data/times.csv", sep = ";")
head(times)
times <- read.csv(file = "./raw_data/times.csv",
sep = ";",
row.names = NULL)
head(times)
times <- winners_raw %>%
select(-c("Category", "Year", "Nationality", "Athlete", "Time"))
str(times)
?write.csv2
write.table(times, file = here::here("raw_data", "times.csv"), sep = ";", row.names = FALSE)
times <- read.csv(file = "./raw_data/times.csv")
head(times)
times <- read.csv(file = "./raw_data/times.csv",
sep = ";",
row.names = NULL)
head(times)
times <- read.csv(file = "./raw_data/times.csv",
sep = ";")
head(times)
?merge
winners_times <- merge(x = winners,
y = times)
str(winners_times)
winners_times <- merge(x = winners,
y = times,
by = "ID")
winners_times
head(winners_times)
winners %>%
rename("ID", "ID_winner")
winners %>%
rename("ID_winner" = "ID")
?full_join
## Now merge:
winner_times_2 <- winners_2 %>%
full_join(y = times,
by = c(ID_winner, ID))
## First, rename the ID column for one data set. I use the rename() function from the tidyverse here.
winners_2 <- winners %>%
rename("ID_winner" = "ID")
## Now merge:
winner_times_2 <- winners_2 %>%
full_join(y = times,
by = c(ID_winner, ID))
## Now merge:
winner_times_2 <- winners_2 %>%
full_join(y = times,
by = c("ID_winner", "ID"))
## Now merge:
winner_times_2 <- winners %>%
full_join(y = times,
by = c("ID_winner", "ID"))
## Now merge:
winner_times_2 <- winners %>%
full_join(y = times,
by = ID)
## Now merge:
winner_times_2 <- winners %>%
full_join(y = times,
by = ID)
## Now merge:
winner_times_2 <- winners %>%
full_join(times)
## Now merge:
winner_times_2 <- winners %>%
full_join(times, by = join_by(ID))
winners_times <- merge(x = winners,
y = times,
by = "ID")
head(winners_times)
str(winners_times)
str(winners)
str(times)
winners$ID
times$ID
View(winners_times)
?is.na
is.na(winners$ID)
sum(is.na(winners$ID))
winners <- winners[!is.na(winners$ID)]
winners <- winners[!is.na(winners$ID), ]
winners
winners_na <- winners[!is.na(winners$ID), ]
str(winners_na)
!is.na(winners$ID)
winners_times <- winners %>%
inner_join(times)
winners_times$Seconds_total <- winners_times$Hours * 60^2 + winners_times$Minutes * 60 + winners_times$Seconds
winners_times$Seconds_total
winners_times <- winners_times %>%
mutate(Minutes_total = winners_times$Hours * 60 + winners_times$Minutes * winners_times$Seconds / 60)
winners_times
60 * 0.166666
str(winners_times)
continents <- read.csv(file = "./raw_data/continents.csv")
head(continents)
times <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
continents <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
head(continents)
continents <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
head(continents)
continents <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
continents
continents <- read.csv(file = "./raw_data/continents.csv")
head(continents)
continents <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
head(continents)
winners_times <- merge(x = winners,
y = continents,
by.x = "Nationality",
by.y = "Entity")
head(winners_times)
winners_raw[na_rows, "Time"] <- NA
NA + 1
source("~/GitHub/r_tutorial/raw_data/data_preperation.R", echo=TRUE)
winners <- readRDS(file = "./raw_data/winners.rds")
head(winners)
# Chunk 1
continents <- read.csv(file = "./raw_data/continents.csv")
head(continents)
# Chunk 2
?read.csv
# Chunk 3
continents <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
head(continents)
# Chunk 4
winners_contintents <- merge(x = winners,
y = continents,
by.x = "Nationality",
by.y = "Entity")
head(winners_contintents)
winners_continents$Seconds_total <- winners_continents$Hours * 60^2 + winners_continents$Minutes * 60 + winners_continents$Seconds
# Chunk 1
continents <- read.csv(file = "./raw_data/continents.csv")
head(continents)
# Chunk 2
?read.csv
# Chunk 3
continents <- read.csv(file = "./raw_data/continents.csv",
sep = ";")
head(continents)
# Chunk 4
winners_continents <- merge(x = winners,
y = continents,
by.x = "Nationality",
by.y = "Entity")
head(winners_continents)
winners_continents$Seconds_total <- winners_continents$Hours * 60^2 + winners_continents$Minutes * 60 + winners_continents$Seconds
winners_continents$Seconds_total
winners_continents <- winners_continents %>%
mutate(Minutes_total = winners_continents$Hours * 60 + winners_continents$Minutes * winners_continents$Seconds / 60)
winners_continents <- winners_continents %>%
mutate(Minutes_total = winners_continents$Hours * 60 + winners_continents$Minutes * winners_continents$Seconds / 60)
winners_continents$Minutes_total
sum(c(4,5,NA))
