# The big picture

Now that we have completed our set up, let's dive right into programming with `R`. In this chapter, we will go through a "mini-project", which follows a typical workflow when working with data in `R`. We will install and load packages, load data, perform some operations on this data, calculate some summary statistics and plot them. In later chapters, we will go into a little bit more depth for each topic. If you want to have more in depth information instead of following the whole workflow first, you can also jump to the according chapter and read the theory. But make sure to come back to this chapter for the final exercise.

## Packages

[Packages](\packages.qmd) are extensions to the `base R` you get by default. We already installed our first packages in [About this workshop](\getting_started.qmd#about-this-workshop). Let's keep doing that and install the following package as well:

```{r install_tidyverse, eval = FALSE}
install.packages("tidyverse")
```

Just by installing the packages, we can't use them. We also have to load them into our R session:

```{r load_packages}
library(tutoR)
library(tidyverse)
```

The top of your `R Script` should look something like this:

```{r package_setup, eval = FALSE}
install.packages("devtools")
devtools::install_github("nickhaf/tutoR")
install.packages("tidyverse")

library(tutoR)
library(tidyverse)
```

## Load Data

[Data is loaded](\load_data.qmd) into R so you can work with it. Let's do just that. First, you need to download the file "london_marathon.csv" from [this link](https://github.com/nickhaf/r_tutorial/tree/getting_started/raw_data) and save it in your project folder (*Tip: Save it in a new subfolder named "raw_data" or somewhat similar.*). The data comes from the [LondonMarathon](https://github.com/nrennie/LondonMarathon) package. Then, you can load it into R:

```{r}
load(file = "./raw_data/london_marathon.rda")
```

This will load the data into R. You can see it popping up in your `Environment` pane on the upper right. Note we used the `load()` function to load a data set with the ending `.rda`. Here you can find a more thourough discussion about [loading data](\load_data.qmd). It is important you use the correct path, because otherwise R will not find your data file. Here the RStudio project we have created earlier comes in handy. It automatically knows our file lies within our project folder, which is why we can use a **relative path**, that starts at the project path and looks into the folder `raw_data` to open the file. Otherwise, we would have to use an **absolute path** (like "C:/Users/hafiznij/Documents/GitHub/r_tutorial/raw_data/london_marathon.rda" which will only work on my notebook, and only if my project stays in on this path.

## Take a look

Now that we have our data loaded safely into R, we can get an overview with a multitude of commands. One of the most important ones might be `View()`, which will open the data set excel-style in a new window:

```{r, eval = FALSE}
View(london_marathon)
```

Especially for bigger data sets, it might be more feasible to only look at the structure and not the whole data set:

```{r}
str(london_marathon)
```

On the left we can see the columns of this data.frame, named `Date`, `Year`, `Applicants` etc ... Further on the right we see the first values in each column, for example `1981`, `1982` etc ...

## Data wrangling

Now, lets do something fun with this data. We want to answer the question if people have gotten faster at running marathons over that last 40 years. 
- Use both data sets. 

We will use a ...

### Merging data
Sadly, the winners are not saved in this data set, so we have to load that one as well. 
Exercise: Try to load the second data set called "winners.rda" into R on your own.

```{r, echo = FALSE}
load(file = "./raw_data/winners.rda")
```

Now that we have two data sets loaded into R, we can merge them by using the `merge()` command: 

```{r}
marathon_final <- merge(x = london_marathon, 
                        y = winners,
                        by = "Year",
                        all = TRUE)
```

What happens here? We take our two data sets, called `london_marathon` and `winners` and combine them on the column `Year`. We don't want to loose any data that doesn't have match in the other data set, so we set `all = TRUE`, and voila:
```{r}
str(marathon_final)
```
We have merged the columns of the `winner` data set onto the right the `london_marathon` data.

### Clean up data
No we can tidy up our data a bit. 

Remove NAs, select relevant columns, Build another Time column

```{r}
winners$Minutes_total <- winners$Hours * 60 + winners$Minutes

```

### Subsetting data

Divide by Category (Wheelchar vs. no wheelchair)

### Regression Time vs. year

```{r}
women <- winners[winners$Category == "Women", ]


lm_rs <- lm(Minutes_total ~ Year, women)
summary(lm_rs)

# 614 min bei Year = 0, für jedes Jahr -0.23 Min weniger:
# 614 + 2020 * -0.236


plot(lm_rs)
```

### Plot the data

```{r}
library(ggplot2)
winners %>%
  filter(Category %in% c("Men", "Women")) %>%
ggplot(data = ., aes(x = Year,
                            y = Minutes_total,
                     colour = Nationality,
                     shape = Category)) +
  geom_point()


winners %>%
  filter(Category %in% c("Wheelchair Men", "Wheelchair Women")) %>%
ggplot(data = ., aes(x = Year,
                            y = Minutes_total,
                     colour = Nationality,
                     shape = Category)) +
  geom_point()

```

```{r}
# Für die Übung. 
#install.packages("tidytuesdayR")
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load('2022-08-16')


```
